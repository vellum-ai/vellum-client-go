// This file was auto-generated by Fern from our API Definition.

package testsuites

import (
	context "context"
	vellumclientgo "github.com/vellum-ai/vellum-client-go"
	core "github.com/vellum-ai/vellum-client-go/core"
	option "github.com/vellum-ai/vellum-client-go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// List the Test Cases associated with a Test Suite
func (c *Client) ListTestSuiteTestCases(
	ctx context.Context,
	// A UUID string identifying this test suite.
	id string,
	request *vellumclientgo.ListTestSuiteTestCasesRequest,
	opts ...option.RequestOption,
) (*vellumclientgo.PaginatedTestSuiteTestCaseList, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/test-suites/%v/test-cases", id)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *vellumclientgo.PaginatedTestSuiteTestCaseList
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Upserts a new test case for a test suite, keying off of the optionally provided test case id.
//
// If an id is provided and has a match, the test case will be updated. If no id is provided or no match
// is found, a new test case will be appended to the end.
//
// Note that a full replacement of the test case is performed, so any fields not provided will be removed
// or overwritten with default values.
func (c *Client) UpsertTestSuiteTestCase(
	ctx context.Context,
	// A UUID string identifying this test suite.
	id string,
	request *vellumclientgo.UpsertTestSuiteTestCaseRequest,
	opts ...option.RequestOption,
) (*vellumclientgo.TestSuiteTestCase, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/test-suites/%v/test-cases", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *vellumclientgo.TestSuiteTestCase
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Created, replace, and delete Test Cases within the specified Test Suite in bulk
func (c *Client) TestSuiteTestCasesBulk(
	ctx context.Context,
	// A UUID string identifying this test suite.
	id string,
	request []*vellumclientgo.TestSuiteTestCaseBulkOperationRequest,
	opts ...option.RequestOption,
) (*core.Stream[[]*vellumclientgo.TestSuiteTestCaseBulkResult], error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/test-suites/%v/test-cases-bulk", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	streamer := core.NewStreamer[[]*vellumclientgo.TestSuiteTestCaseBulkResult](c.caller)
	return streamer.Stream(
		ctx,
		&core.StreamParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Headers:         headers,
			Client:          options.HTTPClient,
			Request:         request,
		},
	)
}

// Deletes an existing test case for a test suite, keying off of the test case id.
func (c *Client) DeleteTestSuiteTestCase(
	ctx context.Context,
	// A UUID string identifying this test suite.
	id string,
	// An id identifying the test case that you'd like to delete
	testCaseId string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v1/test-suites/%v/test-cases/%v",
		id,
		testCaseId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}
