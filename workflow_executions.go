// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type RetrieveWorkflowExecutionDetailRequest struct {
	// Optional keyset cursor span_id to continue from (exclusive)
	PrevSpanId *string `json:"-" url:"prev_span_id,omitempty"`
	// Maximum number of spans to return (for lazy loading)
	SpanLimit *int `json:"-" url:"span_limit,omitempty"`
}

type WorkflowExecutionDetail struct {
	SpanId        string                          `json:"span_id" url:"span_id"`
	ParentContext *ParentContext                  `json:"parent_context,omitempty" url:"parent_context,omitempty"`
	Start         time.Time                       `json:"start" url:"start"`
	End           *time.Time                      `json:"end,omitempty" url:"end,omitempty"`
	Inputs        []*ExecutionVellumValue         `json:"inputs" url:"inputs"`
	Outputs       []*ExecutionVellumValue         `json:"outputs" url:"outputs"`
	Error         *WorkflowError                  `json:"error,omitempty" url:"error,omitempty"`
	UsageResults  []*WorkflowExecutionUsageResult `json:"usage_results,omitempty" url:"usage_results,omitempty"`
	Spans         []*VellumSpan                   `json:"spans" url:"spans"`
	State         map[string]interface{}          `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionDetail) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionDetail) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionDetail
	var unmarshaler = struct {
		embed
		Start *core.DateTime `json:"start"`
		End   *core.DateTime `json:"end,omitempty"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionDetail(unmarshaler.embed)
	w.Start = unmarshaler.Start.Time()
	w.End = unmarshaler.End.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionDetail) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionDetail
	var marshaler = struct {
		embed
		Start *core.DateTime `json:"start"`
		End   *core.DateTime `json:"end,omitempty"`
	}{
		embed: embed(*w),
		Start: core.NewDateTime(w.Start),
		End:   core.NewOptionalDateTime(w.End),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionDetail) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
