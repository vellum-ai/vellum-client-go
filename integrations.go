// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
)

type IntegrationsListRequest struct {
	// * `COMPOSIO` - Composio
	IntegrationProvider *string `json:"-" url:"integration_provider,omitempty"`
	// Number of results to return per page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// The initial index from which to return the results.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Which field to use when ordering the results.
	Ordering *string `json:"-" url:"ordering,omitempty"`
	// A search term.
	Search *string `json:"-" url:"search,omitempty"`
}

type ComponentsSchemasComposioExecuteToolRequest = *ComposioExecuteToolRequest

type ComponentsSchemasComposioExecuteToolResponse = *ComposioExecuteToolResponse

type ComponentsSchemasComposioIntegrationExecConfig = *ComposioIntegrationExecConfig

// Payload for executing a Composio tool with provider id and tool arguments.
type ComposioExecuteToolRequest struct {
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	provider  string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComposioExecuteToolRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComposioExecuteToolRequest) Provider() string {
	return c.provider
}

func (c *ComposioExecuteToolRequest) UnmarshalJSON(data []byte) error {
	type embed ComposioExecuteToolRequest
	var unmarshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ComposioExecuteToolRequest(unmarshaler.embed)
	if unmarshaler.Provider != "COMPOSIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "COMPOSIO", unmarshaler.Provider)
	}
	c.provider = unmarshaler.Provider

	extraProperties, err := core.ExtractExtraProperties(data, *c, "provider")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComposioExecuteToolRequest) MarshalJSON() ([]byte, error) {
	type embed ComposioExecuteToolRequest
	var marshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed:    embed(*c),
		Provider: "COMPOSIO",
	}
	return json.Marshal(marshaler)
}

func (c *ComposioExecuteToolRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response payload with provider id and execution output from a Composio tool.
type ComposioExecuteToolResponse struct {
	Data     map[string]interface{} `json:"data" url:"data"`
	provider string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComposioExecuteToolResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComposioExecuteToolResponse) Provider() string {
	return c.provider
}

func (c *ComposioExecuteToolResponse) UnmarshalJSON(data []byte) error {
	type embed ComposioExecuteToolResponse
	var unmarshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ComposioExecuteToolResponse(unmarshaler.embed)
	if unmarshaler.Provider != "COMPOSIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "COMPOSIO", unmarshaler.Provider)
	}
	c.provider = unmarshaler.Provider

	extraProperties, err := core.ExtractExtraProperties(data, *c, "provider")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComposioExecuteToolResponse) MarshalJSON() ([]byte, error) {
	type embed ComposioExecuteToolResponse
	var marshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed:    embed(*c),
		Provider: "COMPOSIO",
	}
	return json.Marshal(marshaler)
}

func (c *ComposioExecuteToolResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ComposioIntegrationExecConfig struct {
	Slug  string `json:"slug" url:"slug"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComposioIntegrationExecConfig) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComposioIntegrationExecConfig) Type() string {
	return c.type_
}

func (c *ComposioIntegrationExecConfig) UnmarshalJSON(data []byte) error {
	type embed ComposioIntegrationExecConfig
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ComposioIntegrationExecConfig(unmarshaler.embed)
	if unmarshaler.Type != "COMPOSIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "COMPOSIO", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComposioIntegrationExecConfig) MarshalJSON() ([]byte, error) {
	type embed ComposioIntegrationExecConfig
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "COMPOSIO",
	}
	return json.Marshal(marshaler)
}

func (c *ComposioIntegrationExecConfig) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type IntegrationRead struct {
	Id       *string             `json:"id,omitempty" url:"id,omitempty"`
	Label    *string             `json:"label,omitempty" url:"label,omitempty"`
	IconUrl  string              `json:"icon_url" url:"icon_url"`
	Name     IntegrationName     `json:"name" url:"name"`
	Provider IntegrationProvider `json:"provider" url:"provider"`
	// Integration provider specific information needed for filtering tools.
	ExecConfig ComponentsSchemasComposioIntegrationExecConfig `json:"exec_config" url:"exec_config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IntegrationRead) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationRead) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationRead) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type PaginatedSlimIntegrationReadList struct {
	Count    *int                   `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimIntegrationRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimIntegrationReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimIntegrationReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimIntegrationReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimIntegrationReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimIntegrationReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type SlimIntegrationRead struct {
	Id       *string             `json:"id,omitempty" url:"id,omitempty"`
	Label    *string             `json:"label,omitempty" url:"label,omitempty"`
	IconUrl  string              `json:"icon_url" url:"icon_url"`
	Name     IntegrationName     `json:"name" url:"name"`
	Provider IntegrationProvider `json:"provider" url:"provider"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimIntegrationRead) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimIntegrationRead) UnmarshalJSON(data []byte) error {
	type unmarshaler SlimIntegrationRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SlimIntegrationRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimIntegrationRead) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
