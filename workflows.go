// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type WorkflowsPullRequest struct {
	ExcludeCode    *bool `json:"-" url:"exclude_code,omitempty"`
	ExcludeDisplay *bool `json:"-" url:"exclude_display,omitempty"`
	IncludeJson    *bool `json:"-" url:"include_json,omitempty"`
	IncludeSandbox *bool `json:"-" url:"include_sandbox,omitempty"`
	// Release tag to use when pulling from deployment (implies deployment-only lookup)
	ReleaseTag *string `json:"-" url:"release_tag,omitempty"`
	Strict     *bool   `json:"-" url:"strict,omitempty"`
	// Semantic version range to validate against the Workflow SDK version (e.g., '>=1.0.0,<1.2.3')
	Version *string `json:"-" url:"version,omitempty"`
}

type WorkflowPushRequest struct {
	// The execution configuration of the workflow.
	ExecConfig        WorkflowPushExecConfig               `json:"exec_config" url:"-"`
	WorkflowSandboxId *string                              `json:"workflow_sandbox_id,omitempty" url:"-"`
	DeploymentConfig  *WorkflowPushDeploymentConfigRequest `json:"deployment_config,omitempty" url:"-"`
	// List of dataset rows with inputs for scenarios.
	Dataset []*DatasetRowPushRequest `json:"dataset,omitempty" url:"-"`
	DryRun  *bool                    `json:"dry_run,omitempty" url:"-"`
	Strict  *bool                    `json:"strict,omitempty" url:"-"`
}

type SerializeWorkflowFilesRequest struct {
	Files map[string]interface{} `json:"files,omitempty" url:"-"`
}

type DatasetRowPushRequest struct {
	Label  string                 `json:"label" url:"label"`
	Inputs map[string]interface{} `json:"inputs" url:"inputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DatasetRowPushRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DatasetRowPushRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DatasetRowPushRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatasetRowPushRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatasetRowPushRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type WorkflowPushDeploymentConfigRequest struct {
	Label              *string  `json:"label,omitempty" url:"label,omitempty"`
	Name               *string  `json:"name,omitempty" url:"name,omitempty"`
	Description        *string  `json:"description,omitempty" url:"description,omitempty"`
	ReleaseTags        []string `json:"release_tags,omitempty" url:"release_tags,omitempty"`
	ReleaseDescription *string  `json:"release_description,omitempty" url:"release_description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowPushDeploymentConfigRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowPushDeploymentConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowPushDeploymentConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowPushDeploymentConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowPushDeploymentConfigRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowPushExecConfig = string

type WorkflowPushResponse struct {
	WorkflowSandboxId    string                 `json:"workflow_sandbox_id" url:"workflow_sandbox_id"`
	WorkflowDeploymentId *string                `json:"workflow_deployment_id,omitempty" url:"workflow_deployment_id,omitempty"`
	ProposedDiffs        map[string]interface{} `json:"proposed_diffs,omitempty" url:"proposed_diffs,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowPushResponse) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowPushResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowPushResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowPushResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowPushResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The latest execution state of a given Workflow Execution
type WorkflowResolvedState struct {
	TraceId         string                 `json:"trace_id" url:"trace_id"`
	Timestamp       time.Time              `json:"timestamp" url:"timestamp"`
	SpanId          string                 `json:"span_id" url:"span_id"`
	State           map[string]interface{} `json:"state" url:"state"`
	PreviousSpanId  *string                `json:"previous_span_id,omitempty" url:"previous_span_id,omitempty"`
	PreviousTraceId *string                `json:"previous_trace_id,omitempty" url:"previous_trace_id,omitempty"`
	RootSpanId      *string                `json:"root_span_id,omitempty" url:"root_span_id,omitempty"`
	RootTraceId     *string                `json:"root_trace_id,omitempty" url:"root_trace_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResolvedState) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResolvedState) UnmarshalJSON(data []byte) error {
	type embed WorkflowResolvedState
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResolvedState(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResolvedState) MarshalJSON() ([]byte, error) {
	type embed WorkflowResolvedState
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResolvedState) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
