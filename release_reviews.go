// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type ReleaseCreatedBy struct {
	Id       string  `json:"id" url:"id"`
	FullName *string `json:"full_name,omitempty" url:"full_name,omitempty"`
	Email    string  `json:"email" url:"email"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseCreatedBy) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseCreatedBy) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseCreatedBy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseCreatedBy(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseCreatedBy) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReleaseEnvironment struct {
	Id    string `json:"id" url:"id"`
	Name  string `json:"name" url:"name"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseEnvironment) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseEnvironment) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseEnvironment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseEnvironment(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseEnvironment) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReleaseReleaseTag struct {
	// The name of the Release Tag
	Name string `json:"name" url:"name"`
	// The source of how the Release Tag was originally created
	//
	// * `SYSTEM` - System
	// * `USER` - User
	Source ReleaseTagSource `json:"source" url:"source"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseReleaseTag) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseReleaseTag) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseReleaseTag
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseReleaseTag(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseReleaseTag) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReleaseReviewReviewer struct {
	Id       string  `json:"id" url:"id"`
	FullName *string `json:"full_name,omitempty" url:"full_name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseReviewReviewer) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseReviewReviewer) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseReviewReviewer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseReviewReviewer(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseReviewReviewer) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// * `APPROVED` - Approved
// * `CHANGES_REQUESTED` - Changes Requested
// * `COMMENTED` - Commented
type ReleaseReviewState string

const (
	ReleaseReviewStateApproved         ReleaseReviewState = "APPROVED"
	ReleaseReviewStateChangesRequested ReleaseReviewState = "CHANGES_REQUESTED"
	ReleaseReviewStateCommented        ReleaseReviewState = "COMMENTED"
)

func NewReleaseReviewStateFromString(s string) (ReleaseReviewState, error) {
	switch s {
	case "APPROVED":
		return ReleaseReviewStateApproved, nil
	case "CHANGES_REQUESTED":
		return ReleaseReviewStateChangesRequested, nil
	case "COMMENTED":
		return ReleaseReviewStateCommented, nil
	}
	var t ReleaseReviewState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReleaseReviewState) Ptr() *ReleaseReviewState {
	return &r
}

type SlimReleaseReview struct {
	Id       string                 `json:"id" url:"id"`
	Created  time.Time              `json:"created" url:"created"`
	Reviewer *ReleaseReviewReviewer `json:"reviewer" url:"reviewer"`
	State    ReleaseReviewState     `json:"state" url:"state"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimReleaseReview) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimReleaseReview) UnmarshalJSON(data []byte) error {
	type embed SlimReleaseReview
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimReleaseReview(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimReleaseReview) MarshalJSON() ([]byte, error) {
	type embed SlimReleaseReview
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*s),
		Created: core.NewDateTime(s.Created),
	}
	return json.Marshal(marshaler)
}

func (s *SlimReleaseReview) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type WorkflowDeploymentRelease struct {
	Id              string                                    `json:"id" url:"id"`
	Created         time.Time                                 `json:"created" url:"created"`
	Environment     *ReleaseEnvironment                       `json:"environment" url:"environment"`
	CreatedBy       *ReleaseCreatedBy                         `json:"created_by,omitempty" url:"created_by,omitempty"`
	WorkflowVersion *WorkflowDeploymentReleaseWorkflowVersion `json:"workflow_version" url:"workflow_version"`
	Description     *string                                   `json:"description,omitempty" url:"description,omitempty"`
	ReleaseTags     []*ReleaseReleaseTag                      `json:"release_tags" url:"release_tags"`
	Reviews         []*SlimReleaseReview                      `json:"reviews" url:"reviews"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentRelease) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentRelease) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentRelease
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentRelease(unmarshaler.embed)
	w.Created = unmarshaler.Created.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentRelease) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentRelease
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*w),
		Created: core.NewDateTime(w.Created),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentRelease) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowDeploymentReleaseWorkflowVersion struct {
	Id              string            `json:"id" url:"id"`
	InputVariables  []*VellumVariable `json:"input_variables" url:"input_variables"`
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentReleaseWorkflowVersion) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentReleaseWorkflowVersion) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowDeploymentReleaseWorkflowVersion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowDeploymentReleaseWorkflowVersion(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentReleaseWorkflowVersion) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
