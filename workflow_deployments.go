// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type WorkflowDeploymentsListRequest struct {
	// Number of results to return per page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// The initial index from which to return the results.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Which field to use when ordering the results.
	Ordering *string `json:"-" url:"ordering,omitempty"`
	// status
	Status *WorkflowDeploymentsListRequestStatus `json:"-" url:"status,omitempty"`
}

type ListWorkflowDeploymentEventExecutionsRequest struct {
	Filters *string `json:"-" url:"filters,omitempty"`
	// Number of executions to return per page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// The initial index from which to return the executions.
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListWorkflowReleaseTagsRequest struct {
	// Number of results to return per page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// The initial index from which to return the results.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Which field to use when ordering the results.
	Ordering *string                               `json:"-" url:"ordering,omitempty"`
	Source   *ListWorkflowReleaseTagsRequestSource `json:"-" url:"source,omitempty"`
}

type ApiRequestParentContext struct {
	Parent *ParentContext `json:"parent,omitempty" url:"parent,omitempty"`
	Links  []*SpanLink    `json:"links,omitempty" url:"links,omitempty"`
	SpanId string         `json:"span_id" url:"span_id"`
	type_  string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiRequestParentContext) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiRequestParentContext) Type() string {
	return a.type_
}

func (a *ApiRequestParentContext) UnmarshalJSON(data []byte) error {
	type embed ApiRequestParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ApiRequestParentContext(unmarshaler.embed)
	if unmarshaler.Type != "API_REQUEST" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "API_REQUEST", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiRequestParentContext) MarshalJSON() ([]byte, error) {
	type embed ApiRequestParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "API_REQUEST",
	}
	return json.Marshal(marshaler)
}

func (a *ApiRequestParentContext) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// * `2024-10-25` - 2024-10-25
type ApiVersionEnum = string

type BaseOutput struct {
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`
	Delta map[string]interface{} `json:"delta,omitempty" url:"delta,omitempty"`
	Name  string                 `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BaseOutput) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseOutput) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The definition of a resource defined in code.
type CodeResourceDefinition struct {
	// The name of the resource, typically a class name.
	Name string `json:"name" url:"name"`
	// The module that this resource is defined in.
	Module []string `json:"module" url:"module"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeResourceDefinition) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeResourceDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeResourceDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeResourceDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeResourceDefinition) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ExternalInputDescriptor struct {
	Types       []*CodeResourceDefinition `json:"types" url:"types"`
	InputsClass *CodeResourceDefinition   `json:"inputs_class,omitempty" url:"inputs_class,omitempty"`
	Instance    interface{}               `json:"instance,omitempty" url:"instance,omitempty"`
	Name        string                    `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalInputDescriptor) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalInputDescriptor) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalInputDescriptor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalInputDescriptor(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalInputDescriptor) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type InvokedPort struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InvokedPort) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvokedPort) UnmarshalJSON(data []byte) error {
	type unmarshaler InvokedPort
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvokedPort(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvokedPort) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type MlModelUsageWrapper struct {
	MlModelUsage *MlModelUsage `json:"ml_model_usage" url:"ml_model_usage"`
	MlModelName  string        `json:"ml_model_name" url:"ml_model_name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelUsageWrapper) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelUsageWrapper) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelUsageWrapper
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelUsageWrapper(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelUsageWrapper) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type NodeEventDisplayContext struct {
	InputDisplay       map[string]string            `json:"input_display" url:"input_display"`
	OutputDisplay      map[string]string            `json:"output_display" url:"output_display"`
	PortDisplay        map[string]string            `json:"port_display" url:"port_display"`
	SubworkflowDisplay *WorkflowEventDisplayContext `json:"subworkflow_display,omitempty" url:"subworkflow_display,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeEventDisplayContext) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeEventDisplayContext) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeEventDisplayContext
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeEventDisplayContext(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeEventDisplayContext) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionFulfilledBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	InvokedPorts   []*InvokedPort                `json:"invoked_ports,omitempty" url:"invoked_ports,omitempty"`
	Outputs        map[string]interface{}        `json:"outputs" url:"outputs"`
	Mocked         *bool                         `json:"mocked,omitempty" url:"mocked,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionFulfilledBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionFulfilledBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionFulfilledBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionFulfilledBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionFulfilledBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionFulfilledEvent struct {
	Parent     *ParentContext              `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                 `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionFulfilledBody `json:"body" url:"body"`
	Id         string                      `json:"id" url:"id"`
	Timestamp  time.Time                   `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum             `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                      `json:"trace_id" url:"trace_id"`
	SpanId     string                      `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionFulfilledEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionFulfilledEvent) Name() string {
	return n.name
}

func (n *NodeExecutionFulfilledEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionFulfilledEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionFulfilledEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.fulfilled" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.fulfilled", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionFulfilledEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionFulfilledEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.fulfilled",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionFulfilledEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionInitiatedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	Inputs         map[string]interface{}        `json:"inputs" url:"inputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionInitiatedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionInitiatedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionInitiatedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionInitiatedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionInitiatedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionInitiatedEvent struct {
	Parent     *ParentContext              `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                 `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionInitiatedBody `json:"body" url:"body"`
	Id         string                      `json:"id" url:"id"`
	Timestamp  time.Time                   `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum             `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                      `json:"trace_id" url:"trace_id"`
	SpanId     string                      `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionInitiatedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionInitiatedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionInitiatedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionInitiatedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionInitiatedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.initiated" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.initiated", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionInitiatedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionInitiatedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.initiated",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionInitiatedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionPausedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionPausedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionPausedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionPausedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionPausedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionPausedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionPausedEvent struct {
	Parent     *ParentContext           `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink              `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionPausedBody `json:"body" url:"body"`
	Id         string                   `json:"id" url:"id"`
	Timestamp  time.Time                `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum          `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                   `json:"trace_id" url:"trace_id"`
	SpanId     string                   `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionPausedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionPausedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionPausedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionPausedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionPausedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.paused" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.paused", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionPausedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionPausedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.paused",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionPausedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionRejectedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	Error          *VellumSdkError               `json:"error" url:"error"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionRejectedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionRejectedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionRejectedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionRejectedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionRejectedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionRejectedEvent struct {
	Parent     *ParentContext             `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionRejectedBody `json:"body" url:"body"`
	Id         string                     `json:"id" url:"id"`
	Timestamp  time.Time                  `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum            `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                     `json:"trace_id" url:"trace_id"`
	SpanId     string                     `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionRejectedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionRejectedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionRejectedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionRejectedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionRejectedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.rejected" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.rejected", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionRejectedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionRejectedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.rejected",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionRejectedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionResumedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionResumedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionResumedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionResumedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionResumedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionResumedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionResumedEvent struct {
	Parent     *ParentContext            `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink               `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionResumedBody `json:"body" url:"body"`
	Id         string                    `json:"id" url:"id"`
	Timestamp  time.Time                 `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum           `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                    `json:"trace_id" url:"trace_id"`
	SpanId     string                    `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionResumedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionResumedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionResumedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionResumedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionResumedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.resumed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.resumed", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionResumedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionResumedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.resumed",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionResumedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionSpan struct {
	Events       []*VellumNodeExecutionEvent  `json:"events" url:"events"`
	Attributes   *NodeExecutionSpanAttributes `json:"attributes" url:"attributes"`
	SpanId       string                       `json:"span_id" url:"span_id"`
	StartTs      time.Time                    `json:"start_ts" url:"start_ts"`
	EndTs        time.Time                    `json:"end_ts" url:"end_ts"`
	ParentSpanId *string                      `json:"parent_span_id,omitempty" url:"parent_span_id,omitempty"`
	name         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionSpan) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionSpan) Name() string {
	return n.name
}

func (n *NodeExecutionSpan) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionSpan
	var unmarshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionSpan(unmarshaler.embed)
	n.StartTs = unmarshaler.StartTs.Time()
	n.EndTs = unmarshaler.EndTs.Time()
	if unmarshaler.Name != "node.execution" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionSpan) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionSpan
	var marshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed:   embed(*n),
		StartTs: core.NewDateTime(n.StartTs),
		EndTs:   core.NewDateTime(n.EndTs),
		Name:    "node.execution",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionSpan) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionSpanAttributes struct {
	NodeId string `json:"node_id" url:"node_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionSpanAttributes) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionSpanAttributes) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionSpanAttributes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionSpanAttributes(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionSpanAttributes) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionStreamingBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	Output         *BaseOutput                   `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionStreamingBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionStreamingBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionStreamingBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionStreamingBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionStreamingBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionStreamingEvent struct {
	Parent     *ParentContext              `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                 `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionStreamingBody `json:"body" url:"body"`
	Id         string                      `json:"id" url:"id"`
	Timestamp  time.Time                   `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum             `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                      `json:"trace_id" url:"trace_id"`
	SpanId     string                      `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionStreamingEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionStreamingEvent) Name() string {
	return n.name
}

func (n *NodeExecutionStreamingEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionStreamingEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionStreamingEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.streaming" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.streaming", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionStreamingEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionStreamingEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.streaming",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionStreamingEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeParentContext struct {
	Parent         *ParentContext                `json:"parent,omitempty" url:"parent,omitempty"`
	Links          []*SpanLink                   `json:"links,omitempty" url:"links,omitempty"`
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	SpanId         string                        `json:"span_id" url:"span_id"`
	type_          string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeParentContext) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeParentContext) Type() string {
	return n.type_
}

func (n *NodeParentContext) UnmarshalJSON(data []byte) error {
	type embed NodeParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_NODE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "WORKFLOW_NODE", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeParentContext) MarshalJSON() ([]byte, error) {
	type embed NodeParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "WORKFLOW_NODE",
	}
	return json.Marshal(marshaler)
}

func (n *NodeParentContext) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type PaginatedSlimWorkflowDeploymentList struct {
	Count    *int                      `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimWorkflowDeployment `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimWorkflowDeploymentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimWorkflowDeploymentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimWorkflowDeploymentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimWorkflowDeploymentList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimWorkflowDeploymentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedWorkflowReleaseTagReadList struct {
	Count    *int                      `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*WorkflowReleaseTagRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedWorkflowReleaseTagReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedWorkflowReleaseTagReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedWorkflowReleaseTagReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedWorkflowReleaseTagReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedWorkflowReleaseTagReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ParentContext struct {
	WorkflowParentContext           *WorkflowParentContext
	NodeParentContext               *NodeParentContext
	WorkflowDeploymentParentContext *WorkflowDeploymentParentContext
	WorkflowSandboxParentContext    *WorkflowSandboxParentContext
	PromptDeploymentParentContext   *PromptDeploymentParentContext
	ApiRequestParentContext         *ApiRequestParentContext
}

func (p *ParentContext) UnmarshalJSON(data []byte) error {
	valueWorkflowParentContext := new(WorkflowParentContext)
	if err := json.Unmarshal(data, &valueWorkflowParentContext); err == nil {
		p.WorkflowParentContext = valueWorkflowParentContext
		return nil
	}
	valueNodeParentContext := new(NodeParentContext)
	if err := json.Unmarshal(data, &valueNodeParentContext); err == nil {
		p.NodeParentContext = valueNodeParentContext
		return nil
	}
	valueWorkflowDeploymentParentContext := new(WorkflowDeploymentParentContext)
	if err := json.Unmarshal(data, &valueWorkflowDeploymentParentContext); err == nil {
		p.WorkflowDeploymentParentContext = valueWorkflowDeploymentParentContext
		return nil
	}
	valueWorkflowSandboxParentContext := new(WorkflowSandboxParentContext)
	if err := json.Unmarshal(data, &valueWorkflowSandboxParentContext); err == nil {
		p.WorkflowSandboxParentContext = valueWorkflowSandboxParentContext
		return nil
	}
	valuePromptDeploymentParentContext := new(PromptDeploymentParentContext)
	if err := json.Unmarshal(data, &valuePromptDeploymentParentContext); err == nil {
		p.PromptDeploymentParentContext = valuePromptDeploymentParentContext
		return nil
	}
	valueApiRequestParentContext := new(ApiRequestParentContext)
	if err := json.Unmarshal(data, &valueApiRequestParentContext); err == nil {
		p.ApiRequestParentContext = valueApiRequestParentContext
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p ParentContext) MarshalJSON() ([]byte, error) {
	if p.WorkflowParentContext != nil {
		return json.Marshal(p.WorkflowParentContext)
	}
	if p.NodeParentContext != nil {
		return json.Marshal(p.NodeParentContext)
	}
	if p.WorkflowDeploymentParentContext != nil {
		return json.Marshal(p.WorkflowDeploymentParentContext)
	}
	if p.WorkflowSandboxParentContext != nil {
		return json.Marshal(p.WorkflowSandboxParentContext)
	}
	if p.PromptDeploymentParentContext != nil {
		return json.Marshal(p.PromptDeploymentParentContext)
	}
	if p.ApiRequestParentContext != nil {
		return json.Marshal(p.ApiRequestParentContext)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type ParentContextVisitor interface {
	VisitWorkflowParentContext(*WorkflowParentContext) error
	VisitNodeParentContext(*NodeParentContext) error
	VisitWorkflowDeploymentParentContext(*WorkflowDeploymentParentContext) error
	VisitWorkflowSandboxParentContext(*WorkflowSandboxParentContext) error
	VisitPromptDeploymentParentContext(*PromptDeploymentParentContext) error
	VisitApiRequestParentContext(*ApiRequestParentContext) error
}

func (p *ParentContext) Accept(visitor ParentContextVisitor) error {
	if p.WorkflowParentContext != nil {
		return visitor.VisitWorkflowParentContext(p.WorkflowParentContext)
	}
	if p.NodeParentContext != nil {
		return visitor.VisitNodeParentContext(p.NodeParentContext)
	}
	if p.WorkflowDeploymentParentContext != nil {
		return visitor.VisitWorkflowDeploymentParentContext(p.WorkflowDeploymentParentContext)
	}
	if p.WorkflowSandboxParentContext != nil {
		return visitor.VisitWorkflowSandboxParentContext(p.WorkflowSandboxParentContext)
	}
	if p.PromptDeploymentParentContext != nil {
		return visitor.VisitPromptDeploymentParentContext(p.PromptDeploymentParentContext)
	}
	if p.ApiRequestParentContext != nil {
		return visitor.VisitApiRequestParentContext(p.ApiRequestParentContext)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptDeploymentParentContext struct {
	Parent                  *ParentContext         `json:"parent,omitempty" url:"parent,omitempty"`
	Links                   []*SpanLink            `json:"links,omitempty" url:"links,omitempty"`
	SpanId                  string                 `json:"span_id" url:"span_id"`
	DeploymentId            string                 `json:"deployment_id" url:"deployment_id"`
	DeploymentName          string                 `json:"deployment_name" url:"deployment_name"`
	DeploymentHistoryItemId string                 `json:"deployment_history_item_id" url:"deployment_history_item_id"`
	ReleaseTagId            string                 `json:"release_tag_id" url:"release_tag_id"`
	ReleaseTagName          string                 `json:"release_tag_name" url:"release_tag_name"`
	ExternalId              *string                `json:"external_id,omitempty" url:"external_id,omitempty"`
	Metadata                map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	PromptVersionId         string                 `json:"prompt_version_id" url:"prompt_version_id"`
	type_                   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptDeploymentParentContext) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptDeploymentParentContext) Type() string {
	return p.type_
}

func (p *PromptDeploymentParentContext) UnmarshalJSON(data []byte) error {
	type embed PromptDeploymentParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PromptDeploymentParentContext(unmarshaler.embed)
	if unmarshaler.Type != "PROMPT_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PROMPT_RELEASE_TAG", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptDeploymentParentContext) MarshalJSON() ([]byte, error) {
	type embed PromptDeploymentParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "PROMPT_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (p *PromptDeploymentParentContext) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Release struct {
	Id        string    `json:"id" url:"id"`
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *Release) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Release) UnmarshalJSON(data []byte) error {
	type embed Release
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = Release(unmarshaler.embed)
	r.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *Release) MarshalJSON() ([]byte, error) {
	type embed Release
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*r),
		Timestamp: core.NewDateTime(r.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (r *Release) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SlimWorkflowDeployment struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// * `ACTIVE` - Active
	// * `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this workflow deployment is used in
	//
	// * `DEVELOPMENT` - Development
	// * `STAGING` - Staging
	// * `PRODUCTION` - Production
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// The output variables this Workflow Deployment will produce when it is executed.
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`
	// A human-readable description of the workflow deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimWorkflowDeployment) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimWorkflowDeployment) UnmarshalJSON(data []byte) error {
	type embed SlimWorkflowDeployment
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimWorkflowDeployment(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimWorkflowDeployment) MarshalJSON() ([]byte, error) {
	type embed SlimWorkflowDeployment
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*s),
		Created:        core.NewDateTime(s.Created),
		LastDeployedOn: core.NewDateTime(s.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (s *SlimWorkflowDeployment) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimWorkflowExecutionRead struct {
	SpanId        string                                            `json:"span_id" url:"span_id"`
	ParentContext *WorkflowDeploymentParentContext                  `json:"parent_context,omitempty" url:"parent_context,omitempty"`
	Start         time.Time                                         `json:"start" url:"start"`
	End           *time.Time                                        `json:"end,omitempty" url:"end,omitempty"`
	Inputs        []*ExecutionVellumValue                           `json:"inputs" url:"inputs"`
	Outputs       []*ExecutionVellumValue                           `json:"outputs" url:"outputs"`
	Error         *WorkflowError                                    `json:"error,omitempty" url:"error,omitempty"`
	LatestActual  *WorkflowExecutionActual                          `json:"latest_actual,omitempty" url:"latest_actual,omitempty"`
	MetricResults []*WorkflowExecutionViewOnlineEvalMetricResult    `json:"metric_results" url:"metric_results"`
	UsageResults  []*WorkflowExecutionUsageCalculationFulfilledBody `json:"usage_results" url:"usage_results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimWorkflowExecutionRead) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimWorkflowExecutionRead) UnmarshalJSON(data []byte) error {
	type embed SlimWorkflowExecutionRead
	var unmarshaler = struct {
		embed
		Start *core.DateTime `json:"start"`
		End   *core.DateTime `json:"end,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimWorkflowExecutionRead(unmarshaler.embed)
	s.Start = unmarshaler.Start.Time()
	s.End = unmarshaler.End.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimWorkflowExecutionRead) MarshalJSON() ([]byte, error) {
	type embed SlimWorkflowExecutionRead
	var marshaler = struct {
		embed
		Start *core.DateTime `json:"start"`
		End   *core.DateTime `json:"end,omitempty"`
	}{
		embed: embed(*s),
		Start: core.NewDateTime(s.Start),
		End:   core.NewOptionalDateTime(s.End),
	}
	return json.Marshal(marshaler)
}

func (s *SlimWorkflowExecutionRead) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SpanLink struct {
	TraceId     string           `json:"trace_id" url:"trace_id"`
	Type        SpanLinkTypeEnum `json:"type" url:"type"`
	SpanContext *ParentContext   `json:"span_context" url:"span_context"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SpanLink) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SpanLink) UnmarshalJSON(data []byte) error {
	type unmarshaler SpanLink
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SpanLink(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SpanLink) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// * `TRIGGERED_BY` - TRIGGERED_BY
type SpanLinkTypeEnum = string

type VellumCodeResourceDefinition struct {
	Name string `json:"name" url:"name"`
	// The module that this resource is defined in.
	Module []string `json:"module" url:"module"`
	Id     string   `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumCodeResourceDefinition) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumCodeResourceDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumCodeResourceDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumCodeResourceDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumCodeResourceDefinition) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumNodeExecutionEvent struct {
	NodeExecutionInitiatedEvent *NodeExecutionInitiatedEvent
	NodeExecutionStreamingEvent *NodeExecutionStreamingEvent
	NodeExecutionFulfilledEvent *NodeExecutionFulfilledEvent
	NodeExecutionRejectedEvent  *NodeExecutionRejectedEvent
	NodeExecutionPausedEvent    *NodeExecutionPausedEvent
	NodeExecutionResumedEvent   *NodeExecutionResumedEvent
}

func (v *VellumNodeExecutionEvent) UnmarshalJSON(data []byte) error {
	valueNodeExecutionInitiatedEvent := new(NodeExecutionInitiatedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionInitiatedEvent); err == nil {
		v.NodeExecutionInitiatedEvent = valueNodeExecutionInitiatedEvent
		return nil
	}
	valueNodeExecutionStreamingEvent := new(NodeExecutionStreamingEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionStreamingEvent); err == nil {
		v.NodeExecutionStreamingEvent = valueNodeExecutionStreamingEvent
		return nil
	}
	valueNodeExecutionFulfilledEvent := new(NodeExecutionFulfilledEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionFulfilledEvent); err == nil {
		v.NodeExecutionFulfilledEvent = valueNodeExecutionFulfilledEvent
		return nil
	}
	valueNodeExecutionRejectedEvent := new(NodeExecutionRejectedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionRejectedEvent); err == nil {
		v.NodeExecutionRejectedEvent = valueNodeExecutionRejectedEvent
		return nil
	}
	valueNodeExecutionPausedEvent := new(NodeExecutionPausedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionPausedEvent); err == nil {
		v.NodeExecutionPausedEvent = valueNodeExecutionPausedEvent
		return nil
	}
	valueNodeExecutionResumedEvent := new(NodeExecutionResumedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionResumedEvent); err == nil {
		v.NodeExecutionResumedEvent = valueNodeExecutionResumedEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumNodeExecutionEvent) MarshalJSON() ([]byte, error) {
	if v.NodeExecutionInitiatedEvent != nil {
		return json.Marshal(v.NodeExecutionInitiatedEvent)
	}
	if v.NodeExecutionStreamingEvent != nil {
		return json.Marshal(v.NodeExecutionStreamingEvent)
	}
	if v.NodeExecutionFulfilledEvent != nil {
		return json.Marshal(v.NodeExecutionFulfilledEvent)
	}
	if v.NodeExecutionRejectedEvent != nil {
		return json.Marshal(v.NodeExecutionRejectedEvent)
	}
	if v.NodeExecutionPausedEvent != nil {
		return json.Marshal(v.NodeExecutionPausedEvent)
	}
	if v.NodeExecutionResumedEvent != nil {
		return json.Marshal(v.NodeExecutionResumedEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumNodeExecutionEventVisitor interface {
	VisitNodeExecutionInitiatedEvent(*NodeExecutionInitiatedEvent) error
	VisitNodeExecutionStreamingEvent(*NodeExecutionStreamingEvent) error
	VisitNodeExecutionFulfilledEvent(*NodeExecutionFulfilledEvent) error
	VisitNodeExecutionRejectedEvent(*NodeExecutionRejectedEvent) error
	VisitNodeExecutionPausedEvent(*NodeExecutionPausedEvent) error
	VisitNodeExecutionResumedEvent(*NodeExecutionResumedEvent) error
}

func (v *VellumNodeExecutionEvent) Accept(visitor VellumNodeExecutionEventVisitor) error {
	if v.NodeExecutionInitiatedEvent != nil {
		return visitor.VisitNodeExecutionInitiatedEvent(v.NodeExecutionInitiatedEvent)
	}
	if v.NodeExecutionStreamingEvent != nil {
		return visitor.VisitNodeExecutionStreamingEvent(v.NodeExecutionStreamingEvent)
	}
	if v.NodeExecutionFulfilledEvent != nil {
		return visitor.VisitNodeExecutionFulfilledEvent(v.NodeExecutionFulfilledEvent)
	}
	if v.NodeExecutionRejectedEvent != nil {
		return visitor.VisitNodeExecutionRejectedEvent(v.NodeExecutionRejectedEvent)
	}
	if v.NodeExecutionPausedEvent != nil {
		return visitor.VisitNodeExecutionPausedEvent(v.NodeExecutionPausedEvent)
	}
	if v.NodeExecutionResumedEvent != nil {
		return visitor.VisitNodeExecutionResumedEvent(v.NodeExecutionResumedEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumSdkError struct {
	Message string                 `json:"message" url:"message"`
	Code    VellumSdkErrorCodeEnum `json:"code" url:"code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumSdkError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumSdkError) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumSdkError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumSdkError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumSdkError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// * `INVALID_WORKFLOW` - INVALID_WORKFLOW
// * `INVALID_INPUTS` - INVALID_INPUTS
// * `INVALID_OUTPUTS` - INVALID_OUTPUTS
// * `INVALID_STATE` - INVALID_STATE
// * `INVALID_CODE` - INVALID_CODE
// * `INVALID_TEMPLATE` - INVALID_TEMPLATE
// * `INTERNAL_ERROR` - INTERNAL_ERROR
// * `PROVIDER_ERROR` - PROVIDER_ERROR
// * `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
// * `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED
// * `NODE_EXECUTION` - NODE_EXECUTION
type VellumSdkErrorCodeEnum string

const (
	VellumSdkErrorCodeEnumInvalidWorkflow   VellumSdkErrorCodeEnum = "INVALID_WORKFLOW"
	VellumSdkErrorCodeEnumInvalidInputs     VellumSdkErrorCodeEnum = "INVALID_INPUTS"
	VellumSdkErrorCodeEnumInvalidOutputs    VellumSdkErrorCodeEnum = "INVALID_OUTPUTS"
	VellumSdkErrorCodeEnumInvalidState      VellumSdkErrorCodeEnum = "INVALID_STATE"
	VellumSdkErrorCodeEnumInvalidCode       VellumSdkErrorCodeEnum = "INVALID_CODE"
	VellumSdkErrorCodeEnumInvalidTemplate   VellumSdkErrorCodeEnum = "INVALID_TEMPLATE"
	VellumSdkErrorCodeEnumInternalError     VellumSdkErrorCodeEnum = "INTERNAL_ERROR"
	VellumSdkErrorCodeEnumProviderError     VellumSdkErrorCodeEnum = "PROVIDER_ERROR"
	VellumSdkErrorCodeEnumUserDefinedError  VellumSdkErrorCodeEnum = "USER_DEFINED_ERROR"
	VellumSdkErrorCodeEnumWorkflowCancelled VellumSdkErrorCodeEnum = "WORKFLOW_CANCELLED"
	VellumSdkErrorCodeEnumNodeExecution     VellumSdkErrorCodeEnum = "NODE_EXECUTION"
)

func NewVellumSdkErrorCodeEnumFromString(s string) (VellumSdkErrorCodeEnum, error) {
	switch s {
	case "INVALID_WORKFLOW":
		return VellumSdkErrorCodeEnumInvalidWorkflow, nil
	case "INVALID_INPUTS":
		return VellumSdkErrorCodeEnumInvalidInputs, nil
	case "INVALID_OUTPUTS":
		return VellumSdkErrorCodeEnumInvalidOutputs, nil
	case "INVALID_STATE":
		return VellumSdkErrorCodeEnumInvalidState, nil
	case "INVALID_CODE":
		return VellumSdkErrorCodeEnumInvalidCode, nil
	case "INVALID_TEMPLATE":
		return VellumSdkErrorCodeEnumInvalidTemplate, nil
	case "INTERNAL_ERROR":
		return VellumSdkErrorCodeEnumInternalError, nil
	case "PROVIDER_ERROR":
		return VellumSdkErrorCodeEnumProviderError, nil
	case "USER_DEFINED_ERROR":
		return VellumSdkErrorCodeEnumUserDefinedError, nil
	case "WORKFLOW_CANCELLED":
		return VellumSdkErrorCodeEnumWorkflowCancelled, nil
	case "NODE_EXECUTION":
		return VellumSdkErrorCodeEnumNodeExecution, nil
	}
	var t VellumSdkErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumSdkErrorCodeEnum) Ptr() *VellumSdkErrorCodeEnum {
	return &v
}

type VellumSpan struct {
	WorkflowExecutionSpan *WorkflowExecutionSpan
	NodeExecutionSpan     *NodeExecutionSpan
}

func (v *VellumSpan) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionSpan := new(WorkflowExecutionSpan)
	if err := json.Unmarshal(data, &valueWorkflowExecutionSpan); err == nil {
		v.WorkflowExecutionSpan = valueWorkflowExecutionSpan
		return nil
	}
	valueNodeExecutionSpan := new(NodeExecutionSpan)
	if err := json.Unmarshal(data, &valueNodeExecutionSpan); err == nil {
		v.NodeExecutionSpan = valueNodeExecutionSpan
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumSpan) MarshalJSON() ([]byte, error) {
	if v.WorkflowExecutionSpan != nil {
		return json.Marshal(v.WorkflowExecutionSpan)
	}
	if v.NodeExecutionSpan != nil {
		return json.Marshal(v.NodeExecutionSpan)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumSpanVisitor interface {
	VisitWorkflowExecutionSpan(*WorkflowExecutionSpan) error
	VisitNodeExecutionSpan(*NodeExecutionSpan) error
}

func (v *VellumSpan) Accept(visitor VellumSpanVisitor) error {
	if v.WorkflowExecutionSpan != nil {
		return visitor.VisitWorkflowExecutionSpan(v.WorkflowExecutionSpan)
	}
	if v.NodeExecutionSpan != nil {
		return visitor.VisitNodeExecutionSpan(v.NodeExecutionSpan)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumWorkflowExecutionEvent struct {
	WorkflowExecutionInitiatedEvent   *WorkflowExecutionInitiatedEvent
	WorkflowExecutionStreamingEvent   *WorkflowExecutionStreamingEvent
	WorkflowExecutionFulfilledEvent   *WorkflowExecutionFulfilledEvent
	WorkflowExecutionRejectedEvent    *WorkflowExecutionRejectedEvent
	WorkflowExecutionPausedEvent      *WorkflowExecutionPausedEvent
	WorkflowExecutionResumedEvent     *WorkflowExecutionResumedEvent
	WorkflowExecutionSnapshottedEvent *WorkflowExecutionSnapshottedEvent
}

func (v *VellumWorkflowExecutionEvent) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionInitiatedEvent := new(WorkflowExecutionInitiatedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionInitiatedEvent); err == nil {
		v.WorkflowExecutionInitiatedEvent = valueWorkflowExecutionInitiatedEvent
		return nil
	}
	valueWorkflowExecutionStreamingEvent := new(WorkflowExecutionStreamingEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionStreamingEvent); err == nil {
		v.WorkflowExecutionStreamingEvent = valueWorkflowExecutionStreamingEvent
		return nil
	}
	valueWorkflowExecutionFulfilledEvent := new(WorkflowExecutionFulfilledEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionFulfilledEvent); err == nil {
		v.WorkflowExecutionFulfilledEvent = valueWorkflowExecutionFulfilledEvent
		return nil
	}
	valueWorkflowExecutionRejectedEvent := new(WorkflowExecutionRejectedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionRejectedEvent); err == nil {
		v.WorkflowExecutionRejectedEvent = valueWorkflowExecutionRejectedEvent
		return nil
	}
	valueWorkflowExecutionPausedEvent := new(WorkflowExecutionPausedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionPausedEvent); err == nil {
		v.WorkflowExecutionPausedEvent = valueWorkflowExecutionPausedEvent
		return nil
	}
	valueWorkflowExecutionResumedEvent := new(WorkflowExecutionResumedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionResumedEvent); err == nil {
		v.WorkflowExecutionResumedEvent = valueWorkflowExecutionResumedEvent
		return nil
	}
	valueWorkflowExecutionSnapshottedEvent := new(WorkflowExecutionSnapshottedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionSnapshottedEvent); err == nil {
		v.WorkflowExecutionSnapshottedEvent = valueWorkflowExecutionSnapshottedEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumWorkflowExecutionEvent) MarshalJSON() ([]byte, error) {
	if v.WorkflowExecutionInitiatedEvent != nil {
		return json.Marshal(v.WorkflowExecutionInitiatedEvent)
	}
	if v.WorkflowExecutionStreamingEvent != nil {
		return json.Marshal(v.WorkflowExecutionStreamingEvent)
	}
	if v.WorkflowExecutionFulfilledEvent != nil {
		return json.Marshal(v.WorkflowExecutionFulfilledEvent)
	}
	if v.WorkflowExecutionRejectedEvent != nil {
		return json.Marshal(v.WorkflowExecutionRejectedEvent)
	}
	if v.WorkflowExecutionPausedEvent != nil {
		return json.Marshal(v.WorkflowExecutionPausedEvent)
	}
	if v.WorkflowExecutionResumedEvent != nil {
		return json.Marshal(v.WorkflowExecutionResumedEvent)
	}
	if v.WorkflowExecutionSnapshottedEvent != nil {
		return json.Marshal(v.WorkflowExecutionSnapshottedEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumWorkflowExecutionEventVisitor interface {
	VisitWorkflowExecutionInitiatedEvent(*WorkflowExecutionInitiatedEvent) error
	VisitWorkflowExecutionStreamingEvent(*WorkflowExecutionStreamingEvent) error
	VisitWorkflowExecutionFulfilledEvent(*WorkflowExecutionFulfilledEvent) error
	VisitWorkflowExecutionRejectedEvent(*WorkflowExecutionRejectedEvent) error
	VisitWorkflowExecutionPausedEvent(*WorkflowExecutionPausedEvent) error
	VisitWorkflowExecutionResumedEvent(*WorkflowExecutionResumedEvent) error
	VisitWorkflowExecutionSnapshottedEvent(*WorkflowExecutionSnapshottedEvent) error
}

func (v *VellumWorkflowExecutionEvent) Accept(visitor VellumWorkflowExecutionEventVisitor) error {
	if v.WorkflowExecutionInitiatedEvent != nil {
		return visitor.VisitWorkflowExecutionInitiatedEvent(v.WorkflowExecutionInitiatedEvent)
	}
	if v.WorkflowExecutionStreamingEvent != nil {
		return visitor.VisitWorkflowExecutionStreamingEvent(v.WorkflowExecutionStreamingEvent)
	}
	if v.WorkflowExecutionFulfilledEvent != nil {
		return visitor.VisitWorkflowExecutionFulfilledEvent(v.WorkflowExecutionFulfilledEvent)
	}
	if v.WorkflowExecutionRejectedEvent != nil {
		return visitor.VisitWorkflowExecutionRejectedEvent(v.WorkflowExecutionRejectedEvent)
	}
	if v.WorkflowExecutionPausedEvent != nil {
		return visitor.VisitWorkflowExecutionPausedEvent(v.WorkflowExecutionPausedEvent)
	}
	if v.WorkflowExecutionResumedEvent != nil {
		return visitor.VisitWorkflowExecutionResumedEvent(v.WorkflowExecutionResumedEvent)
	}
	if v.WorkflowExecutionSnapshottedEvent != nil {
		return visitor.VisitWorkflowExecutionSnapshottedEvent(v.WorkflowExecutionSnapshottedEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type WorkflowDeploymentEventExecutionsResponse struct {
	Count   int                          `json:"count" url:"count"`
	Results []*SlimWorkflowExecutionRead `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentEventExecutionsResponse) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentEventExecutionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowDeploymentEventExecutionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowDeploymentEventExecutionsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentEventExecutionsResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowDeploymentHistoryItem struct {
	Id                   string    `json:"id" url:"id"`
	WorkflowDeploymentId string    `json:"workflow_deployment_id" url:"workflow_deployment_id"`
	Timestamp            time.Time `json:"timestamp" url:"timestamp"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name            string            `json:"name" url:"name"`
	InputVariables  []*VellumVariable `json:"input_variables" url:"input_variables"`
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`
	// A human-readable description of the workflow deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentHistoryItem) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentHistoryItem) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentHistoryItem
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentHistoryItem(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentHistoryItem) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentHistoryItem
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentHistoryItem) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowDeploymentParentContext struct {
	Parent                  *ParentContext         `json:"parent,omitempty" url:"parent,omitempty"`
	Links                   []*SpanLink            `json:"links,omitempty" url:"links,omitempty"`
	SpanId                  string                 `json:"span_id" url:"span_id"`
	DeploymentId            string                 `json:"deployment_id" url:"deployment_id"`
	DeploymentName          string                 `json:"deployment_name" url:"deployment_name"`
	DeploymentHistoryItemId string                 `json:"deployment_history_item_id" url:"deployment_history_item_id"`
	ReleaseTagId            string                 `json:"release_tag_id" url:"release_tag_id"`
	ReleaseTagName          string                 `json:"release_tag_name" url:"release_tag_name"`
	ExternalId              *string                `json:"external_id,omitempty" url:"external_id,omitempty"`
	Metadata                map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	WorkflowVersionId       string                 `json:"workflow_version_id" url:"workflow_version_id"`
	type_                   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentParentContext) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentParentContext) Type() string {
	return w.type_
}

func (w *WorkflowDeploymentParentContext) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW_RELEASE_TAG", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentParentContext) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentParentContext) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowError struct {
	WorkflowEventError          *WorkflowEventError
	WorkflowInitializationError *WorkflowInitializationError
}

func (w *WorkflowError) UnmarshalJSON(data []byte) error {
	valueWorkflowEventError := new(WorkflowEventError)
	if err := json.Unmarshal(data, &valueWorkflowEventError); err == nil {
		w.WorkflowEventError = valueWorkflowEventError
		return nil
	}
	valueWorkflowInitializationError := new(WorkflowInitializationError)
	if err := json.Unmarshal(data, &valueWorkflowInitializationError); err == nil {
		w.WorkflowInitializationError = valueWorkflowInitializationError
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowError) MarshalJSON() ([]byte, error) {
	if w.WorkflowEventError != nil {
		return json.Marshal(w.WorkflowEventError)
	}
	if w.WorkflowInitializationError != nil {
		return json.Marshal(w.WorkflowInitializationError)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowErrorVisitor interface {
	VisitWorkflowEventError(*WorkflowEventError) error
	VisitWorkflowInitializationError(*WorkflowInitializationError) error
}

func (w *WorkflowError) Accept(visitor WorkflowErrorVisitor) error {
	if w.WorkflowEventError != nil {
		return visitor.VisitWorkflowEventError(w.WorkflowEventError)
	}
	if w.WorkflowInitializationError != nil {
		return visitor.VisitWorkflowInitializationError(w.WorkflowInitializationError)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowEventDisplayContext struct {
	NodeDisplays    map[string]*NodeEventDisplayContext `json:"node_displays" url:"node_displays"`
	WorkflowInputs  map[string]string                   `json:"workflow_inputs" url:"workflow_inputs"`
	WorkflowOutputs map[string]string                   `json:"workflow_outputs" url:"workflow_outputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowEventDisplayContext) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowEventDisplayContext) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowEventDisplayContext
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowEventDisplayContext(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowEventDisplayContext) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowEventExecutionRead struct {
	SpanId        string                                            `json:"span_id" url:"span_id"`
	ParentContext *WorkflowDeploymentParentContext                  `json:"parent_context,omitempty" url:"parent_context,omitempty"`
	Start         time.Time                                         `json:"start" url:"start"`
	End           *time.Time                                        `json:"end,omitempty" url:"end,omitempty"`
	Inputs        []*ExecutionVellumValue                           `json:"inputs" url:"inputs"`
	Outputs       []*ExecutionVellumValue                           `json:"outputs" url:"outputs"`
	Error         *WorkflowError                                    `json:"error,omitempty" url:"error,omitempty"`
	LatestActual  *WorkflowExecutionActual                          `json:"latest_actual,omitempty" url:"latest_actual,omitempty"`
	MetricResults []*WorkflowExecutionViewOnlineEvalMetricResult    `json:"metric_results" url:"metric_results"`
	UsageResults  []*WorkflowExecutionUsageCalculationFulfilledBody `json:"usage_results" url:"usage_results"`
	Spans         []*VellumSpan                                     `json:"spans" url:"spans"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowEventExecutionRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowEventExecutionRead) UnmarshalJSON(data []byte) error {
	type embed WorkflowEventExecutionRead
	var unmarshaler = struct {
		embed
		Start *core.DateTime `json:"start"`
		End   *core.DateTime `json:"end,omitempty"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowEventExecutionRead(unmarshaler.embed)
	w.Start = unmarshaler.Start.Time()
	w.End = unmarshaler.End.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowEventExecutionRead) MarshalJSON() ([]byte, error) {
	type embed WorkflowEventExecutionRead
	var marshaler = struct {
		embed
		Start *core.DateTime `json:"start"`
		End   *core.DateTime `json:"end,omitempty"`
	}{
		embed: embed(*w),
		Start: core.NewDateTime(w.Start),
		End:   core.NewOptionalDateTime(w.End),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowEventExecutionRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActual struct {
	Output    *ExecutionVellumValue  `json:"output" url:"output"`
	Timestamp time.Time              `json:"timestamp" url:"timestamp"`
	Quality   float64                `json:"quality" url:"quality"`
	Metadata  map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActual) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActual) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionActual
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionActual(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActual) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionActual
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionActual) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionFulfilledBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	Outputs            map[string]interface{}        `json:"outputs" url:"outputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionFulfilledBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionFulfilledBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionFulfilledBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionFulfilledBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionFulfilledBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionFulfilledEvent struct {
	Parent     *ParentContext                  `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                     `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionFulfilledBody `json:"body" url:"body"`
	Id         string                          `json:"id" url:"id"`
	Timestamp  time.Time                       `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                 `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                          `json:"trace_id" url:"trace_id"`
	SpanId     string                          `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionFulfilledEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionFulfilledEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionFulfilledEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionFulfilledEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionFulfilledEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.fulfilled" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.fulfilled", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionFulfilledEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionFulfilledEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.fulfilled",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionFulfilledEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionInitiatedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	DisplayContext     *WorkflowEventDisplayContext  `json:"display_context,omitempty" url:"display_context,omitempty"`
	Inputs             map[string]interface{}        `json:"inputs" url:"inputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionInitiatedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionInitiatedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionInitiatedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionInitiatedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionInitiatedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionInitiatedEvent struct {
	Parent     *ParentContext                  `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                     `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionInitiatedBody `json:"body" url:"body"`
	Id         string                          `json:"id" url:"id"`
	Timestamp  time.Time                       `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                 `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                          `json:"trace_id" url:"trace_id"`
	SpanId     string                          `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionInitiatedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionInitiatedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionInitiatedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionInitiatedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionInitiatedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.initiated" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.initiated", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionInitiatedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionInitiatedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.initiated",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionInitiatedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionPausedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	ExternalInputs     []*ExternalInputDescriptor    `json:"external_inputs" url:"external_inputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionPausedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionPausedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionPausedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionPausedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionPausedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionPausedEvent struct {
	Parent     *ParentContext               `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                  `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionPausedBody `json:"body" url:"body"`
	Id         string                       `json:"id" url:"id"`
	Timestamp  time.Time                    `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum              `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                       `json:"trace_id" url:"trace_id"`
	SpanId     string                       `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionPausedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionPausedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionPausedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionPausedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionPausedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.paused" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.paused", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionPausedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionPausedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.paused",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionPausedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionRejectedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	Error              *VellumSdkError               `json:"error" url:"error"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionRejectedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionRejectedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionRejectedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionRejectedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionRejectedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionRejectedEvent struct {
	Parent     *ParentContext                 `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                    `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionRejectedBody `json:"body" url:"body"`
	Id         string                         `json:"id" url:"id"`
	Timestamp  time.Time                      `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                         `json:"trace_id" url:"trace_id"`
	SpanId     string                         `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionRejectedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionRejectedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionRejectedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionRejectedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionRejectedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.rejected" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.rejected", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionRejectedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionRejectedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.rejected",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionRejectedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionResumedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionResumedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionResumedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionResumedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionResumedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionResumedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionResumedEvent struct {
	Parent     *ParentContext                `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                   `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionResumedBody `json:"body" url:"body"`
	Id         string                        `json:"id" url:"id"`
	Timestamp  time.Time                     `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum               `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                        `json:"trace_id" url:"trace_id"`
	SpanId     string                        `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionResumedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionResumedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionResumedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionResumedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionResumedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.resumed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.resumed", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionResumedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionResumedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.resumed",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionResumedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSnapshottedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	State              map[string]interface{}        `json:"state" url:"state"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSnapshottedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSnapshottedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionSnapshottedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionSnapshottedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSnapshottedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSnapshottedEvent struct {
	Parent     *ParentContext                    `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                       `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionSnapshottedBody `json:"body" url:"body"`
	Id         string                            `json:"id" url:"id"`
	Timestamp  time.Time                         `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                   `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                            `json:"trace_id" url:"trace_id"`
	SpanId     string                            `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSnapshottedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSnapshottedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionSnapshottedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionSnapshottedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionSnapshottedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.snapshotted" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.snapshotted", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSnapshottedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionSnapshottedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.snapshotted",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionSnapshottedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSpan struct {
	Events       []*VellumWorkflowExecutionEvent  `json:"events" url:"events"`
	Attributes   *WorkflowExecutionSpanAttributes `json:"attributes" url:"attributes"`
	SpanId       string                           `json:"span_id" url:"span_id"`
	StartTs      time.Time                        `json:"start_ts" url:"start_ts"`
	EndTs        time.Time                        `json:"end_ts" url:"end_ts"`
	ParentSpanId *string                          `json:"parent_span_id,omitempty" url:"parent_span_id,omitempty"`
	name         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSpan) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSpan) Name() string {
	return w.name
}

func (w *WorkflowExecutionSpan) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionSpan
	var unmarshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionSpan(unmarshaler.embed)
	w.StartTs = unmarshaler.StartTs.Time()
	w.EndTs = unmarshaler.EndTs.Time()
	if unmarshaler.Name != "workflow.execution" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSpan) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionSpan
	var marshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed:   embed(*w),
		StartTs: core.NewDateTime(w.StartTs),
		EndTs:   core.NewDateTime(w.EndTs),
		Name:    "workflow.execution",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionSpan) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSpanAttributes struct {
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSpanAttributes) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSpanAttributes) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionSpanAttributes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionSpanAttributes(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSpanAttributes) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionStreamingBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	Output             *BaseOutput                   `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionStreamingBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionStreamingBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionStreamingBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionStreamingBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionStreamingBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionStreamingEvent struct {
	Parent     *ParentContext                  `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                     `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionStreamingBody `json:"body" url:"body"`
	Id         string                          `json:"id" url:"id"`
	Timestamp  time.Time                       `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                 `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                          `json:"trace_id" url:"trace_id"`
	SpanId     string                          `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionStreamingEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionStreamingEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionStreamingEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionStreamingEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionStreamingEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.streaming" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.streaming", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionStreamingEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionStreamingEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.streaming",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionStreamingEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionUsageCalculationFulfilledBody struct {
	Usage []*MlModelUsageWrapper `json:"usage" url:"usage"`
	Cost  []*Price               `json:"cost" url:"cost"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionUsageCalculationFulfilledBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionUsageCalculationFulfilledBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionUsageCalculationFulfilledBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionUsageCalculationFulfilledBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionUsageCalculationFulfilledBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionViewOnlineEvalMetricResult struct {
	Outputs  []*ExecutionVellumValue `json:"outputs" url:"outputs"`
	Label    string                  `json:"label" url:"label"`
	MetricId string                  `json:"metric_id" url:"metric_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionViewOnlineEvalMetricResult) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionViewOnlineEvalMetricResult) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionViewOnlineEvalMetricResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionViewOnlineEvalMetricResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionViewOnlineEvalMetricResult) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// Workflow initialization error.
type WorkflowInitializationError struct {
	Code    string `json:"code" url:"code"`
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowInitializationError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowInitializationError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowInitializationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowInitializationError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowInitializationError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowParentContext struct {
	Parent             *ParentContext                `json:"parent,omitempty" url:"parent,omitempty"`
	Links              []*SpanLink                   `json:"links,omitempty" url:"links,omitempty"`
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	SpanId             string                        `json:"span_id" url:"span_id"`
	type_              string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowParentContext) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowParentContext) Type() string {
	return w.type_
}

func (w *WorkflowParentContext) UnmarshalJSON(data []byte) error {
	type embed WorkflowParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowParentContext) MarshalJSON() ([]byte, error) {
	type embed WorkflowParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowParentContext) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowReleaseTagRead struct {
	// The name of the Release Tag
	Name string `json:"name" url:"name"`
	// The source of how the Release Tag was originally created
	//
	// * `SYSTEM` - System
	// * `USER` - User
	Source ReleaseTagSource `json:"source" url:"source"`
	// Deprecated. Reference the `release` field instead.
	HistoryItem *WorkflowReleaseTagWorkflowDeploymentHistoryItem `json:"history_item" url:"history_item"`
	// The Release that this Release Tag points to.
	Release *Release `json:"release" url:"release"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowReleaseTagRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowReleaseTagRead) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowReleaseTagRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowReleaseTagRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowReleaseTagRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowReleaseTagWorkflowDeploymentHistoryItem struct {
	// The ID of the Workflow Deployment History Item
	Id string `json:"id" url:"id"`
	// The timestamp representing when this History Item was created
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) UnmarshalJSON(data []byte) error {
	type embed WorkflowReleaseTagWorkflowDeploymentHistoryItem
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowReleaseTagWorkflowDeploymentHistoryItem(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) MarshalJSON() ([]byte, error) {
	type embed WorkflowReleaseTagWorkflowDeploymentHistoryItem
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowSandboxParentContext struct {
	Parent               *ParentContext `json:"parent,omitempty" url:"parent,omitempty"`
	Links                []*SpanLink    `json:"links,omitempty" url:"links,omitempty"`
	SpanId               string         `json:"span_id" url:"span_id"`
	SandboxId            string         `json:"sandbox_id" url:"sandbox_id"`
	SandboxHistoryItemId string         `json:"sandbox_history_item_id" url:"sandbox_history_item_id"`
	ScenarioId           string         `json:"scenario_id" url:"scenario_id"`
	type_                string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowSandboxParentContext) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowSandboxParentContext) Type() string {
	return w.type_
}

func (w *WorkflowSandboxParentContext) UnmarshalJSON(data []byte) error {
	type embed WorkflowSandboxParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowSandboxParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_SANDBOX" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW_SANDBOX", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowSandboxParentContext) MarshalJSON() ([]byte, error) {
	type embed WorkflowSandboxParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW_SANDBOX",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowSandboxParentContext) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type ListWorkflowReleaseTagsRequestSource string

const (
	ListWorkflowReleaseTagsRequestSourceSystem ListWorkflowReleaseTagsRequestSource = "SYSTEM"
	ListWorkflowReleaseTagsRequestSourceUser   ListWorkflowReleaseTagsRequestSource = "USER"
)

func NewListWorkflowReleaseTagsRequestSourceFromString(s string) (ListWorkflowReleaseTagsRequestSource, error) {
	switch s {
	case "SYSTEM":
		return ListWorkflowReleaseTagsRequestSourceSystem, nil
	case "USER":
		return ListWorkflowReleaseTagsRequestSourceUser, nil
	}
	var t ListWorkflowReleaseTagsRequestSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListWorkflowReleaseTagsRequestSource) Ptr() *ListWorkflowReleaseTagsRequestSource {
	return &l
}

type WorkflowDeploymentsListRequestStatus string

const (
	WorkflowDeploymentsListRequestStatusActive   WorkflowDeploymentsListRequestStatus = "ACTIVE"
	WorkflowDeploymentsListRequestStatusArchived WorkflowDeploymentsListRequestStatus = "ARCHIVED"
)

func NewWorkflowDeploymentsListRequestStatusFromString(s string) (WorkflowDeploymentsListRequestStatus, error) {
	switch s {
	case "ACTIVE":
		return WorkflowDeploymentsListRequestStatusActive, nil
	case "ARCHIVED":
		return WorkflowDeploymentsListRequestStatusArchived, nil
	}
	var t WorkflowDeploymentsListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowDeploymentsListRequestStatus) Ptr() *WorkflowDeploymentsListRequestStatus {
	return &w
}

type PatchedWorkflowReleaseTagUpdateRequest struct {
	// The ID of the Workflow Deployment History Item to tag
	HistoryItemId *string `json:"history_item_id,omitempty" url:"-"`
}
