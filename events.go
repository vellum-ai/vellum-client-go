// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
)

// Response serializer for successful event creation.
type EventCreateResponse struct {
	// Indicates whether the event was published successfully.
	Success *bool `json:"success,omitempty" url:"success,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventCreateResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EventCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventCreateResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventCreateResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type WorkflowEvent struct {
	NodeExecutionInitiatedEvent       *NodeExecutionInitiatedEvent
	NodeExecutionStreamingEvent       *NodeExecutionStreamingEvent
	NodeExecutionFulfilledEvent       *NodeExecutionFulfilledEvent
	NodeExecutionRejectedEvent        *NodeExecutionRejectedEvent
	NodeExecutionPausedEvent          *NodeExecutionPausedEvent
	NodeExecutionResumedEvent         *NodeExecutionResumedEvent
	WorkflowExecutionInitiatedEvent   *WorkflowExecutionInitiatedEvent
	WorkflowExecutionStreamingEvent   *WorkflowExecutionStreamingEvent
	WorkflowExecutionRejectedEvent    *WorkflowExecutionRejectedEvent
	WorkflowExecutionFulfilledEvent   *WorkflowExecutionFulfilledEvent
	WorkflowExecutionPausedEvent      *WorkflowExecutionPausedEvent
	WorkflowExecutionResumedEvent     *WorkflowExecutionResumedEvent
	WorkflowExecutionSnapshottedEvent *WorkflowExecutionSnapshottedEvent
}

func (w *WorkflowEvent) UnmarshalJSON(data []byte) error {
	valueNodeExecutionInitiatedEvent := new(NodeExecutionInitiatedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionInitiatedEvent); err == nil {
		w.NodeExecutionInitiatedEvent = valueNodeExecutionInitiatedEvent
		return nil
	}
	valueNodeExecutionStreamingEvent := new(NodeExecutionStreamingEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionStreamingEvent); err == nil {
		w.NodeExecutionStreamingEvent = valueNodeExecutionStreamingEvent
		return nil
	}
	valueNodeExecutionFulfilledEvent := new(NodeExecutionFulfilledEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionFulfilledEvent); err == nil {
		w.NodeExecutionFulfilledEvent = valueNodeExecutionFulfilledEvent
		return nil
	}
	valueNodeExecutionRejectedEvent := new(NodeExecutionRejectedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionRejectedEvent); err == nil {
		w.NodeExecutionRejectedEvent = valueNodeExecutionRejectedEvent
		return nil
	}
	valueNodeExecutionPausedEvent := new(NodeExecutionPausedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionPausedEvent); err == nil {
		w.NodeExecutionPausedEvent = valueNodeExecutionPausedEvent
		return nil
	}
	valueNodeExecutionResumedEvent := new(NodeExecutionResumedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionResumedEvent); err == nil {
		w.NodeExecutionResumedEvent = valueNodeExecutionResumedEvent
		return nil
	}
	valueWorkflowExecutionInitiatedEvent := new(WorkflowExecutionInitiatedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionInitiatedEvent); err == nil {
		w.WorkflowExecutionInitiatedEvent = valueWorkflowExecutionInitiatedEvent
		return nil
	}
	valueWorkflowExecutionStreamingEvent := new(WorkflowExecutionStreamingEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionStreamingEvent); err == nil {
		w.WorkflowExecutionStreamingEvent = valueWorkflowExecutionStreamingEvent
		return nil
	}
	valueWorkflowExecutionRejectedEvent := new(WorkflowExecutionRejectedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionRejectedEvent); err == nil {
		w.WorkflowExecutionRejectedEvent = valueWorkflowExecutionRejectedEvent
		return nil
	}
	valueWorkflowExecutionFulfilledEvent := new(WorkflowExecutionFulfilledEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionFulfilledEvent); err == nil {
		w.WorkflowExecutionFulfilledEvent = valueWorkflowExecutionFulfilledEvent
		return nil
	}
	valueWorkflowExecutionPausedEvent := new(WorkflowExecutionPausedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionPausedEvent); err == nil {
		w.WorkflowExecutionPausedEvent = valueWorkflowExecutionPausedEvent
		return nil
	}
	valueWorkflowExecutionResumedEvent := new(WorkflowExecutionResumedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionResumedEvent); err == nil {
		w.WorkflowExecutionResumedEvent = valueWorkflowExecutionResumedEvent
		return nil
	}
	valueWorkflowExecutionSnapshottedEvent := new(WorkflowExecutionSnapshottedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionSnapshottedEvent); err == nil {
		w.WorkflowExecutionSnapshottedEvent = valueWorkflowExecutionSnapshottedEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowEvent) MarshalJSON() ([]byte, error) {
	if w.NodeExecutionInitiatedEvent != nil {
		return json.Marshal(w.NodeExecutionInitiatedEvent)
	}
	if w.NodeExecutionStreamingEvent != nil {
		return json.Marshal(w.NodeExecutionStreamingEvent)
	}
	if w.NodeExecutionFulfilledEvent != nil {
		return json.Marshal(w.NodeExecutionFulfilledEvent)
	}
	if w.NodeExecutionRejectedEvent != nil {
		return json.Marshal(w.NodeExecutionRejectedEvent)
	}
	if w.NodeExecutionPausedEvent != nil {
		return json.Marshal(w.NodeExecutionPausedEvent)
	}
	if w.NodeExecutionResumedEvent != nil {
		return json.Marshal(w.NodeExecutionResumedEvent)
	}
	if w.WorkflowExecutionInitiatedEvent != nil {
		return json.Marshal(w.WorkflowExecutionInitiatedEvent)
	}
	if w.WorkflowExecutionStreamingEvent != nil {
		return json.Marshal(w.WorkflowExecutionStreamingEvent)
	}
	if w.WorkflowExecutionRejectedEvent != nil {
		return json.Marshal(w.WorkflowExecutionRejectedEvent)
	}
	if w.WorkflowExecutionFulfilledEvent != nil {
		return json.Marshal(w.WorkflowExecutionFulfilledEvent)
	}
	if w.WorkflowExecutionPausedEvent != nil {
		return json.Marshal(w.WorkflowExecutionPausedEvent)
	}
	if w.WorkflowExecutionResumedEvent != nil {
		return json.Marshal(w.WorkflowExecutionResumedEvent)
	}
	if w.WorkflowExecutionSnapshottedEvent != nil {
		return json.Marshal(w.WorkflowExecutionSnapshottedEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowEventVisitor interface {
	VisitNodeExecutionInitiatedEvent(*NodeExecutionInitiatedEvent) error
	VisitNodeExecutionStreamingEvent(*NodeExecutionStreamingEvent) error
	VisitNodeExecutionFulfilledEvent(*NodeExecutionFulfilledEvent) error
	VisitNodeExecutionRejectedEvent(*NodeExecutionRejectedEvent) error
	VisitNodeExecutionPausedEvent(*NodeExecutionPausedEvent) error
	VisitNodeExecutionResumedEvent(*NodeExecutionResumedEvent) error
	VisitWorkflowExecutionInitiatedEvent(*WorkflowExecutionInitiatedEvent) error
	VisitWorkflowExecutionStreamingEvent(*WorkflowExecutionStreamingEvent) error
	VisitWorkflowExecutionRejectedEvent(*WorkflowExecutionRejectedEvent) error
	VisitWorkflowExecutionFulfilledEvent(*WorkflowExecutionFulfilledEvent) error
	VisitWorkflowExecutionPausedEvent(*WorkflowExecutionPausedEvent) error
	VisitWorkflowExecutionResumedEvent(*WorkflowExecutionResumedEvent) error
	VisitWorkflowExecutionSnapshottedEvent(*WorkflowExecutionSnapshottedEvent) error
}

func (w *WorkflowEvent) Accept(visitor WorkflowEventVisitor) error {
	if w.NodeExecutionInitiatedEvent != nil {
		return visitor.VisitNodeExecutionInitiatedEvent(w.NodeExecutionInitiatedEvent)
	}
	if w.NodeExecutionStreamingEvent != nil {
		return visitor.VisitNodeExecutionStreamingEvent(w.NodeExecutionStreamingEvent)
	}
	if w.NodeExecutionFulfilledEvent != nil {
		return visitor.VisitNodeExecutionFulfilledEvent(w.NodeExecutionFulfilledEvent)
	}
	if w.NodeExecutionRejectedEvent != nil {
		return visitor.VisitNodeExecutionRejectedEvent(w.NodeExecutionRejectedEvent)
	}
	if w.NodeExecutionPausedEvent != nil {
		return visitor.VisitNodeExecutionPausedEvent(w.NodeExecutionPausedEvent)
	}
	if w.NodeExecutionResumedEvent != nil {
		return visitor.VisitNodeExecutionResumedEvent(w.NodeExecutionResumedEvent)
	}
	if w.WorkflowExecutionInitiatedEvent != nil {
		return visitor.VisitWorkflowExecutionInitiatedEvent(w.WorkflowExecutionInitiatedEvent)
	}
	if w.WorkflowExecutionStreamingEvent != nil {
		return visitor.VisitWorkflowExecutionStreamingEvent(w.WorkflowExecutionStreamingEvent)
	}
	if w.WorkflowExecutionRejectedEvent != nil {
		return visitor.VisitWorkflowExecutionRejectedEvent(w.WorkflowExecutionRejectedEvent)
	}
	if w.WorkflowExecutionFulfilledEvent != nil {
		return visitor.VisitWorkflowExecutionFulfilledEvent(w.WorkflowExecutionFulfilledEvent)
	}
	if w.WorkflowExecutionPausedEvent != nil {
		return visitor.VisitWorkflowExecutionPausedEvent(w.WorkflowExecutionPausedEvent)
	}
	if w.WorkflowExecutionResumedEvent != nil {
		return visitor.VisitWorkflowExecutionResumedEvent(w.WorkflowExecutionResumedEvent)
	}
	if w.WorkflowExecutionSnapshottedEvent != nil {
		return visitor.VisitWorkflowExecutionSnapshottedEvent(w.WorkflowExecutionSnapshottedEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}
