// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type ExecuteApiRequest struct {
	Url         string                                    `json:"url" url:"-"`
	Method      *MethodEnum                               `json:"method,omitempty" url:"-"`
	Body        *ExecuteApiRequestBody                    `json:"body,omitempty" url:"-"`
	Headers     map[string]*ExecuteApiRequestHeadersValue `json:"headers,omitempty" url:"-"`
	BearerToken *ExecuteApiRequestBearerToken             `json:"bearer_token,omitempty" url:"-"`
}

type CodeExecutor struct {
	Code        string                  `json:"code" url:"-"`
	Runtime     CodeExecutionRuntime    `json:"runtime" url:"-"`
	InputValues []*CodeExecutorInput    `json:"input_values,omitempty" url:"-"`
	Packages    []*CodeExecutionPackage `json:"packages,omitempty" url:"-"`
	OutputType  VellumVariableType      `json:"output_type" url:"-"`
}

type ExecutePromptRequest struct {
	// A list consisting of the Prompt Deployment's input variables and their values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"-"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"-"`
	// The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Workspace.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.
	ExpandMeta *PromptDeploymentExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.
	RawOverrides *RawPromptExecutionOverridesRequest `json:"raw_overrides,omitempty" url:"-"`
	// A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.
	ExpandRaw []string `json:"expand_raw,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type ExecutePromptStreamRequest struct {
	// A list consisting of the Prompt Deployment's input variables and their values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"-"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"-"`
	// The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Workspace.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.
	ExpandMeta *PromptDeploymentExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.
	RawOverrides *RawPromptExecutionOverridesRequest `json:"raw_overrides,omitempty" url:"-"`
	// A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.
	ExpandRaw []string `json:"expand_raw,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type ExecuteWorkflowRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.
	ExpandMeta *WorkflowExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"-"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Workspace.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
	// The ID of a previous Workflow Execution to reference for initial State loading.
	PreviousExecutionId *string `json:"previous_execution_id,omitempty" url:"-"`
}

type ExecuteWorkflowStreamRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.
	ExpandMeta *WorkflowExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"-"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Workspace.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// Optionally specify which events you want to receive. Defaults to only WORKFLOW events. Note that the schema of non-WORKFLOW events is unstable and should be used with caution.
	EventTypes []WorkflowExecutionEventType `json:"event_types,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
	// The ID of a previous Workflow Execution to reference for initial State loading.
	PreviousExecutionId *string `json:"previous_execution_id,omitempty" url:"-"`
}

type GenerateBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"-"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"-"`
}

type GenerateStreamBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"-"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"-"`
}

type SearchRequestBodyRequest struct {
	// The ID of the index to search against. Must provide either this, index_name or document_index.
	IndexId *string `json:"index_id,omitempty" url:"-"`
	// The name of the index to search against. Must provide either this, index_id or document_index.
	IndexName *string `json:"index_name,omitempty" url:"-"`
	// The query to search for.
	Query string `json:"query" url:"-"`
	// Configuration options for the search.
	Options *SearchRequestOptionsRequest `json:"options,omitempty" url:"-"`
	// Either the index name or index ID to search against. Must provide either this, index_id or index_name.
	DocumentIndex *string `json:"document_index,omitempty" url:"-"`
}

type SubmitCompletionActualsRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// Feedback regarding the quality of previously generated completions
	Actuals []*SubmitCompletionActualRequest `json:"actuals,omitempty" url:"-"`
}

type SubmitWorkflowExecutionActualsRequest struct {
	// Feedback regarding the quality of an output on a previously executed workflow.
	Actuals []*SubmitWorkflowExecutionActualRequest `json:"actuals,omitempty" url:"-"`
	// The Vellum-generated ID of a previously executed workflow. Must provide either this or external_id.
	ExecutionId *string `json:"execution_id,omitempty" url:"-"`
	// The external ID that was originally provided by when executing the workflow, if applicable, that you'd now like to submit actuals for. Must provide either this or execution_id.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
}

// * `True` - True
type AddOpenaiApiKeyEnum = bool

// A Node Result Event emitted from an API Node.
type ApiNodeResult struct {
	Data  *ApiNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiNodeResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiNodeResult) Type() string {
	return a.type_
}

func (a *ApiNodeResult) UnmarshalJSON(data []byte) error {
	type embed ApiNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ApiNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "API" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "API", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResult) MarshalJSON() ([]byte, error) {
	type embed ApiNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "API",
	}
	return json.Marshal(marshaler)
}

func (a *ApiNodeResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiNodeResultData struct {
	Json               map[string]interface{} `json:"json,omitempty" url:"json,omitempty"`
	TextOutputId       string                 `json:"text_output_id" url:"text_output_id"`
	Text               *string                `json:"text,omitempty" url:"text,omitempty"`
	JsonOutputId       string                 `json:"json_output_id" url:"json_output_id"`
	StatusCodeOutputId string                 `json:"status_code_output_id" url:"status_code_output_id"`
	StatusCode         int                    `json:"status_code" url:"status_code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiNodeResultData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResultData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiRequestParentContext struct {
	Parent *ParentContext `json:"parent,omitempty" url:"parent,omitempty"`
	Links  []*SpanLink    `json:"links,omitempty" url:"links,omitempty"`
	SpanId string         `json:"span_id" url:"span_id"`
	type_  string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiRequestParentContext) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiRequestParentContext) Type() string {
	return a.type_
}

func (a *ApiRequestParentContext) UnmarshalJSON(data []byte) error {
	type embed ApiRequestParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ApiRequestParentContext(unmarshaler.embed)
	if unmarshaler.Type != "API_REQUEST" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "API_REQUEST", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiRequestParentContext) MarshalJSON() ([]byte, error) {
	type embed ApiRequestParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "API_REQUEST",
	}
	return json.Marshal(marshaler)
}

func (a *ApiRequestParentContext) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// * `2024-10-25` - V2024_10_25
// * `2025-07-30` - V2025_07_30
type ApiVersionEnum string

const (
	ApiVersionEnumTwoThousandTwentyFour1025 ApiVersionEnum = "2024-10-25"
	ApiVersionEnumTwoThousandTwentyFive0730 ApiVersionEnum = "2025-07-30"
)

func NewApiVersionEnumFromString(s string) (ApiVersionEnum, error) {
	switch s {
	case "2024-10-25":
		return ApiVersionEnumTwoThousandTwentyFour1025, nil
	case "2025-07-30":
		return ApiVersionEnumTwoThousandTwentyFive0730, nil
	}
	var t ApiVersionEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ApiVersionEnum) Ptr() *ApiVersionEnum {
	return &a
}

// A list of chat message content items.
type ArrayChatMessageContent struct {
	Value []*ArrayChatMessageContentItem `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayChatMessageContent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayChatMessageContent) Type() string {
	return a.type_
}

func (a *ArrayChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed ArrayChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed ArrayChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayChatMessageContent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayChatMessageContentItem struct {
	StringChatMessageContent       *StringChatMessageContent
	FunctionCallChatMessageContent *FunctionCallChatMessageContent
	AudioChatMessageContent        *AudioChatMessageContent
	VideoChatMessageContent        *VideoChatMessageContent
	ImageChatMessageContent        *ImageChatMessageContent
	DocumentChatMessageContent     *DocumentChatMessageContent
}

func (a *ArrayChatMessageContentItem) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContent := new(StringChatMessageContent)
	if err := json.Unmarshal(data, &valueStringChatMessageContent); err == nil {
		a.StringChatMessageContent = valueStringChatMessageContent
		return nil
	}
	valueFunctionCallChatMessageContent := new(FunctionCallChatMessageContent)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContent); err == nil {
		a.FunctionCallChatMessageContent = valueFunctionCallChatMessageContent
		return nil
	}
	valueAudioChatMessageContent := new(AudioChatMessageContent)
	if err := json.Unmarshal(data, &valueAudioChatMessageContent); err == nil {
		a.AudioChatMessageContent = valueAudioChatMessageContent
		return nil
	}
	valueVideoChatMessageContent := new(VideoChatMessageContent)
	if err := json.Unmarshal(data, &valueVideoChatMessageContent); err == nil {
		a.VideoChatMessageContent = valueVideoChatMessageContent
		return nil
	}
	valueImageChatMessageContent := new(ImageChatMessageContent)
	if err := json.Unmarshal(data, &valueImageChatMessageContent); err == nil {
		a.ImageChatMessageContent = valueImageChatMessageContent
		return nil
	}
	valueDocumentChatMessageContent := new(DocumentChatMessageContent)
	if err := json.Unmarshal(data, &valueDocumentChatMessageContent); err == nil {
		a.DocumentChatMessageContent = valueDocumentChatMessageContent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ArrayChatMessageContentItem) MarshalJSON() ([]byte, error) {
	if a.StringChatMessageContent != nil {
		return json.Marshal(a.StringChatMessageContent)
	}
	if a.FunctionCallChatMessageContent != nil {
		return json.Marshal(a.FunctionCallChatMessageContent)
	}
	if a.AudioChatMessageContent != nil {
		return json.Marshal(a.AudioChatMessageContent)
	}
	if a.VideoChatMessageContent != nil {
		return json.Marshal(a.VideoChatMessageContent)
	}
	if a.ImageChatMessageContent != nil {
		return json.Marshal(a.ImageChatMessageContent)
	}
	if a.DocumentChatMessageContent != nil {
		return json.Marshal(a.DocumentChatMessageContent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ArrayChatMessageContentItemVisitor interface {
	VisitStringChatMessageContent(*StringChatMessageContent) error
	VisitFunctionCallChatMessageContent(*FunctionCallChatMessageContent) error
	VisitAudioChatMessageContent(*AudioChatMessageContent) error
	VisitVideoChatMessageContent(*VideoChatMessageContent) error
	VisitImageChatMessageContent(*ImageChatMessageContent) error
	VisitDocumentChatMessageContent(*DocumentChatMessageContent) error
}

func (a *ArrayChatMessageContentItem) Accept(visitor ArrayChatMessageContentItemVisitor) error {
	if a.StringChatMessageContent != nil {
		return visitor.VisitStringChatMessageContent(a.StringChatMessageContent)
	}
	if a.FunctionCallChatMessageContent != nil {
		return visitor.VisitFunctionCallChatMessageContent(a.FunctionCallChatMessageContent)
	}
	if a.AudioChatMessageContent != nil {
		return visitor.VisitAudioChatMessageContent(a.AudioChatMessageContent)
	}
	if a.VideoChatMessageContent != nil {
		return visitor.VisitVideoChatMessageContent(a.VideoChatMessageContent)
	}
	if a.ImageChatMessageContent != nil {
		return visitor.VisitImageChatMessageContent(a.ImageChatMessageContent)
	}
	if a.DocumentChatMessageContent != nil {
		return visitor.VisitDocumentChatMessageContent(a.DocumentChatMessageContent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ArrayChatMessageContentItemRequest struct {
	StringChatMessageContentRequest       *StringChatMessageContentRequest
	FunctionCallChatMessageContentRequest *FunctionCallChatMessageContentRequest
	AudioChatMessageContentRequest        *AudioChatMessageContentRequest
	VideoChatMessageContentRequest        *VideoChatMessageContentRequest
	ImageChatMessageContentRequest        *ImageChatMessageContentRequest
	DocumentChatMessageContentRequest     *DocumentChatMessageContentRequest
}

func (a *ArrayChatMessageContentItemRequest) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContentRequest := new(StringChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueStringChatMessageContentRequest); err == nil {
		a.StringChatMessageContentRequest = valueStringChatMessageContentRequest
		return nil
	}
	valueFunctionCallChatMessageContentRequest := new(FunctionCallChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContentRequest); err == nil {
		a.FunctionCallChatMessageContentRequest = valueFunctionCallChatMessageContentRequest
		return nil
	}
	valueAudioChatMessageContentRequest := new(AudioChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueAudioChatMessageContentRequest); err == nil {
		a.AudioChatMessageContentRequest = valueAudioChatMessageContentRequest
		return nil
	}
	valueVideoChatMessageContentRequest := new(VideoChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueVideoChatMessageContentRequest); err == nil {
		a.VideoChatMessageContentRequest = valueVideoChatMessageContentRequest
		return nil
	}
	valueImageChatMessageContentRequest := new(ImageChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueImageChatMessageContentRequest); err == nil {
		a.ImageChatMessageContentRequest = valueImageChatMessageContentRequest
		return nil
	}
	valueDocumentChatMessageContentRequest := new(DocumentChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueDocumentChatMessageContentRequest); err == nil {
		a.DocumentChatMessageContentRequest = valueDocumentChatMessageContentRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ArrayChatMessageContentItemRequest) MarshalJSON() ([]byte, error) {
	if a.StringChatMessageContentRequest != nil {
		return json.Marshal(a.StringChatMessageContentRequest)
	}
	if a.FunctionCallChatMessageContentRequest != nil {
		return json.Marshal(a.FunctionCallChatMessageContentRequest)
	}
	if a.AudioChatMessageContentRequest != nil {
		return json.Marshal(a.AudioChatMessageContentRequest)
	}
	if a.VideoChatMessageContentRequest != nil {
		return json.Marshal(a.VideoChatMessageContentRequest)
	}
	if a.ImageChatMessageContentRequest != nil {
		return json.Marshal(a.ImageChatMessageContentRequest)
	}
	if a.DocumentChatMessageContentRequest != nil {
		return json.Marshal(a.DocumentChatMessageContentRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ArrayChatMessageContentItemRequestVisitor interface {
	VisitStringChatMessageContentRequest(*StringChatMessageContentRequest) error
	VisitFunctionCallChatMessageContentRequest(*FunctionCallChatMessageContentRequest) error
	VisitAudioChatMessageContentRequest(*AudioChatMessageContentRequest) error
	VisitVideoChatMessageContentRequest(*VideoChatMessageContentRequest) error
	VisitImageChatMessageContentRequest(*ImageChatMessageContentRequest) error
	VisitDocumentChatMessageContentRequest(*DocumentChatMessageContentRequest) error
}

func (a *ArrayChatMessageContentItemRequest) Accept(visitor ArrayChatMessageContentItemRequestVisitor) error {
	if a.StringChatMessageContentRequest != nil {
		return visitor.VisitStringChatMessageContentRequest(a.StringChatMessageContentRequest)
	}
	if a.FunctionCallChatMessageContentRequest != nil {
		return visitor.VisitFunctionCallChatMessageContentRequest(a.FunctionCallChatMessageContentRequest)
	}
	if a.AudioChatMessageContentRequest != nil {
		return visitor.VisitAudioChatMessageContentRequest(a.AudioChatMessageContentRequest)
	}
	if a.VideoChatMessageContentRequest != nil {
		return visitor.VisitVideoChatMessageContentRequest(a.VideoChatMessageContentRequest)
	}
	if a.ImageChatMessageContentRequest != nil {
		return visitor.VisitImageChatMessageContentRequest(a.ImageChatMessageContentRequest)
	}
	if a.DocumentChatMessageContentRequest != nil {
		return visitor.VisitDocumentChatMessageContentRequest(a.DocumentChatMessageContentRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// A list of chat message content items.
type ArrayChatMessageContentRequest struct {
	Value []*ArrayChatMessageContentItemRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayChatMessageContentRequest) Type() string {
	return a.type_
}

func (a *ArrayChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed ArrayChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed ArrayChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayChatMessageContentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A user input representing a Vellum Array value
type ArrayInput struct {
	// The variable's name
	Name  string         `json:"name" url:"name"`
	Value []*VellumValue `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayInput) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayInput) Type() string {
	return a.type_
}

func (a *ArrayInput) UnmarshalJSON(data []byte) error {
	type embed ArrayInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayInput(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayInput) MarshalJSON() ([]byte, error) {
	type embed ArrayInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayInput) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A value representing an array of Vellum variable values.
type ArrayVellumValue struct {
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayVellumValue) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayVellumValue) Type() string {
	return a.type_
}

func (a *ArrayVellumValue) UnmarshalJSON(data []byte) error {
	type embed ArrayVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayVellumValue) MarshalJSON() ([]byte, error) {
	type embed ArrayVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayVellumValue) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A value representing an array of Vellum variable values.
type ArrayVellumValueRequest struct {
	Value []*VellumValueRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayVellumValueRequest) Type() string {
	return a.type_
}

func (a *ArrayVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ArrayVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ArrayVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayVellumValueRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// An audio value that is used in a chat message.
type AudioChatMessageContent struct {
	Value *VellumAudio `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioChatMessageContent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioChatMessageContent) Type() string {
	return a.type_
}

func (a *AudioChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed AudioChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed AudioChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioChatMessageContent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// An audio value that is used in a chat message.
type AudioChatMessageContentRequest struct {
	Value *VellumAudioRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioChatMessageContentRequest) Type() string {
	return a.type_
}

func (a *AudioChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed AudioChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed AudioChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioChatMessageContentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A user input representing a Vellum Audio value
type AudioInput struct {
	// The variable's name
	Name  string       `json:"name" url:"name"`
	Value *VellumAudio `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioInput) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioInput) Type() string {
	return a.type_
}

func (a *AudioInput) UnmarshalJSON(data []byte) error {
	type embed AudioInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioInput(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioInput) MarshalJSON() ([]byte, error) {
	type embed AudioInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioInput) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A user input representing a Vellum Audio value
type AudioInputRequest struct {
	// The variable's name
	Name  string              `json:"name" url:"name"`
	Value *VellumAudioRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioInputRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioInputRequest) Type() string {
	return a.type_
}

func (a *AudioInputRequest) UnmarshalJSON(data []byte) error {
	type embed AudioInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioInputRequest) MarshalJSON() ([]byte, error) {
	type embed AudioInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioInputRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A block that represents an audio file in a prompt template.
type AudioPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Src         string                      `json:"src" url:"src"`
	Metadata    map[string]interface{}      `json:"metadata,omitempty" url:"metadata,omitempty"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioPromptBlock) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioPromptBlock) BlockType() string {
	return a.blockType
}

func (a *AudioPromptBlock) UnmarshalJSON(data []byte) error {
	type embed AudioPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.BlockType)
	}
	a.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *a, "block_type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioPromptBlock) MarshalJSON() ([]byte, error) {
	type embed AudioPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*a),
		BlockType: "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioPromptBlock) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A base Vellum primitive value representing audio.
type AudioVellumValue struct {
	Value *VellumAudio `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioVellumValue) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioVellumValue) Type() string {
	return a.type_
}

func (a *AudioVellumValue) UnmarshalJSON(data []byte) error {
	type embed AudioVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioVellumValue) MarshalJSON() ([]byte, error) {
	type embed AudioVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioVellumValue) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A base Vellum primitive value representing audio.
type AudioVellumValueRequest struct {
	Value *VellumAudioRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioVellumValueRequest) Type() string {
	return a.type_
}

func (a *AudioVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed AudioVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed AudioVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioVellumValueRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BaseOutput struct {
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`
	Delta map[string]interface{} `json:"delta,omitempty" url:"delta,omitempty"`
	Name  string                 `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BaseOutput) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseOutput) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for intfloat/multilingual-e5-large.
type BasicVectorizerIntfloatMultilingualE5Large struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerIntfloatMultilingualE5Large
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerIntfloatMultilingualE5Large(unmarshaler.embed)
	if unmarshaler.ModelName != "intfloat/multilingual-e5-large" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "intfloat/multilingual-e5-large", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerIntfloatMultilingualE5Large
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "intfloat/multilingual-e5-large",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1(unmarshaler.embed)
	if unmarshaler.ModelName != "sentence-transformers/multi-qa-mpnet-base-cos-v1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "sentence-transformers/multi-qa-mpnet-base-cos-v1", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "sentence-transformers/multi-qa-mpnet-base-cos-v1",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1(unmarshaler.embed)
	if unmarshaler.ModelName != "sentence-transformers/multi-qa-mpnet-base-dot-v1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "sentence-transformers/multi-qa-mpnet-base-dot-v1", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "sentence-transformers/multi-qa-mpnet-base-dot-v1",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// A user input representing a list of chat messages
type ChatHistoryInput struct {
	// The variable's name, as defined in the deployment.
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryInput) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryInput) Type() string {
	return c.type_
}

func (c *ChatHistoryInput) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryInput(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryInput) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryInput) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A user input representing a list of chat messages
type ChatHistoryInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryInputRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryInputRequest) Type() string {
	return c.type_
}

func (c *ChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryInputRequest) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryInputRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A value representing Chat History.
type ChatHistoryVellumValue struct {
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryVellumValue) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryVellumValue) Type() string {
	return c.type_
}

func (c *ChatHistoryVellumValue) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryVellumValue) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryVellumValue) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A value representing Chat History.
type ChatHistoryVellumValueRequest struct {
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryVellumValueRequest) Type() string {
	return c.type_
}

func (c *ChatHistoryVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryVellumValueRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessage struct {
	Text    *string             `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole     `json:"role" url:"role"`
	Content *ChatMessageContent `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessage) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessage) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessageContent struct {
	StringChatMessageContent       *StringChatMessageContent
	FunctionCallChatMessageContent *FunctionCallChatMessageContent
	ArrayChatMessageContent        *ArrayChatMessageContent
	AudioChatMessageContent        *AudioChatMessageContent
	VideoChatMessageContent        *VideoChatMessageContent
	ImageChatMessageContent        *ImageChatMessageContent
	DocumentChatMessageContent     *DocumentChatMessageContent
}

func (c *ChatMessageContent) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContent := new(StringChatMessageContent)
	if err := json.Unmarshal(data, &valueStringChatMessageContent); err == nil {
		c.StringChatMessageContent = valueStringChatMessageContent
		return nil
	}
	valueFunctionCallChatMessageContent := new(FunctionCallChatMessageContent)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContent); err == nil {
		c.FunctionCallChatMessageContent = valueFunctionCallChatMessageContent
		return nil
	}
	valueArrayChatMessageContent := new(ArrayChatMessageContent)
	if err := json.Unmarshal(data, &valueArrayChatMessageContent); err == nil {
		c.ArrayChatMessageContent = valueArrayChatMessageContent
		return nil
	}
	valueAudioChatMessageContent := new(AudioChatMessageContent)
	if err := json.Unmarshal(data, &valueAudioChatMessageContent); err == nil {
		c.AudioChatMessageContent = valueAudioChatMessageContent
		return nil
	}
	valueVideoChatMessageContent := new(VideoChatMessageContent)
	if err := json.Unmarshal(data, &valueVideoChatMessageContent); err == nil {
		c.VideoChatMessageContent = valueVideoChatMessageContent
		return nil
	}
	valueImageChatMessageContent := new(ImageChatMessageContent)
	if err := json.Unmarshal(data, &valueImageChatMessageContent); err == nil {
		c.ImageChatMessageContent = valueImageChatMessageContent
		return nil
	}
	valueDocumentChatMessageContent := new(DocumentChatMessageContent)
	if err := json.Unmarshal(data, &valueDocumentChatMessageContent); err == nil {
		c.DocumentChatMessageContent = valueDocumentChatMessageContent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ChatMessageContent) MarshalJSON() ([]byte, error) {
	if c.StringChatMessageContent != nil {
		return json.Marshal(c.StringChatMessageContent)
	}
	if c.FunctionCallChatMessageContent != nil {
		return json.Marshal(c.FunctionCallChatMessageContent)
	}
	if c.ArrayChatMessageContent != nil {
		return json.Marshal(c.ArrayChatMessageContent)
	}
	if c.AudioChatMessageContent != nil {
		return json.Marshal(c.AudioChatMessageContent)
	}
	if c.VideoChatMessageContent != nil {
		return json.Marshal(c.VideoChatMessageContent)
	}
	if c.ImageChatMessageContent != nil {
		return json.Marshal(c.ImageChatMessageContent)
	}
	if c.DocumentChatMessageContent != nil {
		return json.Marshal(c.DocumentChatMessageContent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ChatMessageContentVisitor interface {
	VisitStringChatMessageContent(*StringChatMessageContent) error
	VisitFunctionCallChatMessageContent(*FunctionCallChatMessageContent) error
	VisitArrayChatMessageContent(*ArrayChatMessageContent) error
	VisitAudioChatMessageContent(*AudioChatMessageContent) error
	VisitVideoChatMessageContent(*VideoChatMessageContent) error
	VisitImageChatMessageContent(*ImageChatMessageContent) error
	VisitDocumentChatMessageContent(*DocumentChatMessageContent) error
}

func (c *ChatMessageContent) Accept(visitor ChatMessageContentVisitor) error {
	if c.StringChatMessageContent != nil {
		return visitor.VisitStringChatMessageContent(c.StringChatMessageContent)
	}
	if c.FunctionCallChatMessageContent != nil {
		return visitor.VisitFunctionCallChatMessageContent(c.FunctionCallChatMessageContent)
	}
	if c.ArrayChatMessageContent != nil {
		return visitor.VisitArrayChatMessageContent(c.ArrayChatMessageContent)
	}
	if c.AudioChatMessageContent != nil {
		return visitor.VisitAudioChatMessageContent(c.AudioChatMessageContent)
	}
	if c.VideoChatMessageContent != nil {
		return visitor.VisitVideoChatMessageContent(c.VideoChatMessageContent)
	}
	if c.ImageChatMessageContent != nil {
		return visitor.VisitImageChatMessageContent(c.ImageChatMessageContent)
	}
	if c.DocumentChatMessageContent != nil {
		return visitor.VisitDocumentChatMessageContent(c.DocumentChatMessageContent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ChatMessageContentRequest struct {
	StringChatMessageContentRequest       *StringChatMessageContentRequest
	FunctionCallChatMessageContentRequest *FunctionCallChatMessageContentRequest
	ArrayChatMessageContentRequest        *ArrayChatMessageContentRequest
	AudioChatMessageContentRequest        *AudioChatMessageContentRequest
	VideoChatMessageContentRequest        *VideoChatMessageContentRequest
	ImageChatMessageContentRequest        *ImageChatMessageContentRequest
	DocumentChatMessageContentRequest     *DocumentChatMessageContentRequest
}

func (c *ChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContentRequest := new(StringChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueStringChatMessageContentRequest); err == nil {
		c.StringChatMessageContentRequest = valueStringChatMessageContentRequest
		return nil
	}
	valueFunctionCallChatMessageContentRequest := new(FunctionCallChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContentRequest); err == nil {
		c.FunctionCallChatMessageContentRequest = valueFunctionCallChatMessageContentRequest
		return nil
	}
	valueArrayChatMessageContentRequest := new(ArrayChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueArrayChatMessageContentRequest); err == nil {
		c.ArrayChatMessageContentRequest = valueArrayChatMessageContentRequest
		return nil
	}
	valueAudioChatMessageContentRequest := new(AudioChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueAudioChatMessageContentRequest); err == nil {
		c.AudioChatMessageContentRequest = valueAudioChatMessageContentRequest
		return nil
	}
	valueVideoChatMessageContentRequest := new(VideoChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueVideoChatMessageContentRequest); err == nil {
		c.VideoChatMessageContentRequest = valueVideoChatMessageContentRequest
		return nil
	}
	valueImageChatMessageContentRequest := new(ImageChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueImageChatMessageContentRequest); err == nil {
		c.ImageChatMessageContentRequest = valueImageChatMessageContentRequest
		return nil
	}
	valueDocumentChatMessageContentRequest := new(DocumentChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueDocumentChatMessageContentRequest); err == nil {
		c.DocumentChatMessageContentRequest = valueDocumentChatMessageContentRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	if c.StringChatMessageContentRequest != nil {
		return json.Marshal(c.StringChatMessageContentRequest)
	}
	if c.FunctionCallChatMessageContentRequest != nil {
		return json.Marshal(c.FunctionCallChatMessageContentRequest)
	}
	if c.ArrayChatMessageContentRequest != nil {
		return json.Marshal(c.ArrayChatMessageContentRequest)
	}
	if c.AudioChatMessageContentRequest != nil {
		return json.Marshal(c.AudioChatMessageContentRequest)
	}
	if c.VideoChatMessageContentRequest != nil {
		return json.Marshal(c.VideoChatMessageContentRequest)
	}
	if c.ImageChatMessageContentRequest != nil {
		return json.Marshal(c.ImageChatMessageContentRequest)
	}
	if c.DocumentChatMessageContentRequest != nil {
		return json.Marshal(c.DocumentChatMessageContentRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ChatMessageContentRequestVisitor interface {
	VisitStringChatMessageContentRequest(*StringChatMessageContentRequest) error
	VisitFunctionCallChatMessageContentRequest(*FunctionCallChatMessageContentRequest) error
	VisitArrayChatMessageContentRequest(*ArrayChatMessageContentRequest) error
	VisitAudioChatMessageContentRequest(*AudioChatMessageContentRequest) error
	VisitVideoChatMessageContentRequest(*VideoChatMessageContentRequest) error
	VisitImageChatMessageContentRequest(*ImageChatMessageContentRequest) error
	VisitDocumentChatMessageContentRequest(*DocumentChatMessageContentRequest) error
}

func (c *ChatMessageContentRequest) Accept(visitor ChatMessageContentRequestVisitor) error {
	if c.StringChatMessageContentRequest != nil {
		return visitor.VisitStringChatMessageContentRequest(c.StringChatMessageContentRequest)
	}
	if c.FunctionCallChatMessageContentRequest != nil {
		return visitor.VisitFunctionCallChatMessageContentRequest(c.FunctionCallChatMessageContentRequest)
	}
	if c.ArrayChatMessageContentRequest != nil {
		return visitor.VisitArrayChatMessageContentRequest(c.ArrayChatMessageContentRequest)
	}
	if c.AudioChatMessageContentRequest != nil {
		return visitor.VisitAudioChatMessageContentRequest(c.AudioChatMessageContentRequest)
	}
	if c.VideoChatMessageContentRequest != nil {
		return visitor.VisitVideoChatMessageContentRequest(c.VideoChatMessageContentRequest)
	}
	if c.ImageChatMessageContentRequest != nil {
		return visitor.VisitImageChatMessageContentRequest(c.ImageChatMessageContentRequest)
	}
	if c.DocumentChatMessageContentRequest != nil {
		return visitor.VisitDocumentChatMessageContentRequest(c.DocumentChatMessageContentRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// A block that represents a chat message in a prompt template.
type ChatMessagePromptBlock struct {
	State                   *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig             *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	ChatRole                ChatMessageRole             `json:"chat_role" url:"chat_role"`
	ChatSource              *string                     `json:"chat_source,omitempty" url:"chat_source,omitempty"`
	ChatMessageUnterminated *bool                       `json:"chat_message_unterminated,omitempty" url:"chat_message_unterminated,omitempty"`
	Blocks                  []*PromptBlock              `json:"blocks" url:"blocks"`
	blockType               string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessagePromptBlock) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessagePromptBlock) BlockType() string {
	return c.blockType
}

func (c *ChatMessagePromptBlock) UnmarshalJSON(data []byte) error {
	type embed ChatMessagePromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatMessagePromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "CHAT_MESSAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_MESSAGE", unmarshaler.BlockType)
	}
	c.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *c, "block_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessagePromptBlock) MarshalJSON() ([]byte, error) {
	type embed ChatMessagePromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*c),
		BlockType: "CHAT_MESSAGE",
	}
	return json.Marshal(marshaler)
}

func (c *ChatMessagePromptBlock) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessageRequest struct {
	Text    *string                    `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole            `json:"role" url:"role"`
	Content *ChatMessageContentRequest `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessageRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessageRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessageRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// * `SYSTEM` - System
// * `ASSISTANT` - Assistant
// * `USER` - User
// * `FUNCTION` - Function
type ChatMessageRole string

const (
	ChatMessageRoleSystem    ChatMessageRole = "SYSTEM"
	ChatMessageRoleAssistant ChatMessageRole = "ASSISTANT"
	ChatMessageRoleUser      ChatMessageRole = "USER"
	ChatMessageRoleFunction  ChatMessageRole = "FUNCTION"
)

func NewChatMessageRoleFromString(s string) (ChatMessageRole, error) {
	switch s {
	case "SYSTEM":
		return ChatMessageRoleSystem, nil
	case "ASSISTANT":
		return ChatMessageRoleAssistant, nil
	case "USER":
		return ChatMessageRoleUser, nil
	case "FUNCTION":
		return ChatMessageRoleFunction, nil
	}
	var t ChatMessageRole
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChatMessageRole) Ptr() *ChatMessageRole {
	return &c
}

type CodeExecutionNodeArrayResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeArrayResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeArrayResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeArrayResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeArrayResult(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "ARRAY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeArrayResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeArrayResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeArrayResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeChatHistoryResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeChatHistoryResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeChatHistoryResult(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeChatHistoryResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeChatHistoryResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeChatHistoryResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeErrorResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeErrorResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeErrorResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeErrorResult(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "ERROR", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeErrorResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeErrorResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeErrorResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeFunctionCallResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeFunctionCallResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeFunctionCallResult(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "FUNCTION_CALL", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeFunctionCallResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeFunctionCallResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeFunctionCallResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeJsonResult struct {
	Id    string      `json:"id" url:"id"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeJsonResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeJsonResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeJsonResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeJsonResult(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "JSON", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeJsonResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeJsonResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeJsonResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeNumberResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeNumberResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeNumberResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeNumberResult(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "NUMBER", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeNumberResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeNumberResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeNumberResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A Node Result Event emitted from a Code Execution Node.
type CodeExecutionNodeResult struct {
	Data  *CodeExecutionNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "CODE_EXECUTION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CODE_EXECUTION", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CODE_EXECUTION",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultData struct {
	Output      *CodeExecutionNodeResultOutput `json:"output" url:"output"`
	LogOutputId *string                        `json:"log_output_id,omitempty" url:"log_output_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeResultData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultOutput struct {
	CodeExecutionNodeStringResult        *CodeExecutionNodeStringResult
	CodeExecutionNodeNumberResult        *CodeExecutionNodeNumberResult
	CodeExecutionNodeJsonResult          *CodeExecutionNodeJsonResult
	CodeExecutionNodeChatHistoryResult   *CodeExecutionNodeChatHistoryResult
	CodeExecutionNodeSearchResultsResult *CodeExecutionNodeSearchResultsResult
	CodeExecutionNodeErrorResult         *CodeExecutionNodeErrorResult
	CodeExecutionNodeArrayResult         *CodeExecutionNodeArrayResult
	CodeExecutionNodeFunctionCallResult  *CodeExecutionNodeFunctionCallResult
}

func (c *CodeExecutionNodeResultOutput) UnmarshalJSON(data []byte) error {
	valueCodeExecutionNodeStringResult := new(CodeExecutionNodeStringResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeStringResult); err == nil {
		c.CodeExecutionNodeStringResult = valueCodeExecutionNodeStringResult
		return nil
	}
	valueCodeExecutionNodeNumberResult := new(CodeExecutionNodeNumberResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeNumberResult); err == nil {
		c.CodeExecutionNodeNumberResult = valueCodeExecutionNodeNumberResult
		return nil
	}
	valueCodeExecutionNodeJsonResult := new(CodeExecutionNodeJsonResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeJsonResult); err == nil {
		c.CodeExecutionNodeJsonResult = valueCodeExecutionNodeJsonResult
		return nil
	}
	valueCodeExecutionNodeChatHistoryResult := new(CodeExecutionNodeChatHistoryResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeChatHistoryResult); err == nil {
		c.CodeExecutionNodeChatHistoryResult = valueCodeExecutionNodeChatHistoryResult
		return nil
	}
	valueCodeExecutionNodeSearchResultsResult := new(CodeExecutionNodeSearchResultsResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeSearchResultsResult); err == nil {
		c.CodeExecutionNodeSearchResultsResult = valueCodeExecutionNodeSearchResultsResult
		return nil
	}
	valueCodeExecutionNodeErrorResult := new(CodeExecutionNodeErrorResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeErrorResult); err == nil {
		c.CodeExecutionNodeErrorResult = valueCodeExecutionNodeErrorResult
		return nil
	}
	valueCodeExecutionNodeArrayResult := new(CodeExecutionNodeArrayResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeArrayResult); err == nil {
		c.CodeExecutionNodeArrayResult = valueCodeExecutionNodeArrayResult
		return nil
	}
	valueCodeExecutionNodeFunctionCallResult := new(CodeExecutionNodeFunctionCallResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeFunctionCallResult); err == nil {
		c.CodeExecutionNodeFunctionCallResult = valueCodeExecutionNodeFunctionCallResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CodeExecutionNodeResultOutput) MarshalJSON() ([]byte, error) {
	if c.CodeExecutionNodeStringResult != nil {
		return json.Marshal(c.CodeExecutionNodeStringResult)
	}
	if c.CodeExecutionNodeNumberResult != nil {
		return json.Marshal(c.CodeExecutionNodeNumberResult)
	}
	if c.CodeExecutionNodeJsonResult != nil {
		return json.Marshal(c.CodeExecutionNodeJsonResult)
	}
	if c.CodeExecutionNodeChatHistoryResult != nil {
		return json.Marshal(c.CodeExecutionNodeChatHistoryResult)
	}
	if c.CodeExecutionNodeSearchResultsResult != nil {
		return json.Marshal(c.CodeExecutionNodeSearchResultsResult)
	}
	if c.CodeExecutionNodeErrorResult != nil {
		return json.Marshal(c.CodeExecutionNodeErrorResult)
	}
	if c.CodeExecutionNodeArrayResult != nil {
		return json.Marshal(c.CodeExecutionNodeArrayResult)
	}
	if c.CodeExecutionNodeFunctionCallResult != nil {
		return json.Marshal(c.CodeExecutionNodeFunctionCallResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutionNodeResultOutputVisitor interface {
	VisitCodeExecutionNodeStringResult(*CodeExecutionNodeStringResult) error
	VisitCodeExecutionNodeNumberResult(*CodeExecutionNodeNumberResult) error
	VisitCodeExecutionNodeJsonResult(*CodeExecutionNodeJsonResult) error
	VisitCodeExecutionNodeChatHistoryResult(*CodeExecutionNodeChatHistoryResult) error
	VisitCodeExecutionNodeSearchResultsResult(*CodeExecutionNodeSearchResultsResult) error
	VisitCodeExecutionNodeErrorResult(*CodeExecutionNodeErrorResult) error
	VisitCodeExecutionNodeArrayResult(*CodeExecutionNodeArrayResult) error
	VisitCodeExecutionNodeFunctionCallResult(*CodeExecutionNodeFunctionCallResult) error
}

func (c *CodeExecutionNodeResultOutput) Accept(visitor CodeExecutionNodeResultOutputVisitor) error {
	if c.CodeExecutionNodeStringResult != nil {
		return visitor.VisitCodeExecutionNodeStringResult(c.CodeExecutionNodeStringResult)
	}
	if c.CodeExecutionNodeNumberResult != nil {
		return visitor.VisitCodeExecutionNodeNumberResult(c.CodeExecutionNodeNumberResult)
	}
	if c.CodeExecutionNodeJsonResult != nil {
		return visitor.VisitCodeExecutionNodeJsonResult(c.CodeExecutionNodeJsonResult)
	}
	if c.CodeExecutionNodeChatHistoryResult != nil {
		return visitor.VisitCodeExecutionNodeChatHistoryResult(c.CodeExecutionNodeChatHistoryResult)
	}
	if c.CodeExecutionNodeSearchResultsResult != nil {
		return visitor.VisitCodeExecutionNodeSearchResultsResult(c.CodeExecutionNodeSearchResultsResult)
	}
	if c.CodeExecutionNodeErrorResult != nil {
		return visitor.VisitCodeExecutionNodeErrorResult(c.CodeExecutionNodeErrorResult)
	}
	if c.CodeExecutionNodeArrayResult != nil {
		return visitor.VisitCodeExecutionNodeArrayResult(c.CodeExecutionNodeArrayResult)
	}
	if c.CodeExecutionNodeFunctionCallResult != nil {
		return visitor.VisitCodeExecutionNodeFunctionCallResult(c.CodeExecutionNodeFunctionCallResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutionNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeSearchResultsResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeSearchResultsResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeSearchResultsResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "SEARCH_RESULTS", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeSearchResultsResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeSearchResultsResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeSearchResultsResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeStringResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeStringResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeStringResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeStringResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeStringResult(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "STRING", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeStringResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeStringResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeStringResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionPackage struct {
	Version    string  `json:"version" url:"version"`
	Name       string  `json:"name" url:"name"`
	Repository *string `json:"repository,omitempty" url:"repository,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionPackage) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionPackage) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionPackage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionPackage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionPackage) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// * `PYTHON_3_11_6` - PYTHON_3_11_6
// * `TYPESCRIPT_5_3_3` - TYPESCRIPT_5_3_3
type CodeExecutionRuntime string

const (
	CodeExecutionRuntimePython3116    CodeExecutionRuntime = "PYTHON_3_11_6"
	CodeExecutionRuntimeTypescript533 CodeExecutionRuntime = "TYPESCRIPT_5_3_3"
)

func NewCodeExecutionRuntimeFromString(s string) (CodeExecutionRuntime, error) {
	switch s {
	case "PYTHON_3_11_6":
		return CodeExecutionRuntimePython3116, nil
	case "TYPESCRIPT_5_3_3":
		return CodeExecutionRuntimeTypescript533, nil
	}
	var t CodeExecutionRuntime
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CodeExecutionRuntime) Ptr() *CodeExecutionRuntime {
	return &c
}

type CodeExecutorInput struct {
	StringInput             *StringInput
	JsonInput               *JsonInput
	ChatHistoryInput        *ChatHistoryInput
	NumberInput             *NumberInput
	SearchResultsInput      *SearchResultsInput
	ErrorInput              *ErrorInput
	ArrayInput              *ArrayInput
	FunctionCallInput       *FunctionCallInput
	AudioInput              *AudioInput
	VideoInput              *VideoInput
	ImageInput              *ImageInput
	DocumentInput           *DocumentInput
	CodeExecutorSecretInput *CodeExecutorSecretInput
}

func (c *CodeExecutorInput) UnmarshalJSON(data []byte) error {
	valueStringInput := new(StringInput)
	if err := json.Unmarshal(data, &valueStringInput); err == nil {
		c.StringInput = valueStringInput
		return nil
	}
	valueJsonInput := new(JsonInput)
	if err := json.Unmarshal(data, &valueJsonInput); err == nil {
		c.JsonInput = valueJsonInput
		return nil
	}
	valueChatHistoryInput := new(ChatHistoryInput)
	if err := json.Unmarshal(data, &valueChatHistoryInput); err == nil {
		c.ChatHistoryInput = valueChatHistoryInput
		return nil
	}
	valueNumberInput := new(NumberInput)
	if err := json.Unmarshal(data, &valueNumberInput); err == nil {
		c.NumberInput = valueNumberInput
		return nil
	}
	valueSearchResultsInput := new(SearchResultsInput)
	if err := json.Unmarshal(data, &valueSearchResultsInput); err == nil {
		c.SearchResultsInput = valueSearchResultsInput
		return nil
	}
	valueErrorInput := new(ErrorInput)
	if err := json.Unmarshal(data, &valueErrorInput); err == nil {
		c.ErrorInput = valueErrorInput
		return nil
	}
	valueArrayInput := new(ArrayInput)
	if err := json.Unmarshal(data, &valueArrayInput); err == nil {
		c.ArrayInput = valueArrayInput
		return nil
	}
	valueFunctionCallInput := new(FunctionCallInput)
	if err := json.Unmarshal(data, &valueFunctionCallInput); err == nil {
		c.FunctionCallInput = valueFunctionCallInput
		return nil
	}
	valueAudioInput := new(AudioInput)
	if err := json.Unmarshal(data, &valueAudioInput); err == nil {
		c.AudioInput = valueAudioInput
		return nil
	}
	valueVideoInput := new(VideoInput)
	if err := json.Unmarshal(data, &valueVideoInput); err == nil {
		c.VideoInput = valueVideoInput
		return nil
	}
	valueImageInput := new(ImageInput)
	if err := json.Unmarshal(data, &valueImageInput); err == nil {
		c.ImageInput = valueImageInput
		return nil
	}
	valueDocumentInput := new(DocumentInput)
	if err := json.Unmarshal(data, &valueDocumentInput); err == nil {
		c.DocumentInput = valueDocumentInput
		return nil
	}
	valueCodeExecutorSecretInput := new(CodeExecutorSecretInput)
	if err := json.Unmarshal(data, &valueCodeExecutorSecretInput); err == nil {
		c.CodeExecutorSecretInput = valueCodeExecutorSecretInput
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CodeExecutorInput) MarshalJSON() ([]byte, error) {
	if c.StringInput != nil {
		return json.Marshal(c.StringInput)
	}
	if c.JsonInput != nil {
		return json.Marshal(c.JsonInput)
	}
	if c.ChatHistoryInput != nil {
		return json.Marshal(c.ChatHistoryInput)
	}
	if c.NumberInput != nil {
		return json.Marshal(c.NumberInput)
	}
	if c.SearchResultsInput != nil {
		return json.Marshal(c.SearchResultsInput)
	}
	if c.ErrorInput != nil {
		return json.Marshal(c.ErrorInput)
	}
	if c.ArrayInput != nil {
		return json.Marshal(c.ArrayInput)
	}
	if c.FunctionCallInput != nil {
		return json.Marshal(c.FunctionCallInput)
	}
	if c.AudioInput != nil {
		return json.Marshal(c.AudioInput)
	}
	if c.VideoInput != nil {
		return json.Marshal(c.VideoInput)
	}
	if c.ImageInput != nil {
		return json.Marshal(c.ImageInput)
	}
	if c.DocumentInput != nil {
		return json.Marshal(c.DocumentInput)
	}
	if c.CodeExecutorSecretInput != nil {
		return json.Marshal(c.CodeExecutorSecretInput)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutorInputVisitor interface {
	VisitStringInput(*StringInput) error
	VisitJsonInput(*JsonInput) error
	VisitChatHistoryInput(*ChatHistoryInput) error
	VisitNumberInput(*NumberInput) error
	VisitSearchResultsInput(*SearchResultsInput) error
	VisitErrorInput(*ErrorInput) error
	VisitArrayInput(*ArrayInput) error
	VisitFunctionCallInput(*FunctionCallInput) error
	VisitAudioInput(*AudioInput) error
	VisitVideoInput(*VideoInput) error
	VisitImageInput(*ImageInput) error
	VisitDocumentInput(*DocumentInput) error
	VisitCodeExecutorSecretInput(*CodeExecutorSecretInput) error
}

func (c *CodeExecutorInput) Accept(visitor CodeExecutorInputVisitor) error {
	if c.StringInput != nil {
		return visitor.VisitStringInput(c.StringInput)
	}
	if c.JsonInput != nil {
		return visitor.VisitJsonInput(c.JsonInput)
	}
	if c.ChatHistoryInput != nil {
		return visitor.VisitChatHistoryInput(c.ChatHistoryInput)
	}
	if c.NumberInput != nil {
		return visitor.VisitNumberInput(c.NumberInput)
	}
	if c.SearchResultsInput != nil {
		return visitor.VisitSearchResultsInput(c.SearchResultsInput)
	}
	if c.ErrorInput != nil {
		return visitor.VisitErrorInput(c.ErrorInput)
	}
	if c.ArrayInput != nil {
		return visitor.VisitArrayInput(c.ArrayInput)
	}
	if c.FunctionCallInput != nil {
		return visitor.VisitFunctionCallInput(c.FunctionCallInput)
	}
	if c.AudioInput != nil {
		return visitor.VisitAudioInput(c.AudioInput)
	}
	if c.VideoInput != nil {
		return visitor.VisitVideoInput(c.VideoInput)
	}
	if c.ImageInput != nil {
		return visitor.VisitImageInput(c.ImageInput)
	}
	if c.DocumentInput != nil {
		return visitor.VisitDocumentInput(c.DocumentInput)
	}
	if c.CodeExecutorSecretInput != nil {
		return visitor.VisitCodeExecutorSecretInput(c.CodeExecutorSecretInput)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutorResponse struct {
	Log    string       `json:"log" url:"log"`
	Output *VellumValue `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutorResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutorResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutorResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A user input representing a Vellum Workspace Secret value
type CodeExecutorSecretInput struct {
	// The variable's name
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutorSecretInput) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutorSecretInput) Type() string {
	return c.type_
}

func (c *CodeExecutorSecretInput) UnmarshalJSON(data []byte) error {
	type embed CodeExecutorSecretInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutorSecretInput(unmarshaler.embed)
	if unmarshaler.Type != "SECRET" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "SECRET", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutorSecretInput) MarshalJSON() ([]byte, error) {
	type embed CodeExecutorSecretInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "SECRET",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutorSecretInput) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The definition of a resource defined in code.
type CodeResourceDefinition struct {
	// The name of the resource, typically a class name.
	Name string `json:"name" url:"name"`
	// The module that this resource is defined in.
	Module []string `json:"module" url:"module"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeResourceDefinition) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeResourceDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeResourceDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeResourceDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeResourceDefinition) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ComponentsSchemasComposioToolDefinition = *ComposioToolDefinition

type ComponentsSchemasPdfSearchResultMetaSource = *PdfSearchResultMetaSource

type ComponentsSchemasPdfSearchResultMetaSourceRequest = *PdfSearchResultMetaSourceRequest

// Serializer for Composio tool definition response.
type ComposioToolDefinition struct {
	Integration      *ToolDefinitionIntegration `json:"integration" url:"integration"`
	Name             string                     `json:"name" url:"name"`
	Label            string                     `json:"label" url:"label"`
	Description      string                     `json:"description" url:"description"`
	InputParameters  map[string]interface{}     `json:"input_parameters" url:"input_parameters"`
	OutputParameters map[string]interface{}     `json:"output_parameters" url:"output_parameters"`
	provider         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComposioToolDefinition) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComposioToolDefinition) Provider() string {
	return c.provider
}

func (c *ComposioToolDefinition) UnmarshalJSON(data []byte) error {
	type embed ComposioToolDefinition
	var unmarshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ComposioToolDefinition(unmarshaler.embed)
	if unmarshaler.Provider != "COMPOSIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "COMPOSIO", unmarshaler.Provider)
	}
	c.provider = unmarshaler.Provider

	extraProperties, err := core.ExtractExtraProperties(data, *c, "provider")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComposioToolDefinition) MarshalJSON() ([]byte, error) {
	type embed ComposioToolDefinition
	var marshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed:    embed(*c),
		Provider: "COMPOSIO",
	}
	return json.Marshal(marshaler)
}

func (c *ComposioToolDefinition) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// * `OR` - OR
// * `AND` - AND
type ConditionCombinator string

const (
	ConditionCombinatorOr  ConditionCombinator = "OR"
	ConditionCombinatorAnd ConditionCombinator = "AND"
)

func NewConditionCombinatorFromString(s string) (ConditionCombinator, error) {
	switch s {
	case "OR":
		return ConditionCombinatorOr, nil
	case "AND":
		return ConditionCombinatorAnd, nil
	}
	var t ConditionCombinator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConditionCombinator) Ptr() *ConditionCombinator {
	return &c
}

// A Node Result Event emitted from a Conditional Node.
type ConditionalNodeResult struct {
	Data  *ConditionalNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ConditionalNodeResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionalNodeResult) Type() string {
	return c.type_
}

func (c *ConditionalNodeResult) UnmarshalJSON(data []byte) error {
	type embed ConditionalNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConditionalNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "CONDITIONAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CONDITIONAL", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResult) MarshalJSON() ([]byte, error) {
	type embed ConditionalNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CONDITIONAL",
	}
	return json.Marshal(marshaler)
}

func (c *ConditionalNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConditionalNodeResultData struct {
	SourceHandleId *string `json:"source_handle_id,omitempty" url:"source_handle_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ConditionalNodeResultData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DelimiterChunkerConfig struct {
	Delimiter *string `json:"delimiter,omitempty" url:"delimiter,omitempty"`
	IsRegex   *bool   `json:"is_regex,omitempty" url:"is_regex,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DelimiterChunkerConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DelimiterChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DelimiterChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DelimiterChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DelimiterChunkerConfig) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DelimiterChunking struct {
	ChunkerConfig *DelimiterChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DelimiterChunking) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DelimiterChunking) ChunkerName() string {
	return d.chunkerName
}

func (d *DelimiterChunking) UnmarshalJSON(data []byte) error {
	type embed DelimiterChunking
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DelimiterChunking(unmarshaler.embed)
	if unmarshaler.ChunkerName != "delimiter-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "delimiter-chunker", unmarshaler.ChunkerName)
	}
	d.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *d, "chunker_name")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DelimiterChunking) MarshalJSON() ([]byte, error) {
	type embed DelimiterChunking
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*d),
		ChunkerName: "delimiter-chunker",
	}
	return json.Marshal(marshaler)
}

func (d *DelimiterChunking) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A Prompt Deployment's full details.
type DeploymentRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the deployment
	//
	// * `ACTIVE` - Active
	// * `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// Deprecated. The value returned will always be 'PRODUCTION'.
	Environment    *EnvironmentEnum  `json:"environment,omitempty" url:"environment,omitempty"`
	LastDeployedOn time.Time         `json:"last_deployed_on" url:"last_deployed_on"`
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// A human-readable description of the deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Deprecated. This now always returns an empty array.
	ActiveModelVersionIds []string `json:"active_model_version_ids,omitempty" url:"active_model_version_ids,omitempty"`
	// The ID of the history item associated with this Deployment's LATEST Release Tag
	LastDeployedHistoryItemId string `json:"last_deployed_history_item_id" url:"last_deployed_history_item_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentRead) UnmarshalJSON(data []byte) error {
	type embed DeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeploymentRead(unmarshaler.embed)
	d.Created = unmarshaler.Created.Time()
	d.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentRead) MarshalJSON() ([]byte, error) {
	type embed DeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*d),
		Created:        core.NewDateTime(d.Created),
		LastDeployedOn: core.NewDateTime(d.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (d *DeploymentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A document value that is used in a chat message.
type DocumentChatMessageContent struct {
	Value *VellumDocument `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentChatMessageContent) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentChatMessageContent) Type() string {
	return d.type_
}

func (d *DocumentChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed DocumentChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "DOCUMENT", unmarshaler.Type)
	}
	d.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *d, "type")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed DocumentChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (d *DocumentChatMessageContent) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A document value that is used in a chat message.
type DocumentChatMessageContentRequest struct {
	Value *VellumDocumentRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentChatMessageContentRequest) Type() string {
	return d.type_
}

func (d *DocumentChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed DocumentChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "DOCUMENT", unmarshaler.Type)
	}
	d.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *d, "type")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed DocumentChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (d *DocumentChatMessageContentRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexChunking struct {
	ReductoChunking                *ReductoChunking
	SentenceChunking               *SentenceChunking
	TokenOverlappingWindowChunking *TokenOverlappingWindowChunking
	DelimiterChunking              *DelimiterChunking
}

func (d *DocumentIndexChunking) UnmarshalJSON(data []byte) error {
	valueReductoChunking := new(ReductoChunking)
	if err := json.Unmarshal(data, &valueReductoChunking); err == nil {
		d.ReductoChunking = valueReductoChunking
		return nil
	}
	valueSentenceChunking := new(SentenceChunking)
	if err := json.Unmarshal(data, &valueSentenceChunking); err == nil {
		d.SentenceChunking = valueSentenceChunking
		return nil
	}
	valueTokenOverlappingWindowChunking := new(TokenOverlappingWindowChunking)
	if err := json.Unmarshal(data, &valueTokenOverlappingWindowChunking); err == nil {
		d.TokenOverlappingWindowChunking = valueTokenOverlappingWindowChunking
		return nil
	}
	valueDelimiterChunking := new(DelimiterChunking)
	if err := json.Unmarshal(data, &valueDelimiterChunking); err == nil {
		d.DelimiterChunking = valueDelimiterChunking
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DocumentIndexChunking) MarshalJSON() ([]byte, error) {
	if d.ReductoChunking != nil {
		return json.Marshal(d.ReductoChunking)
	}
	if d.SentenceChunking != nil {
		return json.Marshal(d.SentenceChunking)
	}
	if d.TokenOverlappingWindowChunking != nil {
		return json.Marshal(d.TokenOverlappingWindowChunking)
	}
	if d.DelimiterChunking != nil {
		return json.Marshal(d.DelimiterChunking)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DocumentIndexChunkingVisitor interface {
	VisitReductoChunking(*ReductoChunking) error
	VisitSentenceChunking(*SentenceChunking) error
	VisitTokenOverlappingWindowChunking(*TokenOverlappingWindowChunking) error
	VisitDelimiterChunking(*DelimiterChunking) error
}

func (d *DocumentIndexChunking) Accept(visitor DocumentIndexChunkingVisitor) error {
	if d.ReductoChunking != nil {
		return visitor.VisitReductoChunking(d.ReductoChunking)
	}
	if d.SentenceChunking != nil {
		return visitor.VisitSentenceChunking(d.SentenceChunking)
	}
	if d.TokenOverlappingWindowChunking != nil {
		return visitor.VisitTokenOverlappingWindowChunking(d.TokenOverlappingWindowChunking)
	}
	if d.DelimiterChunking != nil {
		return visitor.VisitDelimiterChunking(d.DelimiterChunking)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DocumentIndexIndexingConfig struct {
	Vectorizer *IndexingConfigVectorizer `json:"vectorizer" url:"vectorizer"`
	Chunking   *DocumentIndexChunking    `json:"chunking,omitempty" url:"chunking,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentIndexIndexingConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentIndexIndexingConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentIndexIndexingConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentIndexIndexingConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexIndexingConfig) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A user input representing a Vellum Document value
type DocumentInput struct {
	// The variable's name
	Name  string          `json:"name" url:"name"`
	Value *VellumDocument `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentInput) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentInput) Type() string {
	return d.type_
}

func (d *DocumentInput) UnmarshalJSON(data []byte) error {
	type embed DocumentInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentInput(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "DOCUMENT", unmarshaler.Type)
	}
	d.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *d, "type")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentInput) MarshalJSON() ([]byte, error) {
	type embed DocumentInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (d *DocumentInput) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A user input representing a Vellum Document value
type DocumentInputRequest struct {
	// The variable's name
	Name  string                 `json:"name" url:"name"`
	Value *VellumDocumentRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentInputRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentInputRequest) Type() string {
	return d.type_
}

func (d *DocumentInputRequest) UnmarshalJSON(data []byte) error {
	type embed DocumentInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "DOCUMENT", unmarshaler.Type)
	}
	d.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *d, "type")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentInputRequest) MarshalJSON() ([]byte, error) {
	type embed DocumentInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (d *DocumentInputRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A block that represents a document in a prompt template.
type DocumentPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Src         string                      `json:"src" url:"src"`
	Metadata    map[string]interface{}      `json:"metadata,omitempty" url:"metadata,omitempty"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentPromptBlock) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentPromptBlock) BlockType() string {
	return d.blockType
}

func (d *DocumentPromptBlock) UnmarshalJSON(data []byte) error {
	type embed DocumentPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "DOCUMENT", unmarshaler.BlockType)
	}
	d.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *d, "block_type")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentPromptBlock) MarshalJSON() ([]byte, error) {
	type embed DocumentPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*d),
		BlockType: "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (d *DocumentPromptBlock) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A base Vellum primitive value representing a document.
type DocumentVellumValue struct {
	Value *VellumDocument `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentVellumValue) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentVellumValue) Type() string {
	return d.type_
}

func (d *DocumentVellumValue) UnmarshalJSON(data []byte) error {
	type embed DocumentVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "DOCUMENT", unmarshaler.Type)
	}
	d.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *d, "type")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentVellumValue) MarshalJSON() ([]byte, error) {
	type embed DocumentVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (d *DocumentVellumValue) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// A base Vellum primitive value representing a document.
type DocumentVellumValueRequest struct {
	Value *VellumDocumentRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentVellumValueRequest) Type() string {
	return d.type_
}

func (d *DocumentVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed DocumentVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", d, "DOCUMENT", unmarshaler.Type)
	}
	d.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *d, "type")
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed DocumentVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*d),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (d *DocumentVellumValueRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EnrichedNormalizedCompletion struct {
	// The Vellum-generated ID of the completion.
	Id string `json:"id" url:"id"`
	// The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// The text generated by the LLM.
	Text string `json:"text" url:"text"`
	// The reason the generation finished.
	//
	// * `LENGTH` - LENGTH
	// * `STOP` - STOP
	// * `UNKNOWN` - UNKNOWN
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	// The logprobs of the completion. Only present if specified in the original request options.
	Logprobs *NormalizedLogProbs `json:"logprobs,omitempty" url:"logprobs,omitempty"`
	// The ID of the model version used to generate this completion.
	ModelVersionId       *string             `json:"model_version_id,omitempty" url:"model_version_id,omitempty"`
	PromptVersionId      string              `json:"prompt_version_id" url:"prompt_version_id"`
	Type                 *VellumVariableType `json:"type,omitempty" url:"type,omitempty"`
	DeploymentReleaseTag string              `json:"deployment_release_tag" url:"deployment_release_tag"`
	ModelName            string              `json:"model_name" url:"model_name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EnrichedNormalizedCompletion) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnrichedNormalizedCompletion) UnmarshalJSON(data []byte) error {
	type unmarshaler EnrichedNormalizedCompletion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnrichedNormalizedCompletion(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnrichedNormalizedCompletion) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// * `ACTIVE` - Active
// * `ARCHIVED` - Archived
type EntityStatus string

const (
	EntityStatusActive   EntityStatus = "ACTIVE"
	EntityStatusArchived EntityStatus = "ARCHIVED"
)

func NewEntityStatusFromString(s string) (EntityStatus, error) {
	switch s {
	case "ACTIVE":
		return EntityStatusActive, nil
	case "ARCHIVED":
		return EntityStatusArchived, nil
	}
	var t EntityStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityStatus) Ptr() *EntityStatus {
	return &e
}

type EnvironmentEnum string

const (
	EnvironmentEnumDevelopment EnvironmentEnum = "DEVELOPMENT"
	EnvironmentEnumStaging     EnvironmentEnum = "STAGING"
	EnvironmentEnumProduction  EnvironmentEnum = "PRODUCTION"
)

func NewEnvironmentEnumFromString(s string) (EnvironmentEnum, error) {
	switch s {
	case "DEVELOPMENT":
		return EnvironmentEnumDevelopment, nil
	case "STAGING":
		return EnvironmentEnumStaging, nil
	case "PRODUCTION":
		return EnvironmentEnumProduction, nil
	}
	var t EnvironmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnvironmentEnum) Ptr() *EnvironmentEnum {
	return &e
}

type EphemeralPromptCacheConfig struct {
	Type *EphemeralPromptCacheConfigTypeEnum `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EphemeralPromptCacheConfig) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EphemeralPromptCacheConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler EphemeralPromptCacheConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EphemeralPromptCacheConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EphemeralPromptCacheConfig) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// * `EPHEMERAL` - EPHEMERAL
type EphemeralPromptCacheConfigTypeEnum = string

type ErrorDetailResponse struct {
	// Message informing the user of the error.
	Detail string `json:"detail" url:"detail"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorDetailResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorDetailResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorDetailResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A user input representing a Vellum Error value
type ErrorInput struct {
	// The variable's name
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorInput) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorInput) Type() string {
	return e.type_
}

func (e *ErrorInput) UnmarshalJSON(data []byte) error {
	type embed ErrorInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ErrorInput(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorInput) MarshalJSON() ([]byte, error) {
	type embed ErrorInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ErrorInput) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ErrorVellumValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVellumValue) Type() string {
	return e.type_
}

func (e *ErrorVellumValue) UnmarshalJSON(data []byte) error {
	type embed ErrorVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ErrorVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVellumValue) MarshalJSON() ([]byte, error) {
	type embed ErrorVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ErrorVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ErrorVellumValueRequest struct {
	Value *VellumErrorRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVellumValueRequest) Type() string {
	return e.type_
}

func (e *ErrorVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ErrorVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ErrorVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ErrorVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ErrorVellumValueRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteApiRequestBearerToken struct {
	String       string
	VellumSecret *VellumSecret
}

func (e *ExecuteApiRequestBearerToken) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.String = valueString
		return nil
	}
	valueVellumSecret := new(VellumSecret)
	if err := json.Unmarshal(data, &valueVellumSecret); err == nil {
		e.VellumSecret = valueVellumSecret
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecuteApiRequestBearerToken) MarshalJSON() ([]byte, error) {
	if e.String != "" {
		return json.Marshal(e.String)
	}
	if e.VellumSecret != nil {
		return json.Marshal(e.VellumSecret)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteApiRequestBearerTokenVisitor interface {
	VisitString(string) error
	VisitVellumSecret(*VellumSecret) error
}

func (e *ExecuteApiRequestBearerToken) Accept(visitor ExecuteApiRequestBearerTokenVisitor) error {
	if e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.VellumSecret != nil {
		return visitor.VisitVellumSecret(e.VellumSecret)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteApiRequestBody struct {
	String           string
	UnknownList      []interface{}
	StringUnknownMap map[string]interface{}
}

func (e *ExecuteApiRequestBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.String = valueString
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		e.UnknownList = valueUnknownList
		return nil
	}
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		e.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecuteApiRequestBody) MarshalJSON() ([]byte, error) {
	if e.String != "" {
		return json.Marshal(e.String)
	}
	if e.UnknownList != nil {
		return json.Marshal(e.UnknownList)
	}
	if e.StringUnknownMap != nil {
		return json.Marshal(e.StringUnknownMap)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteApiRequestBodyVisitor interface {
	VisitString(string) error
	VisitUnknownList([]interface{}) error
	VisitStringUnknownMap(map[string]interface{}) error
}

func (e *ExecuteApiRequestBody) Accept(visitor ExecuteApiRequestBodyVisitor) error {
	if e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.UnknownList != nil {
		return visitor.VisitUnknownList(e.UnknownList)
	}
	if e.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(e.StringUnknownMap)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteApiRequestHeadersValue struct {
	String       string
	VellumSecret *VellumSecret
}

func (e *ExecuteApiRequestHeadersValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.String = valueString
		return nil
	}
	valueVellumSecret := new(VellumSecret)
	if err := json.Unmarshal(data, &valueVellumSecret); err == nil {
		e.VellumSecret = valueVellumSecret
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecuteApiRequestHeadersValue) MarshalJSON() ([]byte, error) {
	if e.String != "" {
		return json.Marshal(e.String)
	}
	if e.VellumSecret != nil {
		return json.Marshal(e.VellumSecret)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteApiRequestHeadersValueVisitor interface {
	VisitString(string) error
	VisitVellumSecret(*VellumSecret) error
}

func (e *ExecuteApiRequestHeadersValue) Accept(visitor ExecuteApiRequestHeadersValueVisitor) error {
	if e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.VellumSecret != nil {
		return visitor.VisitVellumSecret(e.VellumSecret)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteApiResponse struct {
	StatusCode int                     `json:"status_code" url:"status_code"`
	Text       string                  `json:"text" url:"text"`
	Json       *ExecuteApiResponseJson `json:"json,omitempty" url:"json,omitempty"`
	Headers    map[string]string       `json:"headers" url:"headers"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecuteApiResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecuteApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteApiResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteApiResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteApiResponseJson struct {
	StringUnknownMap map[string]interface{}
	UnknownList      []interface{}
}

func (e *ExecuteApiResponseJson) UnmarshalJSON(data []byte) error {
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		e.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		e.UnknownList = valueUnknownList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecuteApiResponseJson) MarshalJSON() ([]byte, error) {
	if e.StringUnknownMap != nil {
		return json.Marshal(e.StringUnknownMap)
	}
	if e.UnknownList != nil {
		return json.Marshal(e.UnknownList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteApiResponseJsonVisitor interface {
	VisitStringUnknownMap(map[string]interface{}) error
	VisitUnknownList([]interface{}) error
}

func (e *ExecuteApiResponseJson) Accept(visitor ExecuteApiResponseJsonVisitor) error {
	if e.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(e.StringUnknownMap)
	}
	if e.UnknownList != nil {
		return visitor.VisitUnknownList(e.UnknownList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutePromptEvent struct {
	InitiatedExecutePromptEvent *InitiatedExecutePromptEvent
	StreamingExecutePromptEvent *StreamingExecutePromptEvent
	FulfilledExecutePromptEvent *FulfilledExecutePromptEvent
	RejectedExecutePromptEvent  *RejectedExecutePromptEvent
}

func (e *ExecutePromptEvent) UnmarshalJSON(data []byte) error {
	valueInitiatedExecutePromptEvent := new(InitiatedExecutePromptEvent)
	if err := json.Unmarshal(data, &valueInitiatedExecutePromptEvent); err == nil {
		e.InitiatedExecutePromptEvent = valueInitiatedExecutePromptEvent
		return nil
	}
	valueStreamingExecutePromptEvent := new(StreamingExecutePromptEvent)
	if err := json.Unmarshal(data, &valueStreamingExecutePromptEvent); err == nil {
		e.StreamingExecutePromptEvent = valueStreamingExecutePromptEvent
		return nil
	}
	valueFulfilledExecutePromptEvent := new(FulfilledExecutePromptEvent)
	if err := json.Unmarshal(data, &valueFulfilledExecutePromptEvent); err == nil {
		e.FulfilledExecutePromptEvent = valueFulfilledExecutePromptEvent
		return nil
	}
	valueRejectedExecutePromptEvent := new(RejectedExecutePromptEvent)
	if err := json.Unmarshal(data, &valueRejectedExecutePromptEvent); err == nil {
		e.RejectedExecutePromptEvent = valueRejectedExecutePromptEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecutePromptEvent) MarshalJSON() ([]byte, error) {
	if e.InitiatedExecutePromptEvent != nil {
		return json.Marshal(e.InitiatedExecutePromptEvent)
	}
	if e.StreamingExecutePromptEvent != nil {
		return json.Marshal(e.StreamingExecutePromptEvent)
	}
	if e.FulfilledExecutePromptEvent != nil {
		return json.Marshal(e.FulfilledExecutePromptEvent)
	}
	if e.RejectedExecutePromptEvent != nil {
		return json.Marshal(e.RejectedExecutePromptEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutePromptEventVisitor interface {
	VisitInitiatedExecutePromptEvent(*InitiatedExecutePromptEvent) error
	VisitStreamingExecutePromptEvent(*StreamingExecutePromptEvent) error
	VisitFulfilledExecutePromptEvent(*FulfilledExecutePromptEvent) error
	VisitRejectedExecutePromptEvent(*RejectedExecutePromptEvent) error
}

func (e *ExecutePromptEvent) Accept(visitor ExecutePromptEventVisitor) error {
	if e.InitiatedExecutePromptEvent != nil {
		return visitor.VisitInitiatedExecutePromptEvent(e.InitiatedExecutePromptEvent)
	}
	if e.StreamingExecutePromptEvent != nil {
		return visitor.VisitStreamingExecutePromptEvent(e.StreamingExecutePromptEvent)
	}
	if e.FulfilledExecutePromptEvent != nil {
		return visitor.VisitFulfilledExecutePromptEvent(e.FulfilledExecutePromptEvent)
	}
	if e.RejectedExecutePromptEvent != nil {
		return visitor.VisitRejectedExecutePromptEvent(e.RejectedExecutePromptEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutePromptResponse struct {
	FulfilledExecutePromptResponse *FulfilledExecutePromptResponse
	RejectedExecutePromptResponse  *RejectedExecutePromptResponse
}

func (e *ExecutePromptResponse) UnmarshalJSON(data []byte) error {
	valueFulfilledExecutePromptResponse := new(FulfilledExecutePromptResponse)
	if err := json.Unmarshal(data, &valueFulfilledExecutePromptResponse); err == nil {
		e.FulfilledExecutePromptResponse = valueFulfilledExecutePromptResponse
		return nil
	}
	valueRejectedExecutePromptResponse := new(RejectedExecutePromptResponse)
	if err := json.Unmarshal(data, &valueRejectedExecutePromptResponse); err == nil {
		e.RejectedExecutePromptResponse = valueRejectedExecutePromptResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecutePromptResponse) MarshalJSON() ([]byte, error) {
	if e.FulfilledExecutePromptResponse != nil {
		return json.Marshal(e.FulfilledExecutePromptResponse)
	}
	if e.RejectedExecutePromptResponse != nil {
		return json.Marshal(e.RejectedExecutePromptResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutePromptResponseVisitor interface {
	VisitFulfilledExecutePromptResponse(*FulfilledExecutePromptResponse) error
	VisitRejectedExecutePromptResponse(*RejectedExecutePromptResponse) error
}

func (e *ExecutePromptResponse) Accept(visitor ExecutePromptResponseVisitor) error {
	if e.FulfilledExecutePromptResponse != nil {
		return visitor.VisitFulfilledExecutePromptResponse(e.FulfilledExecutePromptResponse)
	}
	if e.RejectedExecutePromptResponse != nil {
		return visitor.VisitRejectedExecutePromptResponse(e.RejectedExecutePromptResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteWorkflowResponse struct {
	ExecutionId string                              `json:"execution_id" url:"execution_id"`
	RunId       *string                             `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                             `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *ExecuteWorkflowWorkflowResultEvent `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecuteWorkflowResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecuteWorkflowResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteWorkflowResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteWorkflowResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteWorkflowResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteWorkflowWorkflowResultEvent struct {
	FulfilledExecuteWorkflowWorkflowResultEvent *FulfilledExecuteWorkflowWorkflowResultEvent
	RejectedExecuteWorkflowWorkflowResultEvent  *RejectedExecuteWorkflowWorkflowResultEvent
}

func (e *ExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	valueFulfilledExecuteWorkflowWorkflowResultEvent := new(FulfilledExecuteWorkflowWorkflowResultEvent)
	if err := json.Unmarshal(data, &valueFulfilledExecuteWorkflowWorkflowResultEvent); err == nil {
		e.FulfilledExecuteWorkflowWorkflowResultEvent = valueFulfilledExecuteWorkflowWorkflowResultEvent
		return nil
	}
	valueRejectedExecuteWorkflowWorkflowResultEvent := new(RejectedExecuteWorkflowWorkflowResultEvent)
	if err := json.Unmarshal(data, &valueRejectedExecuteWorkflowWorkflowResultEvent); err == nil {
		e.RejectedExecuteWorkflowWorkflowResultEvent = valueRejectedExecuteWorkflowWorkflowResultEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	if e.FulfilledExecuteWorkflowWorkflowResultEvent != nil {
		return json.Marshal(e.FulfilledExecuteWorkflowWorkflowResultEvent)
	}
	if e.RejectedExecuteWorkflowWorkflowResultEvent != nil {
		return json.Marshal(e.RejectedExecuteWorkflowWorkflowResultEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteWorkflowWorkflowResultEventVisitor interface {
	VisitFulfilledExecuteWorkflowWorkflowResultEvent(*FulfilledExecuteWorkflowWorkflowResultEvent) error
	VisitRejectedExecuteWorkflowWorkflowResultEvent(*RejectedExecuteWorkflowWorkflowResultEvent) error
}

func (e *ExecuteWorkflowWorkflowResultEvent) Accept(visitor ExecuteWorkflowWorkflowResultEventVisitor) error {
	if e.FulfilledExecuteWorkflowWorkflowResultEvent != nil {
		return visitor.VisitFulfilledExecuteWorkflowWorkflowResultEvent(e.FulfilledExecuteWorkflowWorkflowResultEvent)
	}
	if e.RejectedExecuteWorkflowWorkflowResultEvent != nil {
		return visitor.VisitRejectedExecuteWorkflowWorkflowResultEvent(e.RejectedExecuteWorkflowWorkflowResultEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// A value representing an array of Vellum variable values.
type ExecutionArrayVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string         `json:"id" url:"id"`
	Name  string         `json:"name" url:"name"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionArrayVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionArrayVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionArrayVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionArrayVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionArrayVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ARRAY", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionArrayVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionArrayVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionArrayVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A base Vellum primitive value representing audio.
type ExecutionAudioVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string       `json:"id" url:"id"`
	Name  string       `json:"name" url:"name"`
	Value *VellumAudio `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionAudioVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionAudioVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionAudioVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionAudioVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionAudioVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "AUDIO", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionAudioVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionAudioVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionAudioVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing Chat History.
type ExecutionChatHistoryVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string         `json:"id" url:"id"`
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionChatHistoryVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionChatHistoryVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionChatHistoryVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionChatHistoryVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionChatHistoryVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "CHAT_HISTORY", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionChatHistoryVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionChatHistoryVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionChatHistoryVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A base Vellum primitive value representing a document.
type ExecutionDocumentVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string          `json:"id" url:"id"`
	Name  string          `json:"name" url:"name"`
	Value *VellumDocument `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionDocumentVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionDocumentVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionDocumentVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionDocumentVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionDocumentVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "DOCUMENT", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionDocumentVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionDocumentVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionDocumentVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ExecutionErrorVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string       `json:"id" url:"id"`
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionErrorVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionErrorVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionErrorVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionErrorVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionErrorVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionErrorVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionErrorVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionErrorVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a Function Call.
type ExecutionFunctionCallVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string        `json:"id" url:"id"`
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionFunctionCallVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionFunctionCallVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionFunctionCallVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionFunctionCallVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionFunctionCallVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "FUNCTION_CALL", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionFunctionCallVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionFunctionCallVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionFunctionCallVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A base Vellum primitive value representing an image.
type ExecutionImageVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string       `json:"id" url:"id"`
	Name  string       `json:"name" url:"name"`
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionImageVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionImageVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionImageVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionImageVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionImageVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "IMAGE", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionImageVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionImageVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionImageVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a JSON object.
type ExecutionJsonVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string      `json:"id" url:"id"`
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionJsonVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionJsonVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionJsonVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionJsonVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionJsonVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "JSON", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionJsonVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionJsonVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionJsonVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a number.
type ExecutionNumberVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string   `json:"id" url:"id"`
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionNumberVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionNumberVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionNumberVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionNumberVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionNumberVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "NUMBER", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionNumberVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionNumberVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionNumberVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing Search Results.
type ExecutionSearchResultsVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string          `json:"id" url:"id"`
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionSearchResultsVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionSearchResultsVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionSearchResultsVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionSearchResultsVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionSearchResultsVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "SEARCH_RESULTS", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionSearchResultsVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionSearchResultsVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionSearchResultsVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a string.
type ExecutionStringVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string  `json:"id" url:"id"`
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionStringVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionStringVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionStringVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionStringVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionStringVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "STRING", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionStringVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionStringVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionStringVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing Thinking mode output.
type ExecutionThinkingVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string             `json:"id" url:"id"`
	Name  string             `json:"name" url:"name"`
	Value *StringVellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionThinkingVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionThinkingVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionThinkingVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionThinkingVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionThinkingVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "THINKING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "THINKING", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionThinkingVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionThinkingVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "THINKING",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionThinkingVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionVellumValue struct {
	ExecutionStringVellumValue        *ExecutionStringVellumValue
	ExecutionNumberVellumValue        *ExecutionNumberVellumValue
	ExecutionJsonVellumValue          *ExecutionJsonVellumValue
	ExecutionChatHistoryVellumValue   *ExecutionChatHistoryVellumValue
	ExecutionSearchResultsVellumValue *ExecutionSearchResultsVellumValue
	ExecutionErrorVellumValue         *ExecutionErrorVellumValue
	ExecutionArrayVellumValue         *ExecutionArrayVellumValue
	ExecutionFunctionCallVellumValue  *ExecutionFunctionCallVellumValue
	ExecutionThinkingVellumValue      *ExecutionThinkingVellumValue
	ExecutionAudioVellumValue         *ExecutionAudioVellumValue
	ExecutionVideoVellumValue         *ExecutionVideoVellumValue
	ExecutionImageVellumValue         *ExecutionImageVellumValue
	ExecutionDocumentVellumValue      *ExecutionDocumentVellumValue
}

func (e *ExecutionVellumValue) UnmarshalJSON(data []byte) error {
	valueExecutionStringVellumValue := new(ExecutionStringVellumValue)
	if err := json.Unmarshal(data, &valueExecutionStringVellumValue); err == nil {
		e.ExecutionStringVellumValue = valueExecutionStringVellumValue
		return nil
	}
	valueExecutionNumberVellumValue := new(ExecutionNumberVellumValue)
	if err := json.Unmarshal(data, &valueExecutionNumberVellumValue); err == nil {
		e.ExecutionNumberVellumValue = valueExecutionNumberVellumValue
		return nil
	}
	valueExecutionJsonVellumValue := new(ExecutionJsonVellumValue)
	if err := json.Unmarshal(data, &valueExecutionJsonVellumValue); err == nil {
		e.ExecutionJsonVellumValue = valueExecutionJsonVellumValue
		return nil
	}
	valueExecutionChatHistoryVellumValue := new(ExecutionChatHistoryVellumValue)
	if err := json.Unmarshal(data, &valueExecutionChatHistoryVellumValue); err == nil {
		e.ExecutionChatHistoryVellumValue = valueExecutionChatHistoryVellumValue
		return nil
	}
	valueExecutionSearchResultsVellumValue := new(ExecutionSearchResultsVellumValue)
	if err := json.Unmarshal(data, &valueExecutionSearchResultsVellumValue); err == nil {
		e.ExecutionSearchResultsVellumValue = valueExecutionSearchResultsVellumValue
		return nil
	}
	valueExecutionErrorVellumValue := new(ExecutionErrorVellumValue)
	if err := json.Unmarshal(data, &valueExecutionErrorVellumValue); err == nil {
		e.ExecutionErrorVellumValue = valueExecutionErrorVellumValue
		return nil
	}
	valueExecutionArrayVellumValue := new(ExecutionArrayVellumValue)
	if err := json.Unmarshal(data, &valueExecutionArrayVellumValue); err == nil {
		e.ExecutionArrayVellumValue = valueExecutionArrayVellumValue
		return nil
	}
	valueExecutionFunctionCallVellumValue := new(ExecutionFunctionCallVellumValue)
	if err := json.Unmarshal(data, &valueExecutionFunctionCallVellumValue); err == nil {
		e.ExecutionFunctionCallVellumValue = valueExecutionFunctionCallVellumValue
		return nil
	}
	valueExecutionThinkingVellumValue := new(ExecutionThinkingVellumValue)
	if err := json.Unmarshal(data, &valueExecutionThinkingVellumValue); err == nil {
		e.ExecutionThinkingVellumValue = valueExecutionThinkingVellumValue
		return nil
	}
	valueExecutionAudioVellumValue := new(ExecutionAudioVellumValue)
	if err := json.Unmarshal(data, &valueExecutionAudioVellumValue); err == nil {
		e.ExecutionAudioVellumValue = valueExecutionAudioVellumValue
		return nil
	}
	valueExecutionVideoVellumValue := new(ExecutionVideoVellumValue)
	if err := json.Unmarshal(data, &valueExecutionVideoVellumValue); err == nil {
		e.ExecutionVideoVellumValue = valueExecutionVideoVellumValue
		return nil
	}
	valueExecutionImageVellumValue := new(ExecutionImageVellumValue)
	if err := json.Unmarshal(data, &valueExecutionImageVellumValue); err == nil {
		e.ExecutionImageVellumValue = valueExecutionImageVellumValue
		return nil
	}
	valueExecutionDocumentVellumValue := new(ExecutionDocumentVellumValue)
	if err := json.Unmarshal(data, &valueExecutionDocumentVellumValue); err == nil {
		e.ExecutionDocumentVellumValue = valueExecutionDocumentVellumValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecutionVellumValue) MarshalJSON() ([]byte, error) {
	if e.ExecutionStringVellumValue != nil {
		return json.Marshal(e.ExecutionStringVellumValue)
	}
	if e.ExecutionNumberVellumValue != nil {
		return json.Marshal(e.ExecutionNumberVellumValue)
	}
	if e.ExecutionJsonVellumValue != nil {
		return json.Marshal(e.ExecutionJsonVellumValue)
	}
	if e.ExecutionChatHistoryVellumValue != nil {
		return json.Marshal(e.ExecutionChatHistoryVellumValue)
	}
	if e.ExecutionSearchResultsVellumValue != nil {
		return json.Marshal(e.ExecutionSearchResultsVellumValue)
	}
	if e.ExecutionErrorVellumValue != nil {
		return json.Marshal(e.ExecutionErrorVellumValue)
	}
	if e.ExecutionArrayVellumValue != nil {
		return json.Marshal(e.ExecutionArrayVellumValue)
	}
	if e.ExecutionFunctionCallVellumValue != nil {
		return json.Marshal(e.ExecutionFunctionCallVellumValue)
	}
	if e.ExecutionThinkingVellumValue != nil {
		return json.Marshal(e.ExecutionThinkingVellumValue)
	}
	if e.ExecutionAudioVellumValue != nil {
		return json.Marshal(e.ExecutionAudioVellumValue)
	}
	if e.ExecutionVideoVellumValue != nil {
		return json.Marshal(e.ExecutionVideoVellumValue)
	}
	if e.ExecutionImageVellumValue != nil {
		return json.Marshal(e.ExecutionImageVellumValue)
	}
	if e.ExecutionDocumentVellumValue != nil {
		return json.Marshal(e.ExecutionDocumentVellumValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutionVellumValueVisitor interface {
	VisitExecutionStringVellumValue(*ExecutionStringVellumValue) error
	VisitExecutionNumberVellumValue(*ExecutionNumberVellumValue) error
	VisitExecutionJsonVellumValue(*ExecutionJsonVellumValue) error
	VisitExecutionChatHistoryVellumValue(*ExecutionChatHistoryVellumValue) error
	VisitExecutionSearchResultsVellumValue(*ExecutionSearchResultsVellumValue) error
	VisitExecutionErrorVellumValue(*ExecutionErrorVellumValue) error
	VisitExecutionArrayVellumValue(*ExecutionArrayVellumValue) error
	VisitExecutionFunctionCallVellumValue(*ExecutionFunctionCallVellumValue) error
	VisitExecutionThinkingVellumValue(*ExecutionThinkingVellumValue) error
	VisitExecutionAudioVellumValue(*ExecutionAudioVellumValue) error
	VisitExecutionVideoVellumValue(*ExecutionVideoVellumValue) error
	VisitExecutionImageVellumValue(*ExecutionImageVellumValue) error
	VisitExecutionDocumentVellumValue(*ExecutionDocumentVellumValue) error
}

func (e *ExecutionVellumValue) Accept(visitor ExecutionVellumValueVisitor) error {
	if e.ExecutionStringVellumValue != nil {
		return visitor.VisitExecutionStringVellumValue(e.ExecutionStringVellumValue)
	}
	if e.ExecutionNumberVellumValue != nil {
		return visitor.VisitExecutionNumberVellumValue(e.ExecutionNumberVellumValue)
	}
	if e.ExecutionJsonVellumValue != nil {
		return visitor.VisitExecutionJsonVellumValue(e.ExecutionJsonVellumValue)
	}
	if e.ExecutionChatHistoryVellumValue != nil {
		return visitor.VisitExecutionChatHistoryVellumValue(e.ExecutionChatHistoryVellumValue)
	}
	if e.ExecutionSearchResultsVellumValue != nil {
		return visitor.VisitExecutionSearchResultsVellumValue(e.ExecutionSearchResultsVellumValue)
	}
	if e.ExecutionErrorVellumValue != nil {
		return visitor.VisitExecutionErrorVellumValue(e.ExecutionErrorVellumValue)
	}
	if e.ExecutionArrayVellumValue != nil {
		return visitor.VisitExecutionArrayVellumValue(e.ExecutionArrayVellumValue)
	}
	if e.ExecutionFunctionCallVellumValue != nil {
		return visitor.VisitExecutionFunctionCallVellumValue(e.ExecutionFunctionCallVellumValue)
	}
	if e.ExecutionThinkingVellumValue != nil {
		return visitor.VisitExecutionThinkingVellumValue(e.ExecutionThinkingVellumValue)
	}
	if e.ExecutionAudioVellumValue != nil {
		return visitor.VisitExecutionAudioVellumValue(e.ExecutionAudioVellumValue)
	}
	if e.ExecutionVideoVellumValue != nil {
		return visitor.VisitExecutionVideoVellumValue(e.ExecutionVideoVellumValue)
	}
	if e.ExecutionImageVellumValue != nil {
		return visitor.VisitExecutionImageVellumValue(e.ExecutionImageVellumValue)
	}
	if e.ExecutionDocumentVellumValue != nil {
		return visitor.VisitExecutionDocumentVellumValue(e.ExecutionDocumentVellumValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// A base Vellum primitive value representing a video.
type ExecutionVideoVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string       `json:"id" url:"id"`
	Name  string       `json:"name" url:"name"`
	Value *VellumVideo `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionVideoVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionVideoVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionVideoVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionVideoVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionVideoVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "VIDEO", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionVideoVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionVideoVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionVideoVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalInputDescriptor struct {
	Types       []*CodeResourceDefinition `json:"types" url:"types"`
	InputsClass *CodeResourceDefinition   `json:"inputs_class,omitempty" url:"inputs_class,omitempty"`
	Instance    interface{}               `json:"instance,omitempty" url:"instance,omitempty"`
	Name        string                    `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalInputDescriptor) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalInputDescriptor) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalInputDescriptor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalInputDescriptor(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalInputDescriptor) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalParentContext struct {
	Parent *ParentContext `json:"parent,omitempty" url:"parent,omitempty"`
	Links  []*SpanLink    `json:"links,omitempty" url:"links,omitempty"`
	SpanId string         `json:"span_id" url:"span_id"`
	type_  string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalParentContext) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalParentContext) Type() string {
	return e.type_
}

func (e *ExternalParentContext) UnmarshalJSON(data []byte) error {
	type embed ExternalParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExternalParentContext(unmarshaler.embed)
	if unmarshaler.Type != "EXTERNAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "EXTERNAL", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalParentContext) MarshalJSON() ([]byte, error) {
	type embed ExternalParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "EXTERNAL",
	}
	return json.Marshal(marshaler)
}

func (e *ExternalParentContext) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// FastEmbed vectorizer for BAAI/bge-small-en-v1.5.
type FastEmbedVectorizerBaaiBgeSmallEnV15 struct {
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FastEmbedVectorizerBaaiBgeSmallEnV15) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FastEmbedVectorizerBaaiBgeSmallEnV15) ModelName() string {
	return f.modelName
}

func (f *FastEmbedVectorizerBaaiBgeSmallEnV15) UnmarshalJSON(data []byte) error {
	type embed FastEmbedVectorizerBaaiBgeSmallEnV15
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FastEmbedVectorizerBaaiBgeSmallEnV15(unmarshaler.embed)
	if unmarshaler.ModelName != "BAAI/bge-small-en-v1.5" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "BAAI/bge-small-en-v1.5", unmarshaler.ModelName)
	}
	f.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *f, "model_name")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FastEmbedVectorizerBaaiBgeSmallEnV15) MarshalJSON() ([]byte, error) {
	type embed FastEmbedVectorizerBaaiBgeSmallEnV15
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*f),
		ModelName: "BAAI/bge-small-en-v1.5",
	}
	return json.Marshal(marshaler)
}

func (f *FastEmbedVectorizerBaaiBgeSmallEnV15) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// * `LENGTH` - LENGTH
// * `STOP` - STOP
// * `UNKNOWN` - UNKNOWN
type FinishReasonEnum string

const (
	FinishReasonEnumLength  FinishReasonEnum = "LENGTH"
	FinishReasonEnumStop    FinishReasonEnum = "STOP"
	FinishReasonEnumUnknown FinishReasonEnum = "UNKNOWN"
)

func NewFinishReasonEnumFromString(s string) (FinishReasonEnum, error) {
	switch s {
	case "LENGTH":
		return FinishReasonEnumLength, nil
	case "STOP":
		return FinishReasonEnumStop, nil
	case "UNKNOWN":
		return FinishReasonEnumUnknown, nil
	}
	var t FinishReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FinishReasonEnum) Ptr() *FinishReasonEnum {
	return &f
}

// The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.
type FulfilledExecutePromptEvent struct {
	Outputs     []*PromptOutput               `json:"outputs" url:"outputs"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *FulfilledPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecutePromptEvent) State() string {
	return f.state
}

func (f *FulfilledExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecutePromptEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the model containing all of the resolved values generated by the prompt.
type FulfilledExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string          `json:"execution_id" url:"execution_id"`
	Outputs     []*PromptOutput `json:"outputs" url:"outputs"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecutePromptResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecutePromptResponse) State() string {
	return f.state
}

func (f *FulfilledExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecutePromptResponse
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecutePromptResponse(unmarshaler.embed)
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptResponse) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecutePromptResponse
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecutePromptResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the Workflow execution containing the produced outputs.
type FulfilledExecuteWorkflowWorkflowResultEvent struct {
	Id      string            `json:"id" url:"id"`
	Ts      time.Time         `json:"ts" url:"ts"`
	Outputs []*WorkflowOutput `json:"outputs" url:"outputs"`
	state   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) State() string {
	return f.state
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.Time()
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
		Ts:    core.NewDateTime(f.Ts),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type FulfilledPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	Usage        *MlModelUsage     `json:"usage,omitempty" url:"usage,omitempty"`
	Cost         *Price            `json:"cost,omitempty" url:"cost,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledPromptExecutionMeta) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// An event that indicates that the node has fulfilled its execution.
type FulfilledWorkflowNodeResultEvent struct {
	Id                string                     `json:"id" url:"id"`
	NodeId            string                     `json:"node_id" url:"node_id"`
	NodeResultId      string                     `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                 `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData    `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                    `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	OutputValues      []*NodeOutputCompiledValue `json:"output_values" url:"output_values"`
	Mocked            *bool                      `json:"mocked,omitempty" url:"mocked,omitempty"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledWorkflowNodeResultEvent) State() string {
	return f.state
}

func (f *FulfilledWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledWorkflowNodeResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
		Ts:    core.NewOptionalDateTime(f.Ts),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledWorkflowNodeResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCall struct {
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`
	Name      string                 `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCall) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCall(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCall) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContent struct {
	Value *FunctionCallChatMessageContentValue `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContent) Type() string {
	return f.type_
}

func (f *FunctionCallChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed FunctionCallChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed FunctionCallChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallChatMessageContent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContentRequest struct {
	Value *FunctionCallChatMessageContentValueRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentRequest) Type() string {
	return f.type_
}

func (f *FunctionCallChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed FunctionCallChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed FunctionCallChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallChatMessageContentRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValue struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentValue) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValueRequest struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentValueRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValueRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A user input representing a Vellum Function Call value
type FunctionCallInput struct {
	// The variable's name
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallInput) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallInput) Type() string {
	return f.type_
}

func (f *FunctionCallInput) UnmarshalJSON(data []byte) error {
	type embed FunctionCallInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallInput(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallInput) MarshalJSON() ([]byte, error) {
	type embed FunctionCallInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallInput) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A block that represents a function call in a prompt template.
type FunctionCallPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Id          *string                     `json:"id,omitempty" url:"id,omitempty"`
	Name        string                      `json:"name" url:"name"`
	Arguments   map[string]interface{}      `json:"arguments" url:"arguments"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallPromptBlock) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallPromptBlock) BlockType() string {
	return f.blockType
}

func (f *FunctionCallPromptBlock) UnmarshalJSON(data []byte) error {
	type embed FunctionCallPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.BlockType)
	}
	f.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *f, "block_type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallPromptBlock) MarshalJSON() ([]byte, error) {
	type embed FunctionCallPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*f),
		BlockType: "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallPromptBlock) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallRequest struct {
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`
	Name      string                 `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A value representing a Function Call.
type FunctionCallVellumValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVellumValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVellumValue) Type() string {
	return f.type_
}

func (f *FunctionCallVellumValue) UnmarshalJSON(data []byte) error {
	type embed FunctionCallVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVellumValue) MarshalJSON() ([]byte, error) {
	type embed FunctionCallVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallVellumValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A value representing a Function Call.
type FunctionCallVellumValueRequest struct {
	Value *FunctionCallRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVellumValueRequest) Type() string {
	return f.type_
}

func (f *FunctionCallVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed FunctionCallVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed FunctionCallVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallVellumValueRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The definition of a Function (aka "Tool Call") that a Prompt/Model has access to.
type FunctionDefinition struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	// The name identifying the function.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// A description to help guide the model when to invoke this function.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// An OpenAPI specification of parameters that are supported by this function.
	Parameters map[string]interface{} `json:"parameters,omitempty" url:"parameters,omitempty"`
	// Optional user defined input mappings for this function.
	Inputs map[string]interface{} `json:"inputs,omitempty" url:"inputs,omitempty"`
	// Set this option to true to force the model to return a function call of this function.
	Forced *bool `json:"forced,omitempty" url:"forced,omitempty"`
	// Set this option to use strict schema decoding when available.
	Strict *bool `json:"strict,omitempty" url:"strict,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionDefinition) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionDefinition) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GenerateOptionsRequest struct {
	// Which logprobs to include, if any. Defaults to NONE.
	//
	// * `ALL` - ALL
	// * `NONE` - NONE
	Logprobs *LogprobsEnum `json:"logprobs,omitempty" url:"logprobs,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateOptionsRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateOptionsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateOptionsRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateRequest struct {
	// Key/value pairs for each template variable defined in the deployment's prompt.
	InputValues map[string]interface{} `json:"input_values" url:"input_values"`
	// Optionally provide a list of chat messages that'll be used in place of the special chat_history variable, if included in the prompt.
	ChatHistory []*ChatMessageRequest `json:"chat_history,omitempty" url:"chat_history,omitempty"`
	// Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResponse struct {
	// The results of each generation request.
	Results []*GenerateResult `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResult struct {
	// An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.
	Data *GenerateResultData `json:"data,omitempty" url:"data,omitempty"`
	// An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.
	Error *GenerateResultError `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResult) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultData struct {
	// The generated completions. This will generally be a list of length one.
	Completions []*EnrichedNormalizedCompletion `json:"completions" url:"completions"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResultData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultError struct {
	// The error message returned by the LLM provider.
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResultError) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResultError) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultError) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResponse struct {
	Delta *GenerateStreamResult `json:"delta" url:"delta"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResult struct {
	RequestIndex int                       `json:"request_index" url:"request_index"`
	Data         *GenerateStreamResultData `json:"data,omitempty" url:"data,omitempty"`
	Error        *GenerateResultError      `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResult) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResultData struct {
	CompletionIndex int                           `json:"completion_index" url:"completion_index"`
	Completion      *EnrichedNormalizedCompletion `json:"completion" url:"completion"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResultData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerConfig struct {
	ProjectId string `json:"project_id" url:"project_id"`
	Region    string `json:"region" url:"region"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler GoogleVertexAiVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerConfig) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerGeminiEmbedding001 struct {
	Config    *GoogleVertexAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerGeminiEmbedding001) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerGeminiEmbedding001) ModelName() string {
	return g.modelName
}

func (g *GoogleVertexAiVectorizerGeminiEmbedding001) UnmarshalJSON(data []byte) error {
	type embed GoogleVertexAiVectorizerGeminiEmbedding001
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerGeminiEmbedding001(unmarshaler.embed)
	if unmarshaler.ModelName != "gemini-embedding-001" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", g, "gemini-embedding-001", unmarshaler.ModelName)
	}
	g.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *g, "model_name")
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerGeminiEmbedding001) MarshalJSON() ([]byte, error) {
	type embed GoogleVertexAiVectorizerGeminiEmbedding001
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*g),
		ModelName: "gemini-embedding-001",
	}
	return json.Marshal(marshaler)
}

func (g *GoogleVertexAiVectorizerGeminiEmbedding001) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerTextEmbedding004 struct {
	Config    *GoogleVertexAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) ModelName() string {
	return g.modelName
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) UnmarshalJSON(data []byte) error {
	type embed GoogleVertexAiVectorizerTextEmbedding004
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerTextEmbedding004(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-004" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", g, "text-embedding-004", unmarshaler.ModelName)
	}
	g.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *g, "model_name")
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) MarshalJSON() ([]byte, error) {
	type embed GoogleVertexAiVectorizerTextEmbedding004
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*g),
		ModelName: "text-embedding-004",
	}
	return json.Marshal(marshaler)
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerTextMultilingualEmbedding002 struct {
	Config    *GoogleVertexAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) ModelName() string {
	return g.modelName
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) UnmarshalJSON(data []byte) error {
	type embed GoogleVertexAiVectorizerTextMultilingualEmbedding002
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerTextMultilingualEmbedding002(unmarshaler.embed)
	if unmarshaler.ModelName != "text-multilingual-embedding-002" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", g, "text-multilingual-embedding-002", unmarshaler.ModelName)
	}
	g.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *g, "model_name")
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) MarshalJSON() ([]byte, error) {
	type embed GoogleVertexAiVectorizerTextMultilingualEmbedding002
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*g),
		ModelName: "text-multilingual-embedding-002",
	}
	return json.Marshal(marshaler)
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Vectorizer for hkunlp/instructor-xl.
type HkunlpInstructorXlVectorizer struct {
	Config    *InstructorVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HkunlpInstructorXlVectorizer) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HkunlpInstructorXlVectorizer) ModelName() string {
	return h.modelName
}

func (h *HkunlpInstructorXlVectorizer) UnmarshalJSON(data []byte) error {
	type embed HkunlpInstructorXlVectorizer
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*h),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*h = HkunlpInstructorXlVectorizer(unmarshaler.embed)
	if unmarshaler.ModelName != "hkunlp/instructor-xl" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", h, "hkunlp/instructor-xl", unmarshaler.ModelName)
	}
	h.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *h, "model_name")
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HkunlpInstructorXlVectorizer) MarshalJSON() ([]byte, error) {
	type embed HkunlpInstructorXlVectorizer
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*h),
		ModelName: "hkunlp/instructor-xl",
	}
	return json.Marshal(marshaler)
}

func (h *HkunlpInstructorXlVectorizer) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// An image value that is used in a chat message.
type ImageChatMessageContent struct {
	Value *VellumImage `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageChatMessageContent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageChatMessageContent) Type() string {
	return i.type_
}

func (i *ImageChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed ImageChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed ImageChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageChatMessageContent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An image value that is used in a chat message.
type ImageChatMessageContentRequest struct {
	Value *VellumImageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageChatMessageContentRequest) Type() string {
	return i.type_
}

func (i *ImageChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed ImageChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed ImageChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageChatMessageContentRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A user input representing a Vellum Image value
type ImageInput struct {
	// The variable's name
	Name  string       `json:"name" url:"name"`
	Value *VellumImage `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageInput) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageInput) Type() string {
	return i.type_
}

func (i *ImageInput) UnmarshalJSON(data []byte) error {
	type embed ImageInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageInput(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageInput) MarshalJSON() ([]byte, error) {
	type embed ImageInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageInput) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A user input representing a Vellum Image value
type ImageInputRequest struct {
	// The variable's name
	Name  string              `json:"name" url:"name"`
	Value *VellumImageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageInputRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageInputRequest) Type() string {
	return i.type_
}

func (i *ImageInputRequest) UnmarshalJSON(data []byte) error {
	type embed ImageInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageInputRequest) MarshalJSON() ([]byte, error) {
	type embed ImageInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageInputRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A block that represents an image in a prompt template.
type ImagePromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Src         string                      `json:"src" url:"src"`
	Metadata    map[string]interface{}      `json:"metadata,omitempty" url:"metadata,omitempty"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImagePromptBlock) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImagePromptBlock) BlockType() string {
	return i.blockType
}

func (i *ImagePromptBlock) UnmarshalJSON(data []byte) error {
	type embed ImagePromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImagePromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.BlockType)
	}
	i.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *i, "block_type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImagePromptBlock) MarshalJSON() ([]byte, error) {
	type embed ImagePromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*i),
		BlockType: "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImagePromptBlock) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVellumValue struct {
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVellumValue) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVellumValue) Type() string {
	return i.type_
}

func (i *ImageVellumValue) UnmarshalJSON(data []byte) error {
	type embed ImageVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVellumValue) MarshalJSON() ([]byte, error) {
	type embed ImageVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageVellumValue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVellumValueRequest struct {
	Value *VellumImageRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVellumValueRequest) Type() string {
	return i.type_
}

func (i *ImageVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ImageVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ImageVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageVellumValueRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndexingConfigVectorizer struct {
	OpenAiVectorizerTextEmbedding3Small                      *OpenAiVectorizerTextEmbedding3Small
	OpenAiVectorizerTextEmbedding3Large                      *OpenAiVectorizerTextEmbedding3Large
	OpenAiVectorizerTextEmbeddingAda002                      *OpenAiVectorizerTextEmbeddingAda002
	BasicVectorizerIntfloatMultilingualE5Large               *BasicVectorizerIntfloatMultilingualE5Large
	BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	HkunlpInstructorXlVectorizer                             *HkunlpInstructorXlVectorizer
	GoogleVertexAiVectorizerTextEmbedding004                 *GoogleVertexAiVectorizerTextEmbedding004
	GoogleVertexAiVectorizerTextMultilingualEmbedding002     *GoogleVertexAiVectorizerTextMultilingualEmbedding002
	GoogleVertexAiVectorizerGeminiEmbedding001               *GoogleVertexAiVectorizerGeminiEmbedding001
	FastEmbedVectorizerBaaiBgeSmallEnV15                     *FastEmbedVectorizerBaaiBgeSmallEnV15
	PrivateVectorizer                                        *PrivateVectorizer
}

func (i *IndexingConfigVectorizer) UnmarshalJSON(data []byte) error {
	valueOpenAiVectorizerTextEmbedding3Small := new(OpenAiVectorizerTextEmbedding3Small)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbedding3Small); err == nil {
		i.OpenAiVectorizerTextEmbedding3Small = valueOpenAiVectorizerTextEmbedding3Small
		return nil
	}
	valueOpenAiVectorizerTextEmbedding3Large := new(OpenAiVectorizerTextEmbedding3Large)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbedding3Large); err == nil {
		i.OpenAiVectorizerTextEmbedding3Large = valueOpenAiVectorizerTextEmbedding3Large
		return nil
	}
	valueOpenAiVectorizerTextEmbeddingAda002 := new(OpenAiVectorizerTextEmbeddingAda002)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbeddingAda002); err == nil {
		i.OpenAiVectorizerTextEmbeddingAda002 = valueOpenAiVectorizerTextEmbeddingAda002
		return nil
	}
	valueBasicVectorizerIntfloatMultilingualE5Large := new(BasicVectorizerIntfloatMultilingualE5Large)
	if err := json.Unmarshal(data, &valueBasicVectorizerIntfloatMultilingualE5Large); err == nil {
		i.BasicVectorizerIntfloatMultilingualE5Large = valueBasicVectorizerIntfloatMultilingualE5Large
		return nil
	}
	valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1)
	if err := json.Unmarshal(data, &valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1); err == nil {
		i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 = valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
		return nil
	}
	valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1)
	if err := json.Unmarshal(data, &valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1); err == nil {
		i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 = valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
		return nil
	}
	valueHkunlpInstructorXlVectorizer := new(HkunlpInstructorXlVectorizer)
	if err := json.Unmarshal(data, &valueHkunlpInstructorXlVectorizer); err == nil {
		i.HkunlpInstructorXlVectorizer = valueHkunlpInstructorXlVectorizer
		return nil
	}
	valueGoogleVertexAiVectorizerTextEmbedding004 := new(GoogleVertexAiVectorizerTextEmbedding004)
	if err := json.Unmarshal(data, &valueGoogleVertexAiVectorizerTextEmbedding004); err == nil {
		i.GoogleVertexAiVectorizerTextEmbedding004 = valueGoogleVertexAiVectorizerTextEmbedding004
		return nil
	}
	valueGoogleVertexAiVectorizerTextMultilingualEmbedding002 := new(GoogleVertexAiVectorizerTextMultilingualEmbedding002)
	if err := json.Unmarshal(data, &valueGoogleVertexAiVectorizerTextMultilingualEmbedding002); err == nil {
		i.GoogleVertexAiVectorizerTextMultilingualEmbedding002 = valueGoogleVertexAiVectorizerTextMultilingualEmbedding002
		return nil
	}
	valueGoogleVertexAiVectorizerGeminiEmbedding001 := new(GoogleVertexAiVectorizerGeminiEmbedding001)
	if err := json.Unmarshal(data, &valueGoogleVertexAiVectorizerGeminiEmbedding001); err == nil {
		i.GoogleVertexAiVectorizerGeminiEmbedding001 = valueGoogleVertexAiVectorizerGeminiEmbedding001
		return nil
	}
	valueFastEmbedVectorizerBaaiBgeSmallEnV15 := new(FastEmbedVectorizerBaaiBgeSmallEnV15)
	if err := json.Unmarshal(data, &valueFastEmbedVectorizerBaaiBgeSmallEnV15); err == nil {
		i.FastEmbedVectorizerBaaiBgeSmallEnV15 = valueFastEmbedVectorizerBaaiBgeSmallEnV15
		return nil
	}
	valuePrivateVectorizer := new(PrivateVectorizer)
	if err := json.Unmarshal(data, &valuePrivateVectorizer); err == nil {
		i.PrivateVectorizer = valuePrivateVectorizer
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IndexingConfigVectorizer) MarshalJSON() ([]byte, error) {
	if i.OpenAiVectorizerTextEmbedding3Small != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbedding3Small)
	}
	if i.OpenAiVectorizerTextEmbedding3Large != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbedding3Large)
	}
	if i.OpenAiVectorizerTextEmbeddingAda002 != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbeddingAda002)
	}
	if i.BasicVectorizerIntfloatMultilingualE5Large != nil {
		return json.Marshal(i.BasicVectorizerIntfloatMultilingualE5Large)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return json.Marshal(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return json.Marshal(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1)
	}
	if i.HkunlpInstructorXlVectorizer != nil {
		return json.Marshal(i.HkunlpInstructorXlVectorizer)
	}
	if i.GoogleVertexAiVectorizerTextEmbedding004 != nil {
		return json.Marshal(i.GoogleVertexAiVectorizerTextEmbedding004)
	}
	if i.GoogleVertexAiVectorizerTextMultilingualEmbedding002 != nil {
		return json.Marshal(i.GoogleVertexAiVectorizerTextMultilingualEmbedding002)
	}
	if i.GoogleVertexAiVectorizerGeminiEmbedding001 != nil {
		return json.Marshal(i.GoogleVertexAiVectorizerGeminiEmbedding001)
	}
	if i.FastEmbedVectorizerBaaiBgeSmallEnV15 != nil {
		return json.Marshal(i.FastEmbedVectorizerBaaiBgeSmallEnV15)
	}
	if i.PrivateVectorizer != nil {
		return json.Marshal(i.PrivateVectorizer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IndexingConfigVectorizerVisitor interface {
	VisitOpenAiVectorizerTextEmbedding3Small(*OpenAiVectorizerTextEmbedding3Small) error
	VisitOpenAiVectorizerTextEmbedding3Large(*OpenAiVectorizerTextEmbedding3Large) error
	VisitOpenAiVectorizerTextEmbeddingAda002(*OpenAiVectorizerTextEmbeddingAda002) error
	VisitBasicVectorizerIntfloatMultilingualE5Large(*BasicVectorizerIntfloatMultilingualE5Large) error
	VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) error
	VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) error
	VisitHkunlpInstructorXlVectorizer(*HkunlpInstructorXlVectorizer) error
	VisitGoogleVertexAiVectorizerTextEmbedding004(*GoogleVertexAiVectorizerTextEmbedding004) error
	VisitGoogleVertexAiVectorizerTextMultilingualEmbedding002(*GoogleVertexAiVectorizerTextMultilingualEmbedding002) error
	VisitGoogleVertexAiVectorizerGeminiEmbedding001(*GoogleVertexAiVectorizerGeminiEmbedding001) error
	VisitFastEmbedVectorizerBaaiBgeSmallEnV15(*FastEmbedVectorizerBaaiBgeSmallEnV15) error
	VisitPrivateVectorizer(*PrivateVectorizer) error
}

func (i *IndexingConfigVectorizer) Accept(visitor IndexingConfigVectorizerVisitor) error {
	if i.OpenAiVectorizerTextEmbedding3Small != nil {
		return visitor.VisitOpenAiVectorizerTextEmbedding3Small(i.OpenAiVectorizerTextEmbedding3Small)
	}
	if i.OpenAiVectorizerTextEmbedding3Large != nil {
		return visitor.VisitOpenAiVectorizerTextEmbedding3Large(i.OpenAiVectorizerTextEmbedding3Large)
	}
	if i.OpenAiVectorizerTextEmbeddingAda002 != nil {
		return visitor.VisitOpenAiVectorizerTextEmbeddingAda002(i.OpenAiVectorizerTextEmbeddingAda002)
	}
	if i.BasicVectorizerIntfloatMultilingualE5Large != nil {
		return visitor.VisitBasicVectorizerIntfloatMultilingualE5Large(i.BasicVectorizerIntfloatMultilingualE5Large)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return visitor.VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return visitor.VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1)
	}
	if i.HkunlpInstructorXlVectorizer != nil {
		return visitor.VisitHkunlpInstructorXlVectorizer(i.HkunlpInstructorXlVectorizer)
	}
	if i.GoogleVertexAiVectorizerTextEmbedding004 != nil {
		return visitor.VisitGoogleVertexAiVectorizerTextEmbedding004(i.GoogleVertexAiVectorizerTextEmbedding004)
	}
	if i.GoogleVertexAiVectorizerTextMultilingualEmbedding002 != nil {
		return visitor.VisitGoogleVertexAiVectorizerTextMultilingualEmbedding002(i.GoogleVertexAiVectorizerTextMultilingualEmbedding002)
	}
	if i.GoogleVertexAiVectorizerGeminiEmbedding001 != nil {
		return visitor.VisitGoogleVertexAiVectorizerGeminiEmbedding001(i.GoogleVertexAiVectorizerGeminiEmbedding001)
	}
	if i.FastEmbedVectorizerBaaiBgeSmallEnV15 != nil {
		return visitor.VisitFastEmbedVectorizerBaaiBgeSmallEnV15(i.FastEmbedVectorizerBaaiBgeSmallEnV15)
	}
	if i.PrivateVectorizer != nil {
		return visitor.VisitPrivateVectorizer(i.PrivateVectorizer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// The initial data returned indicating that the response from the model has returned and begun streaming.
type InitiatedExecutePromptEvent struct {
	Meta        *InitiatedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedExecutePromptEvent) State() string {
	return i.state
}

func (i *InitiatedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed InitiatedExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InitiatedExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "INITIATED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "INITIATED", unmarshaler.State)
	}
	i.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *i, "state")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed InitiatedExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*i),
		State: "INITIATED",
	}
	return json.Marshal(marshaler)
}

func (i *InitiatedExecutePromptEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type InitiatedPromptExecutionMeta struct {
	ModelName            *string `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int    `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedPromptExecutionMeta) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An event that indicates that the node has initiated its execution.
type InitiatedWorkflowNodeResultEvent struct {
	Id                string                            `json:"id" url:"id"`
	NodeId            string                            `json:"node_id" url:"node_id"`
	NodeResultId      string                            `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                        `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData           `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                           `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	InputValues       []*NodeInputVariableCompiledValue `json:"input_values,omitempty" url:"input_values,omitempty"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedWorkflowNodeResultEvent) State() string {
	return i.state
}

func (i *InitiatedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed InitiatedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InitiatedWorkflowNodeResultEvent(unmarshaler.embed)
	i.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "INITIATED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "INITIATED", unmarshaler.State)
	}
	i.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *i, "state")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed InitiatedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*i),
		Ts:    core.NewOptionalDateTime(i.Ts),
		State: "INITIATED",
	}
	return json.Marshal(marshaler)
}

func (i *InitiatedWorkflowNodeResultEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Configuration for using an Instructor vectorizer.
type InstructorVectorizerConfig struct {
	InstructionDomain           string `json:"instruction_domain" url:"instruction_domain"`
	InstructionQueryTextType    string `json:"instruction_query_text_type" url:"instruction_query_text_type"`
	InstructionDocumentTextType string `json:"instruction_document_text_type" url:"instruction_document_text_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InstructorVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InstructorVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler InstructorVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InstructorVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InstructorVectorizerConfig) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// * `SLACK` - Slack
// * `NOTION` - Notion
// * `GOOGLE` - Google
// * `CALENDLY` - Calendly
// * `HUBSPOT` - Hubspot
// * `LINEAR` - Linear
// * `GITHUB` - Github
// * `GOOGLE_SHEETS` - Google Sheets
// * `GOOGLE_CALENDAR` - Google Calendar
// * `GOOGLE_DRIVE` - Google Drive
// * `GMAIL` - Gmail
type IntegrationName string

const (
	IntegrationNameSlack          IntegrationName = "SLACK"
	IntegrationNameNotion         IntegrationName = "NOTION"
	IntegrationNameGoogle         IntegrationName = "GOOGLE"
	IntegrationNameCalendly       IntegrationName = "CALENDLY"
	IntegrationNameHubspot        IntegrationName = "HUBSPOT"
	IntegrationNameLinear         IntegrationName = "LINEAR"
	IntegrationNameGithub         IntegrationName = "GITHUB"
	IntegrationNameGoogleSheets   IntegrationName = "GOOGLE_SHEETS"
	IntegrationNameGoogleCalendar IntegrationName = "GOOGLE_CALENDAR"
	IntegrationNameGoogleDrive    IntegrationName = "GOOGLE_DRIVE"
	IntegrationNameGmail          IntegrationName = "GMAIL"
)

func NewIntegrationNameFromString(s string) (IntegrationName, error) {
	switch s {
	case "SLACK":
		return IntegrationNameSlack, nil
	case "NOTION":
		return IntegrationNameNotion, nil
	case "GOOGLE":
		return IntegrationNameGoogle, nil
	case "CALENDLY":
		return IntegrationNameCalendly, nil
	case "HUBSPOT":
		return IntegrationNameHubspot, nil
	case "LINEAR":
		return IntegrationNameLinear, nil
	case "GITHUB":
		return IntegrationNameGithub, nil
	case "GOOGLE_SHEETS":
		return IntegrationNameGoogleSheets, nil
	case "GOOGLE_CALENDAR":
		return IntegrationNameGoogleCalendar, nil
	case "GOOGLE_DRIVE":
		return IntegrationNameGoogleDrive, nil
	case "GMAIL":
		return IntegrationNameGmail, nil
	}
	var t IntegrationName
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntegrationName) Ptr() *IntegrationName {
	return &i
}

// * `COMPOSIO` - Composio
type IntegrationProvider = string

type InvokedPort struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InvokedPort) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvokedPort) UnmarshalJSON(data []byte) error {
	type unmarshaler InvokedPort
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvokedPort(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvokedPort) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// * `INITIATED` - INITIATED
// * `FULFILLED` - FULFILLED
// * `REJECTED` - REJECTED
type IterationStateEnum string

const (
	IterationStateEnumInitiated IterationStateEnum = "INITIATED"
	IterationStateEnumFulfilled IterationStateEnum = "FULFILLED"
	IterationStateEnumRejected  IterationStateEnum = "REJECTED"
)

func NewIterationStateEnumFromString(s string) (IterationStateEnum, error) {
	switch s {
	case "INITIATED":
		return IterationStateEnumInitiated, nil
	case "FULFILLED":
		return IterationStateEnumFulfilled, nil
	case "REJECTED":
		return IterationStateEnumRejected, nil
	}
	var t IterationStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IterationStateEnum) Ptr() *IterationStateEnum {
	return &i
}

// A block of Jinja template code that is used to generate a prompt
type JinjaPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Template    string                      `json:"template" url:"template"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JinjaPromptBlock) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JinjaPromptBlock) BlockType() string {
	return j.blockType
}

func (j *JinjaPromptBlock) UnmarshalJSON(data []byte) error {
	type embed JinjaPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JinjaPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "JINJA" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JINJA", unmarshaler.BlockType)
	}
	j.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *j, "block_type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JinjaPromptBlock) MarshalJSON() ([]byte, error) {
	type embed JinjaPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*j),
		BlockType: "JINJA",
	}
	return json.Marshal(marshaler)
}

func (j *JinjaPromptBlock) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A user input representing a JSON object
type JsonInput struct {
	// The variable's name
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonInput) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonInput) Type() string {
	return j.type_
}

func (j *JsonInput) UnmarshalJSON(data []byte) error {
	type embed JsonInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonInput(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonInput) MarshalJSON() ([]byte, error) {
	type embed JsonInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonInput) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A user input representing a JSON object
type JsonInputRequest struct {
	// The variable's name
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonInputRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonInputRequest) Type() string {
	return j.type_
}

func (j *JsonInputRequest) UnmarshalJSON(data []byte) error {
	type embed JsonInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonInputRequest) MarshalJSON() ([]byte, error) {
	type embed JsonInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonInputRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A value representing a JSON object.
type JsonVellumValue struct {
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVellumValue) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVellumValue) Type() string {
	return j.type_
}

func (j *JsonVellumValue) UnmarshalJSON(data []byte) error {
	type embed JsonVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVellumValue) MarshalJSON() ([]byte, error) {
	type embed JsonVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonVellumValue) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A value representing a JSON object.
type JsonVellumValueRequest struct {
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVellumValueRequest) Type() string {
	return j.type_
}

func (j *JsonVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed JsonVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed JsonVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonVellumValueRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// * `=` - EQUALS
// * `!=` - DOES_NOT_EQUAL
// * `<` - LESS_THAN
// * `>` - GREATER_THAN
// * `<=` - LESS_THAN_OR_EQUAL_TO
// * `>=` - GREATER_THAN_OR_EQUAL_TO
// * `contains` - CONTAINS
// * `beginsWith` - BEGINS_WITH
// * `endsWith` - ENDS_WITH
// * `doesNotContain` - DOES_NOT_CONTAIN
// * `doesNotBeginWith` - DOES_NOT_BEGIN_WITH
// * `doesNotEndWith` - DOES_NOT_END_WITH
// * `null` - NULL
// * `notNull` - NOT_NULL
// * `in` - IN
// * `notIn` - NOT_IN
// * `between` - BETWEEN
// * `notBetween` - NOT_BETWEEN
// * `concat` - CONCAT
// * `blank` - BLANK
// * `notBlank` - NOT_BLANK
// * `coalesce` - COALESCE
// * `accessField` - ACCESS_FIELD
// * `parseJson` - PARSE_JSON
// * `and` - AND
// * `or` - OR
// * `isError` - IS_ERROR
// * `length` - LENGTH
type LogicalOperator string

const (
	// Equals
	LogicalOperatorEquals LogicalOperator = "="
	// Does not equal
	LogicalOperatorDoesNotEqual LogicalOperator = "!="
	// Less than
	LogicalOperatorLessThan LogicalOperator = "<"
	// Greater than
	LogicalOperatorGreaterThan LogicalOperator = ">"
	// Less than or equal to
	LogicalOperatorLessThanOrEqualTo LogicalOperator = "<="
	// Greater than or equal to
	LogicalOperatorGreaterThanOrEqualTo LogicalOperator = ">="
	// Contains
	LogicalOperatorContains LogicalOperator = "contains"
	// Begins with
	LogicalOperatorBeginsWith LogicalOperator = "beginsWith"
	// Ends with
	LogicalOperatorEndsWith LogicalOperator = "endsWith"
	// Does not contain
	LogicalOperatorDoesNotContain LogicalOperator = "doesNotContain"
	// Does not begin with
	LogicalOperatorDoesNotBeginWith LogicalOperator = "doesNotBeginWith"
	// Does not end with
	LogicalOperatorDoesNotEndWith LogicalOperator = "doesNotEndWith"
	// Null
	LogicalOperatorNull LogicalOperator = "null"
	// Not null
	LogicalOperatorNotNull LogicalOperator = "notNull"
	// In
	LogicalOperatorIn LogicalOperator = "in"
	// Not in
	LogicalOperatorNotIn LogicalOperator = "notIn"
	// Between
	LogicalOperatorBetween LogicalOperator = "between"
	// Not between
	LogicalOperatorNotBetween  LogicalOperator = "notBetween"
	LogicalOperatorConcat      LogicalOperator = "concat"
	LogicalOperatorBlank       LogicalOperator = "blank"
	LogicalOperatorNotBlank    LogicalOperator = "notBlank"
	LogicalOperatorCoalesce    LogicalOperator = "coalesce"
	LogicalOperatorAccessField LogicalOperator = "accessField"
	// Parse JSON
	LogicalOperatorParseJson LogicalOperator = "parseJson"
	LogicalOperatorAnd       LogicalOperator = "and"
	LogicalOperatorOr        LogicalOperator = "or"
	LogicalOperatorIsError   LogicalOperator = "isError"
	LogicalOperatorLength    LogicalOperator = "length"
)

func NewLogicalOperatorFromString(s string) (LogicalOperator, error) {
	switch s {
	case "=":
		return LogicalOperatorEquals, nil
	case "!=":
		return LogicalOperatorDoesNotEqual, nil
	case "<":
		return LogicalOperatorLessThan, nil
	case ">":
		return LogicalOperatorGreaterThan, nil
	case "<=":
		return LogicalOperatorLessThanOrEqualTo, nil
	case ">=":
		return LogicalOperatorGreaterThanOrEqualTo, nil
	case "contains":
		return LogicalOperatorContains, nil
	case "beginsWith":
		return LogicalOperatorBeginsWith, nil
	case "endsWith":
		return LogicalOperatorEndsWith, nil
	case "doesNotContain":
		return LogicalOperatorDoesNotContain, nil
	case "doesNotBeginWith":
		return LogicalOperatorDoesNotBeginWith, nil
	case "doesNotEndWith":
		return LogicalOperatorDoesNotEndWith, nil
	case "null":
		return LogicalOperatorNull, nil
	case "notNull":
		return LogicalOperatorNotNull, nil
	case "in":
		return LogicalOperatorIn, nil
	case "notIn":
		return LogicalOperatorNotIn, nil
	case "between":
		return LogicalOperatorBetween, nil
	case "notBetween":
		return LogicalOperatorNotBetween, nil
	case "concat":
		return LogicalOperatorConcat, nil
	case "blank":
		return LogicalOperatorBlank, nil
	case "notBlank":
		return LogicalOperatorNotBlank, nil
	case "coalesce":
		return LogicalOperatorCoalesce, nil
	case "accessField":
		return LogicalOperatorAccessField, nil
	case "parseJson":
		return LogicalOperatorParseJson, nil
	case "and":
		return LogicalOperatorAnd, nil
	case "or":
		return LogicalOperatorOr, nil
	case "isError":
		return LogicalOperatorIsError, nil
	case "length":
		return LogicalOperatorLength, nil
	}
	var t LogicalOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogicalOperator) Ptr() *LogicalOperator {
	return &l
}

// * `ALL` - ALL
// * `NONE` - NONE
type LogprobsEnum string

const (
	LogprobsEnumAll  LogprobsEnum = "ALL"
	LogprobsEnumNone LogprobsEnum = "NONE"
)

func NewLogprobsEnumFromString(s string) (LogprobsEnum, error) {
	switch s {
	case "ALL":
		return LogprobsEnumAll, nil
	case "NONE":
		return LogprobsEnumNone, nil
	}
	var t LogprobsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogprobsEnum) Ptr() *LogprobsEnum {
	return &l
}

// A Node Result Event emitted from a Map Node.
type MapNodeResult struct {
	Data  *MapNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MapNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MapNodeResult) Type() string {
	return m.type_
}

func (m *MapNodeResult) UnmarshalJSON(data []byte) error {
	type embed MapNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MapNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "MAP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "MAP", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *m, "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MapNodeResult) MarshalJSON() ([]byte, error) {
	type embed MapNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
		Type:  "MAP",
	}
	return json.Marshal(marshaler)
}

func (m *MapNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MapNodeResultData struct {
	ExecutionIds   []string            `json:"execution_ids" url:"execution_ids"`
	IterationState *IterationStateEnum `json:"iteration_state,omitempty" url:"iteration_state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MapNodeResultData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MapNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler MapNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MapNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MapNodeResultData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A Node Result Event emitted from a Merge Node.
type MergeNodeResult struct {
	Data  *MergeNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MergeNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MergeNodeResult) Type() string {
	return m.type_
}

func (m *MergeNodeResult) UnmarshalJSON(data []byte) error {
	type embed MergeNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MergeNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "MERGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "MERGE", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *m, "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MergeNodeResult) MarshalJSON() ([]byte, error) {
	type embed MergeNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
		Type:  "MERGE",
	}
	return json.Marshal(marshaler)
}

func (m *MergeNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MergeNodeResultData struct {
	PausedNodeData map[string]interface{} `json:"paused_node_data,omitempty" url:"paused_node_data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MergeNodeResultData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MergeNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler MergeNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MergeNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MergeNodeResultData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A deprecated pattern for filtering on metadata. Please use MetadataFilters instead.
type MetadataFilterConfigRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetadataFilterConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataFilterConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// * `and` - AND
// * `or` - OR
type MetadataFilterRuleCombinator string

const (
	MetadataFilterRuleCombinatorAnd MetadataFilterRuleCombinator = "and"
	MetadataFilterRuleCombinatorOr  MetadataFilterRuleCombinator = "or"
)

func NewMetadataFilterRuleCombinatorFromString(s string) (MetadataFilterRuleCombinator, error) {
	switch s {
	case "and":
		return MetadataFilterRuleCombinatorAnd, nil
	case "or":
		return MetadataFilterRuleCombinatorOr, nil
	}
	var t MetadataFilterRuleCombinator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetadataFilterRuleCombinator) Ptr() *MetadataFilterRuleCombinator {
	return &m
}

type MetadataFilterRuleRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetadataFilterRuleRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataFilterRuleRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterRuleRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterRuleRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterRuleRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetadataFiltersRequest struct {
	MetadataFilterConfigRequest         *MetadataFilterConfigRequest
	VellumValueLogicalExpressionRequest *VellumValueLogicalExpressionRequest
}

func (m *MetadataFiltersRequest) UnmarshalJSON(data []byte) error {
	valueMetadataFilterConfigRequest := new(MetadataFilterConfigRequest)
	if err := json.Unmarshal(data, &valueMetadataFilterConfigRequest); err == nil {
		m.MetadataFilterConfigRequest = valueMetadataFilterConfigRequest
		return nil
	}
	valueVellumValueLogicalExpressionRequest := new(VellumValueLogicalExpressionRequest)
	if err := json.Unmarshal(data, &valueVellumValueLogicalExpressionRequest); err == nil {
		m.VellumValueLogicalExpressionRequest = valueVellumValueLogicalExpressionRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MetadataFiltersRequest) MarshalJSON() ([]byte, error) {
	if m.MetadataFilterConfigRequest != nil {
		return json.Marshal(m.MetadataFilterConfigRequest)
	}
	if m.VellumValueLogicalExpressionRequest != nil {
		return json.Marshal(m.VellumValueLogicalExpressionRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MetadataFiltersRequestVisitor interface {
	VisitMetadataFilterConfigRequest(*MetadataFilterConfigRequest) error
	VisitVellumValueLogicalExpressionRequest(*VellumValueLogicalExpressionRequest) error
}

func (m *MetadataFiltersRequest) Accept(visitor MetadataFiltersRequestVisitor) error {
	if m.MetadataFilterConfigRequest != nil {
		return visitor.VisitMetadataFilterConfigRequest(m.MetadataFilterConfigRequest)
	}
	if m.VellumValueLogicalExpressionRequest != nil {
		return visitor.VisitVellumValueLogicalExpressionRequest(m.VellumValueLogicalExpressionRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

// * `POST` - POST
// * `GET` - GET
// * `PATCH` - PATCH
// * `PUT` - PUT
// * `DELETE` - DELETE
type MethodEnum string

const (
	MethodEnumPost   MethodEnum = "POST"
	MethodEnumGet    MethodEnum = "GET"
	MethodEnumPatch  MethodEnum = "PATCH"
	MethodEnumPut    MethodEnum = "PUT"
	MethodEnumDelete MethodEnum = "DELETE"
)

func NewMethodEnumFromString(s string) (MethodEnum, error) {
	switch s {
	case "POST":
		return MethodEnumPost, nil
	case "GET":
		return MethodEnumGet, nil
	case "PATCH":
		return MethodEnumPatch, nil
	case "PUT":
		return MethodEnumPut, nil
	case "DELETE":
		return MethodEnumDelete, nil
	}
	var t MethodEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MethodEnum) Ptr() *MethodEnum {
	return &m
}

// A Node Result Event emitted from a Metric Node.
type MetricNodeResult struct {
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetricNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricNodeResult) Type() string {
	return m.type_
}

func (m *MetricNodeResult) UnmarshalJSON(data []byte) error {
	type embed MetricNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MetricNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "METRIC" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "METRIC", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *m, "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricNodeResult) MarshalJSON() ([]byte, error) {
	type embed MetricNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
		Type:  "METRIC",
	}
	return json.Marshal(marshaler)
}

func (m *MetricNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelUsage struct {
	OutputTokenCount         *int `json:"output_token_count,omitempty" url:"output_token_count,omitempty"`
	InputTokenCount          *int `json:"input_token_count,omitempty" url:"input_token_count,omitempty"`
	InputCharCount           *int `json:"input_char_count,omitempty" url:"input_char_count,omitempty"`
	OutputCharCount          *int `json:"output_char_count,omitempty" url:"output_char_count,omitempty"`
	ComputeNanos             *int `json:"compute_nanos,omitempty" url:"compute_nanos,omitempty"`
	CacheCreationInputTokens *int `json:"cache_creation_input_tokens,omitempty" url:"cache_creation_input_tokens,omitempty"`
	CacheReadInputTokens     *int `json:"cache_read_input_tokens,omitempty" url:"cache_read_input_tokens,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelUsage) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelUsage) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelUsage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelUsage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelUsage) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelUsageWrapper struct {
	MlModelName  string        `json:"ml_model_name" url:"ml_model_name"`
	MlModelUsage *MlModelUsage `json:"ml_model_usage" url:"ml_model_usage"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelUsageWrapper) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelUsageWrapper) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelUsageWrapper
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelUsageWrapper(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelUsageWrapper) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Named Test Case value that is of type ARRAY
type NamedTestCaseArrayVariableValueRequest struct {
	Value []*VellumValueRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseArrayVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseArrayVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseArrayVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseArrayVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseArrayVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ARRAY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseArrayVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseArrayVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseArrayVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type AUDIO
type NamedTestCaseAudioVariableValueRequest struct {
	Value *VellumAudioRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string              `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseAudioVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseAudioVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseAudioVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseAudioVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseAudioVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "AUDIO", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseAudioVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseAudioVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseAudioVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type CHAT_HISTORY
type NamedTestCaseChatHistoryVariableValueRequest struct {
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseChatHistoryVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseChatHistoryVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseChatHistoryVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseDocumentVariableValueRequest struct {
	Value *VellumDocumentRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                 `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseDocumentVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseDocumentVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseDocumentVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseDocumentVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseDocumentVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "DOCUMENT", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseDocumentVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseDocumentVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseDocumentVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ERROR
type NamedTestCaseErrorVariableValueRequest struct {
	Value *VellumErrorRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string              `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseErrorVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseErrorVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseErrorVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseErrorVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseErrorVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ERROR", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseErrorVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseErrorVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseErrorVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type FUNCTION_CALL
type NamedTestCaseFunctionCallVariableValueRequest struct {
	Value *FunctionCallRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string               `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseFunctionCallVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseFunctionCallVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "FUNCTION_CALL", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseFunctionCallVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseImageVariableValueRequest struct {
	Value *VellumImageRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string              `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseImageVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseImageVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseImageVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseImageVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseImageVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "IMAGE", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseImageVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseImageVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseImageVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type JSON
type NamedTestCaseJsonVariableValueRequest struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseJsonVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseJsonVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseJsonVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseJsonVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseJsonVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseJsonVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseJsonVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseJsonVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type NUMBER
type NamedTestCaseNumberVariableValueRequest struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseNumberVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseNumberVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseNumberVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseNumberVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseNumberVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseNumberVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseNumberVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseNumberVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type SEARCH_RESULTS
type NamedTestCaseSearchResultsVariableValueRequest struct {
	Value []*SearchResultRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                 `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseSearchResultsVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseSearchResultsVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SEARCH_RESULTS", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseSearchResultsVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type STRING
type NamedTestCaseStringVariableValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseStringVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseStringVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseStringVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseStringVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseStringVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseStringVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseStringVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseStringVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseVariableValueRequest struct {
	NamedTestCaseStringVariableValueRequest        *NamedTestCaseStringVariableValueRequest
	NamedTestCaseNumberVariableValueRequest        *NamedTestCaseNumberVariableValueRequest
	NamedTestCaseJsonVariableValueRequest          *NamedTestCaseJsonVariableValueRequest
	NamedTestCaseChatHistoryVariableValueRequest   *NamedTestCaseChatHistoryVariableValueRequest
	NamedTestCaseSearchResultsVariableValueRequest *NamedTestCaseSearchResultsVariableValueRequest
	NamedTestCaseErrorVariableValueRequest         *NamedTestCaseErrorVariableValueRequest
	NamedTestCaseFunctionCallVariableValueRequest  *NamedTestCaseFunctionCallVariableValueRequest
	NamedTestCaseArrayVariableValueRequest         *NamedTestCaseArrayVariableValueRequest
	NamedTestCaseAudioVariableValueRequest         *NamedTestCaseAudioVariableValueRequest
	NamedTestCaseVideoVariableValueRequest         *NamedTestCaseVideoVariableValueRequest
	NamedTestCaseImageVariableValueRequest         *NamedTestCaseImageVariableValueRequest
	NamedTestCaseDocumentVariableValueRequest      *NamedTestCaseDocumentVariableValueRequest
}

func (n *NamedTestCaseVariableValueRequest) UnmarshalJSON(data []byte) error {
	valueNamedTestCaseStringVariableValueRequest := new(NamedTestCaseStringVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseStringVariableValueRequest); err == nil {
		n.NamedTestCaseStringVariableValueRequest = valueNamedTestCaseStringVariableValueRequest
		return nil
	}
	valueNamedTestCaseNumberVariableValueRequest := new(NamedTestCaseNumberVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseNumberVariableValueRequest); err == nil {
		n.NamedTestCaseNumberVariableValueRequest = valueNamedTestCaseNumberVariableValueRequest
		return nil
	}
	valueNamedTestCaseJsonVariableValueRequest := new(NamedTestCaseJsonVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseJsonVariableValueRequest); err == nil {
		n.NamedTestCaseJsonVariableValueRequest = valueNamedTestCaseJsonVariableValueRequest
		return nil
	}
	valueNamedTestCaseChatHistoryVariableValueRequest := new(NamedTestCaseChatHistoryVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseChatHistoryVariableValueRequest); err == nil {
		n.NamedTestCaseChatHistoryVariableValueRequest = valueNamedTestCaseChatHistoryVariableValueRequest
		return nil
	}
	valueNamedTestCaseSearchResultsVariableValueRequest := new(NamedTestCaseSearchResultsVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseSearchResultsVariableValueRequest); err == nil {
		n.NamedTestCaseSearchResultsVariableValueRequest = valueNamedTestCaseSearchResultsVariableValueRequest
		return nil
	}
	valueNamedTestCaseErrorVariableValueRequest := new(NamedTestCaseErrorVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseErrorVariableValueRequest); err == nil {
		n.NamedTestCaseErrorVariableValueRequest = valueNamedTestCaseErrorVariableValueRequest
		return nil
	}
	valueNamedTestCaseFunctionCallVariableValueRequest := new(NamedTestCaseFunctionCallVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseFunctionCallVariableValueRequest); err == nil {
		n.NamedTestCaseFunctionCallVariableValueRequest = valueNamedTestCaseFunctionCallVariableValueRequest
		return nil
	}
	valueNamedTestCaseArrayVariableValueRequest := new(NamedTestCaseArrayVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseArrayVariableValueRequest); err == nil {
		n.NamedTestCaseArrayVariableValueRequest = valueNamedTestCaseArrayVariableValueRequest
		return nil
	}
	valueNamedTestCaseAudioVariableValueRequest := new(NamedTestCaseAudioVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseAudioVariableValueRequest); err == nil {
		n.NamedTestCaseAudioVariableValueRequest = valueNamedTestCaseAudioVariableValueRequest
		return nil
	}
	valueNamedTestCaseVideoVariableValueRequest := new(NamedTestCaseVideoVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseVideoVariableValueRequest); err == nil {
		n.NamedTestCaseVideoVariableValueRequest = valueNamedTestCaseVideoVariableValueRequest
		return nil
	}
	valueNamedTestCaseImageVariableValueRequest := new(NamedTestCaseImageVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseImageVariableValueRequest); err == nil {
		n.NamedTestCaseImageVariableValueRequest = valueNamedTestCaseImageVariableValueRequest
		return nil
	}
	valueNamedTestCaseDocumentVariableValueRequest := new(NamedTestCaseDocumentVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseDocumentVariableValueRequest); err == nil {
		n.NamedTestCaseDocumentVariableValueRequest = valueNamedTestCaseDocumentVariableValueRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NamedTestCaseVariableValueRequest) MarshalJSON() ([]byte, error) {
	if n.NamedTestCaseStringVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseStringVariableValueRequest)
	}
	if n.NamedTestCaseNumberVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseNumberVariableValueRequest)
	}
	if n.NamedTestCaseJsonVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseJsonVariableValueRequest)
	}
	if n.NamedTestCaseChatHistoryVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseChatHistoryVariableValueRequest)
	}
	if n.NamedTestCaseSearchResultsVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseSearchResultsVariableValueRequest)
	}
	if n.NamedTestCaseErrorVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseErrorVariableValueRequest)
	}
	if n.NamedTestCaseFunctionCallVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseFunctionCallVariableValueRequest)
	}
	if n.NamedTestCaseArrayVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseArrayVariableValueRequest)
	}
	if n.NamedTestCaseAudioVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseAudioVariableValueRequest)
	}
	if n.NamedTestCaseVideoVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseVideoVariableValueRequest)
	}
	if n.NamedTestCaseImageVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseImageVariableValueRequest)
	}
	if n.NamedTestCaseDocumentVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseDocumentVariableValueRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NamedTestCaseVariableValueRequestVisitor interface {
	VisitNamedTestCaseStringVariableValueRequest(*NamedTestCaseStringVariableValueRequest) error
	VisitNamedTestCaseNumberVariableValueRequest(*NamedTestCaseNumberVariableValueRequest) error
	VisitNamedTestCaseJsonVariableValueRequest(*NamedTestCaseJsonVariableValueRequest) error
	VisitNamedTestCaseChatHistoryVariableValueRequest(*NamedTestCaseChatHistoryVariableValueRequest) error
	VisitNamedTestCaseSearchResultsVariableValueRequest(*NamedTestCaseSearchResultsVariableValueRequest) error
	VisitNamedTestCaseErrorVariableValueRequest(*NamedTestCaseErrorVariableValueRequest) error
	VisitNamedTestCaseFunctionCallVariableValueRequest(*NamedTestCaseFunctionCallVariableValueRequest) error
	VisitNamedTestCaseArrayVariableValueRequest(*NamedTestCaseArrayVariableValueRequest) error
	VisitNamedTestCaseAudioVariableValueRequest(*NamedTestCaseAudioVariableValueRequest) error
	VisitNamedTestCaseVideoVariableValueRequest(*NamedTestCaseVideoVariableValueRequest) error
	VisitNamedTestCaseImageVariableValueRequest(*NamedTestCaseImageVariableValueRequest) error
	VisitNamedTestCaseDocumentVariableValueRequest(*NamedTestCaseDocumentVariableValueRequest) error
}

func (n *NamedTestCaseVariableValueRequest) Accept(visitor NamedTestCaseVariableValueRequestVisitor) error {
	if n.NamedTestCaseStringVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseStringVariableValueRequest(n.NamedTestCaseStringVariableValueRequest)
	}
	if n.NamedTestCaseNumberVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseNumberVariableValueRequest(n.NamedTestCaseNumberVariableValueRequest)
	}
	if n.NamedTestCaseJsonVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseJsonVariableValueRequest(n.NamedTestCaseJsonVariableValueRequest)
	}
	if n.NamedTestCaseChatHistoryVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseChatHistoryVariableValueRequest(n.NamedTestCaseChatHistoryVariableValueRequest)
	}
	if n.NamedTestCaseSearchResultsVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseSearchResultsVariableValueRequest(n.NamedTestCaseSearchResultsVariableValueRequest)
	}
	if n.NamedTestCaseErrorVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseErrorVariableValueRequest(n.NamedTestCaseErrorVariableValueRequest)
	}
	if n.NamedTestCaseFunctionCallVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseFunctionCallVariableValueRequest(n.NamedTestCaseFunctionCallVariableValueRequest)
	}
	if n.NamedTestCaseArrayVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseArrayVariableValueRequest(n.NamedTestCaseArrayVariableValueRequest)
	}
	if n.NamedTestCaseAudioVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseAudioVariableValueRequest(n.NamedTestCaseAudioVariableValueRequest)
	}
	if n.NamedTestCaseVideoVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseVideoVariableValueRequest(n.NamedTestCaseVideoVariableValueRequest)
	}
	if n.NamedTestCaseImageVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseImageVariableValueRequest(n.NamedTestCaseImageVariableValueRequest)
	}
	if n.NamedTestCaseDocumentVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseDocumentVariableValueRequest(n.NamedTestCaseDocumentVariableValueRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NamedTestCaseVideoVariableValueRequest struct {
	Value *VellumVideoRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string              `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseVideoVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseVideoVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseVideoVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseVideoVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseVideoVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "VIDEO", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseVideoVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseVideoVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseVideoVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionFulfilledBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	InvokedPorts   []*InvokedPort                `json:"invoked_ports,omitempty" url:"invoked_ports,omitempty"`
	Outputs        map[string]interface{}        `json:"outputs" url:"outputs"`
	Mocked         *bool                         `json:"mocked,omitempty" url:"mocked,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionFulfilledBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionFulfilledBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionFulfilledBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionFulfilledBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionFulfilledBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionFulfilledEvent struct {
	Parent     *ParentContext              `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                 `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionFulfilledBody `json:"body" url:"body"`
	Id         string                      `json:"id" url:"id"`
	Timestamp  time.Time                   `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum             `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                      `json:"trace_id" url:"trace_id"`
	SpanId     string                      `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionFulfilledEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionFulfilledEvent) Name() string {
	return n.name
}

func (n *NodeExecutionFulfilledEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionFulfilledEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionFulfilledEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.fulfilled" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.fulfilled", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionFulfilledEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionFulfilledEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.fulfilled",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionFulfilledEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionInitiatedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	Inputs         map[string]interface{}        `json:"inputs" url:"inputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionInitiatedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionInitiatedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionInitiatedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionInitiatedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionInitiatedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionInitiatedEvent struct {
	Parent     *ParentContext              `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                 `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionInitiatedBody `json:"body" url:"body"`
	Id         string                      `json:"id" url:"id"`
	Timestamp  time.Time                   `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum             `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                      `json:"trace_id" url:"trace_id"`
	SpanId     string                      `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionInitiatedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionInitiatedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionInitiatedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionInitiatedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionInitiatedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.initiated" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.initiated", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionInitiatedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionInitiatedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.initiated",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionInitiatedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionPausedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionPausedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionPausedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionPausedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionPausedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionPausedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionPausedEvent struct {
	Parent     *ParentContext           `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink              `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionPausedBody `json:"body" url:"body"`
	Id         string                   `json:"id" url:"id"`
	Timestamp  time.Time                `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum          `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                   `json:"trace_id" url:"trace_id"`
	SpanId     string                   `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionPausedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionPausedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionPausedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionPausedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionPausedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.paused" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.paused", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionPausedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionPausedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.paused",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionPausedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionRejectedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	Error          *VellumSdkError               `json:"error" url:"error"`
	Stacktrace     *string                       `json:"stacktrace,omitempty" url:"stacktrace,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionRejectedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionRejectedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionRejectedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionRejectedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionRejectedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionRejectedEvent struct {
	Parent     *ParentContext             `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionRejectedBody `json:"body" url:"body"`
	Id         string                     `json:"id" url:"id"`
	Timestamp  time.Time                  `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum            `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                     `json:"trace_id" url:"trace_id"`
	SpanId     string                     `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionRejectedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionRejectedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionRejectedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionRejectedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionRejectedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.rejected" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.rejected", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionRejectedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionRejectedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.rejected",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionRejectedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionResumedBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionResumedBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionResumedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionResumedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionResumedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionResumedBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionResumedEvent struct {
	Parent     *ParentContext            `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink               `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionResumedBody `json:"body" url:"body"`
	Id         string                    `json:"id" url:"id"`
	Timestamp  time.Time                 `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum           `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                    `json:"trace_id" url:"trace_id"`
	SpanId     string                    `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionResumedEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionResumedEvent) Name() string {
	return n.name
}

func (n *NodeExecutionResumedEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionResumedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionResumedEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.resumed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.resumed", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionResumedEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionResumedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.resumed",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionResumedEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionSpan struct {
	Events       []*VellumNodeExecutionEvent                     `json:"events" url:"events"`
	Attributes   *NodeExecutionSpanAttributes                    `json:"attributes" url:"attributes"`
	UsageResult  *WorkflowExecutionUsageCalculationFulfilledBody `json:"usage_result,omitempty" url:"usage_result,omitempty"`
	SpanId       string                                          `json:"span_id" url:"span_id"`
	StartTs      time.Time                                       `json:"start_ts" url:"start_ts"`
	EndTs        time.Time                                       `json:"end_ts" url:"end_ts"`
	ParentSpanId *string                                         `json:"parent_span_id,omitempty" url:"parent_span_id,omitempty"`
	name         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionSpan) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionSpan) Name() string {
	return n.name
}

func (n *NodeExecutionSpan) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionSpan
	var unmarshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionSpan(unmarshaler.embed)
	n.StartTs = unmarshaler.StartTs.Time()
	n.EndTs = unmarshaler.EndTs.Time()
	if unmarshaler.Name != "node.execution" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionSpan) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionSpan
	var marshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed:   embed(*n),
		StartTs: core.NewDateTime(n.StartTs),
		EndTs:   core.NewDateTime(n.EndTs),
		Name:    "node.execution",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionSpan) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionSpanAttributes struct {
	Label    string  `json:"label" url:"label"`
	Filepath *string `json:"filepath,omitempty" url:"filepath,omitempty"`
	NodeId   string  `json:"node_id" url:"node_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionSpanAttributes) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionSpanAttributes) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionSpanAttributes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionSpanAttributes(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionSpanAttributes) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionStreamingBody struct {
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	Output         *BaseOutput                   `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionStreamingBody) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionStreamingBody) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeExecutionStreamingBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeExecutionStreamingBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionStreamingBody) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeExecutionStreamingEvent struct {
	Parent     *ParentContext              `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                 `json:"links,omitempty" url:"links,omitempty"`
	Body       *NodeExecutionStreamingBody `json:"body" url:"body"`
	Id         string                      `json:"id" url:"id"`
	Timestamp  time.Time                   `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum             `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                      `json:"trace_id" url:"trace_id"`
	SpanId     string                      `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeExecutionStreamingEvent) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeExecutionStreamingEvent) Name() string {
	return n.name
}

func (n *NodeExecutionStreamingEvent) UnmarshalJSON(data []byte) error {
	type embed NodeExecutionStreamingEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeExecutionStreamingEvent(unmarshaler.embed)
	n.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "node.execution.streaming" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "node.execution.streaming", unmarshaler.Name)
	}
	n.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *n, "name")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeExecutionStreamingEvent) MarshalJSON() ([]byte, error) {
	type embed NodeExecutionStreamingEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*n),
		Timestamp: core.NewDateTime(n.Timestamp),
		Name:      "node.execution.streaming",
	}
	return json.Marshal(marshaler)
}

func (n *NodeExecutionStreamingEvent) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledArrayValue struct {
	NodeInputId string         `json:"node_input_id" url:"node_input_id"`
	Key         string         `json:"key" url:"key"`
	Value       []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledArrayValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledArrayValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledArrayValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledArrayValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ARRAY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledArrayValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledArrayValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledAudioValue struct {
	NodeInputId string       `json:"node_input_id" url:"node_input_id"`
	Key         string       `json:"key" url:"key"`
	Value       *VellumAudio `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledAudioValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledAudioValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledAudioValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledAudioValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledAudioValue(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "AUDIO", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledAudioValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledAudioValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledAudioValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledChatHistoryValue struct {
	NodeInputId string         `json:"node_input_id" url:"node_input_id"`
	Key         string         `json:"key" url:"key"`
	Value       []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledChatHistoryValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledChatHistoryValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledChatHistoryValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledChatHistoryValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledChatHistoryValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledChatHistoryValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledDocumentValue struct {
	NodeInputId string          `json:"node_input_id" url:"node_input_id"`
	Key         string          `json:"key" url:"key"`
	Value       *VellumDocument `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledDocumentValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledDocumentValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledDocumentValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledDocumentValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledDocumentValue(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "DOCUMENT", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledDocumentValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledDocumentValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledDocumentValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledErrorValue struct {
	NodeInputId string       `json:"node_input_id" url:"node_input_id"`
	Key         string       `json:"key" url:"key"`
	Value       *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledErrorValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledErrorValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledErrorValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledErrorValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ERROR", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledErrorValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledErrorValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledFunctionCallValue struct {
	NodeInputId string        `json:"node_input_id" url:"node_input_id"`
	Key         string        `json:"key" url:"key"`
	Value       *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledFunctionCallValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledFunctionCallValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledFunctionCallValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledFunctionCallValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledFunctionCallValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "FUNCTION_CALL", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledFunctionCallValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledFunctionCallValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledFunctionCallValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledImageValue struct {
	NodeInputId string       `json:"node_input_id" url:"node_input_id"`
	Key         string       `json:"key" url:"key"`
	Value       *VellumImage `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledImageValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledImageValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledImageValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledImageValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledImageValue(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "IMAGE", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledImageValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledImageValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledImageValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledJsonValue struct {
	NodeInputId string      `json:"node_input_id" url:"node_input_id"`
	Key         string      `json:"key" url:"key"`
	Value       interface{} `json:"value" url:"value"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledJsonValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledJsonValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledJsonValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledJsonValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledJsonValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledJsonValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledNumberValue struct {
	NodeInputId string   `json:"node_input_id" url:"node_input_id"`
	Key         string   `json:"key" url:"key"`
	Value       *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledNumberValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledNumberValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledNumberValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledNumberValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledNumberValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledNumberValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledSearchResultsValue struct {
	NodeInputId string          `json:"node_input_id" url:"node_input_id"`
	Key         string          `json:"key" url:"key"`
	Value       []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledSearchResultsValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledSearchResultsValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledSearchResultsValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledSearchResultsValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SEARCH_RESULTS", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledSearchResultsValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledSearchResultsValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledSecretValue struct {
	NodeInputId string        `json:"node_input_id" url:"node_input_id"`
	Key         string        `json:"key" url:"key"`
	Value       *VellumSecret `json:"value" url:"value"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledSecretValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledSecretValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledSecretValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledSecretValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledSecretValue(unmarshaler.embed)
	if unmarshaler.Type != "SECRET" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SECRET", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledSecretValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledSecretValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SECRET",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledSecretValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledStringValue struct {
	NodeInputId string  `json:"node_input_id" url:"node_input_id"`
	Key         string  `json:"key" url:"key"`
	Value       *string `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledStringValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledStringValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledStringValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledStringValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledStringValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledStringValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledVideoValue struct {
	NodeInputId string       `json:"node_input_id" url:"node_input_id"`
	Key         string       `json:"key" url:"key"`
	Value       *VellumVideo `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledVideoValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledVideoValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledVideoValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledVideoValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledVideoValue(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "VIDEO", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledVideoValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledVideoValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledVideoValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputVariableCompiledValue struct {
	NodeInputCompiledStringValue        *NodeInputCompiledStringValue
	NodeInputCompiledNumberValue        *NodeInputCompiledNumberValue
	NodeInputCompiledJsonValue          *NodeInputCompiledJsonValue
	NodeInputCompiledChatHistoryValue   *NodeInputCompiledChatHistoryValue
	NodeInputCompiledSearchResultsValue *NodeInputCompiledSearchResultsValue
	NodeInputCompiledErrorValue         *NodeInputCompiledErrorValue
	NodeInputCompiledArrayValue         *NodeInputCompiledArrayValue
	NodeInputCompiledFunctionCallValue  *NodeInputCompiledFunctionCallValue
	NodeInputCompiledSecretValue        *NodeInputCompiledSecretValue
	NodeInputCompiledAudioValue         *NodeInputCompiledAudioValue
	NodeInputCompiledVideoValue         *NodeInputCompiledVideoValue
	NodeInputCompiledImageValue         *NodeInputCompiledImageValue
	NodeInputCompiledDocumentValue      *NodeInputCompiledDocumentValue
}

func (n *NodeInputVariableCompiledValue) UnmarshalJSON(data []byte) error {
	valueNodeInputCompiledStringValue := new(NodeInputCompiledStringValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledStringValue); err == nil {
		n.NodeInputCompiledStringValue = valueNodeInputCompiledStringValue
		return nil
	}
	valueNodeInputCompiledNumberValue := new(NodeInputCompiledNumberValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledNumberValue); err == nil {
		n.NodeInputCompiledNumberValue = valueNodeInputCompiledNumberValue
		return nil
	}
	valueNodeInputCompiledJsonValue := new(NodeInputCompiledJsonValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledJsonValue); err == nil {
		n.NodeInputCompiledJsonValue = valueNodeInputCompiledJsonValue
		return nil
	}
	valueNodeInputCompiledChatHistoryValue := new(NodeInputCompiledChatHistoryValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledChatHistoryValue); err == nil {
		n.NodeInputCompiledChatHistoryValue = valueNodeInputCompiledChatHistoryValue
		return nil
	}
	valueNodeInputCompiledSearchResultsValue := new(NodeInputCompiledSearchResultsValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledSearchResultsValue); err == nil {
		n.NodeInputCompiledSearchResultsValue = valueNodeInputCompiledSearchResultsValue
		return nil
	}
	valueNodeInputCompiledErrorValue := new(NodeInputCompiledErrorValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledErrorValue); err == nil {
		n.NodeInputCompiledErrorValue = valueNodeInputCompiledErrorValue
		return nil
	}
	valueNodeInputCompiledArrayValue := new(NodeInputCompiledArrayValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledArrayValue); err == nil {
		n.NodeInputCompiledArrayValue = valueNodeInputCompiledArrayValue
		return nil
	}
	valueNodeInputCompiledFunctionCallValue := new(NodeInputCompiledFunctionCallValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledFunctionCallValue); err == nil {
		n.NodeInputCompiledFunctionCallValue = valueNodeInputCompiledFunctionCallValue
		return nil
	}
	valueNodeInputCompiledSecretValue := new(NodeInputCompiledSecretValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledSecretValue); err == nil {
		n.NodeInputCompiledSecretValue = valueNodeInputCompiledSecretValue
		return nil
	}
	valueNodeInputCompiledAudioValue := new(NodeInputCompiledAudioValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledAudioValue); err == nil {
		n.NodeInputCompiledAudioValue = valueNodeInputCompiledAudioValue
		return nil
	}
	valueNodeInputCompiledVideoValue := new(NodeInputCompiledVideoValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledVideoValue); err == nil {
		n.NodeInputCompiledVideoValue = valueNodeInputCompiledVideoValue
		return nil
	}
	valueNodeInputCompiledImageValue := new(NodeInputCompiledImageValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledImageValue); err == nil {
		n.NodeInputCompiledImageValue = valueNodeInputCompiledImageValue
		return nil
	}
	valueNodeInputCompiledDocumentValue := new(NodeInputCompiledDocumentValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledDocumentValue); err == nil {
		n.NodeInputCompiledDocumentValue = valueNodeInputCompiledDocumentValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NodeInputVariableCompiledValue) MarshalJSON() ([]byte, error) {
	if n.NodeInputCompiledStringValue != nil {
		return json.Marshal(n.NodeInputCompiledStringValue)
	}
	if n.NodeInputCompiledNumberValue != nil {
		return json.Marshal(n.NodeInputCompiledNumberValue)
	}
	if n.NodeInputCompiledJsonValue != nil {
		return json.Marshal(n.NodeInputCompiledJsonValue)
	}
	if n.NodeInputCompiledChatHistoryValue != nil {
		return json.Marshal(n.NodeInputCompiledChatHistoryValue)
	}
	if n.NodeInputCompiledSearchResultsValue != nil {
		return json.Marshal(n.NodeInputCompiledSearchResultsValue)
	}
	if n.NodeInputCompiledErrorValue != nil {
		return json.Marshal(n.NodeInputCompiledErrorValue)
	}
	if n.NodeInputCompiledArrayValue != nil {
		return json.Marshal(n.NodeInputCompiledArrayValue)
	}
	if n.NodeInputCompiledFunctionCallValue != nil {
		return json.Marshal(n.NodeInputCompiledFunctionCallValue)
	}
	if n.NodeInputCompiledSecretValue != nil {
		return json.Marshal(n.NodeInputCompiledSecretValue)
	}
	if n.NodeInputCompiledAudioValue != nil {
		return json.Marshal(n.NodeInputCompiledAudioValue)
	}
	if n.NodeInputCompiledVideoValue != nil {
		return json.Marshal(n.NodeInputCompiledVideoValue)
	}
	if n.NodeInputCompiledImageValue != nil {
		return json.Marshal(n.NodeInputCompiledImageValue)
	}
	if n.NodeInputCompiledDocumentValue != nil {
		return json.Marshal(n.NodeInputCompiledDocumentValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NodeInputVariableCompiledValueVisitor interface {
	VisitNodeInputCompiledStringValue(*NodeInputCompiledStringValue) error
	VisitNodeInputCompiledNumberValue(*NodeInputCompiledNumberValue) error
	VisitNodeInputCompiledJsonValue(*NodeInputCompiledJsonValue) error
	VisitNodeInputCompiledChatHistoryValue(*NodeInputCompiledChatHistoryValue) error
	VisitNodeInputCompiledSearchResultsValue(*NodeInputCompiledSearchResultsValue) error
	VisitNodeInputCompiledErrorValue(*NodeInputCompiledErrorValue) error
	VisitNodeInputCompiledArrayValue(*NodeInputCompiledArrayValue) error
	VisitNodeInputCompiledFunctionCallValue(*NodeInputCompiledFunctionCallValue) error
	VisitNodeInputCompiledSecretValue(*NodeInputCompiledSecretValue) error
	VisitNodeInputCompiledAudioValue(*NodeInputCompiledAudioValue) error
	VisitNodeInputCompiledVideoValue(*NodeInputCompiledVideoValue) error
	VisitNodeInputCompiledImageValue(*NodeInputCompiledImageValue) error
	VisitNodeInputCompiledDocumentValue(*NodeInputCompiledDocumentValue) error
}

func (n *NodeInputVariableCompiledValue) Accept(visitor NodeInputVariableCompiledValueVisitor) error {
	if n.NodeInputCompiledStringValue != nil {
		return visitor.VisitNodeInputCompiledStringValue(n.NodeInputCompiledStringValue)
	}
	if n.NodeInputCompiledNumberValue != nil {
		return visitor.VisitNodeInputCompiledNumberValue(n.NodeInputCompiledNumberValue)
	}
	if n.NodeInputCompiledJsonValue != nil {
		return visitor.VisitNodeInputCompiledJsonValue(n.NodeInputCompiledJsonValue)
	}
	if n.NodeInputCompiledChatHistoryValue != nil {
		return visitor.VisitNodeInputCompiledChatHistoryValue(n.NodeInputCompiledChatHistoryValue)
	}
	if n.NodeInputCompiledSearchResultsValue != nil {
		return visitor.VisitNodeInputCompiledSearchResultsValue(n.NodeInputCompiledSearchResultsValue)
	}
	if n.NodeInputCompiledErrorValue != nil {
		return visitor.VisitNodeInputCompiledErrorValue(n.NodeInputCompiledErrorValue)
	}
	if n.NodeInputCompiledArrayValue != nil {
		return visitor.VisitNodeInputCompiledArrayValue(n.NodeInputCompiledArrayValue)
	}
	if n.NodeInputCompiledFunctionCallValue != nil {
		return visitor.VisitNodeInputCompiledFunctionCallValue(n.NodeInputCompiledFunctionCallValue)
	}
	if n.NodeInputCompiledSecretValue != nil {
		return visitor.VisitNodeInputCompiledSecretValue(n.NodeInputCompiledSecretValue)
	}
	if n.NodeInputCompiledAudioValue != nil {
		return visitor.VisitNodeInputCompiledAudioValue(n.NodeInputCompiledAudioValue)
	}
	if n.NodeInputCompiledVideoValue != nil {
		return visitor.VisitNodeInputCompiledVideoValue(n.NodeInputCompiledVideoValue)
	}
	if n.NodeInputCompiledImageValue != nil {
		return visitor.VisitNodeInputCompiledImageValue(n.NodeInputCompiledImageValue)
	}
	if n.NodeInputCompiledDocumentValue != nil {
		return visitor.VisitNodeInputCompiledDocumentValue(n.NodeInputCompiledDocumentValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

// An output returned by a node that is of type ARRAY.
type NodeOutputCompiledArrayValue struct {
	Value        []*VellumValue                `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledArrayValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledArrayValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledArrayValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledArrayValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ARRAY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledArrayValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledArrayValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type CHAT_HISTORY.
type NodeOutputCompiledChatHistoryValue struct {
	Value        []*ChatMessage                `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledChatHistoryValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledChatHistoryValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledChatHistoryValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledChatHistoryValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledChatHistoryValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledChatHistoryValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type ERROR.
type NodeOutputCompiledErrorValue struct {
	Value        *VellumError                  `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledErrorValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledErrorValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledErrorValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledErrorValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ERROR", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledErrorValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledErrorValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type FUNCTION_CALL.
type NodeOutputCompiledFunctionCallValue struct {
	Value        *FunctionCall                 `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledFunctionCallValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledFunctionCallValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledFunctionCallValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledFunctionCallValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledFunctionCallValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "FUNCTION_CALL", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledFunctionCallValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledFunctionCallValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledFunctionCallValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type JSON.
type NodeOutputCompiledJsonValue struct {
	Value        interface{}                   `json:"value" url:"value"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledJsonValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledJsonValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledJsonValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledJsonValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledJsonValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledJsonValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type NUMBER.
type NodeOutputCompiledNumberValue struct {
	Value        *float64                      `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledNumberValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledNumberValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledNumberValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledNumberValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledNumberValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledNumberValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type SEARCH_RESULTS.
type NodeOutputCompiledSearchResultsValue struct {
	Value        []*SearchResult               `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledSearchResultsValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledSearchResultsValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledSearchResultsValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledSearchResultsValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SEARCH_RESULTS", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledSearchResultsValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledSearchResultsValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type STRING.
type NodeOutputCompiledStringValue struct {
	Value        *string                       `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledStringValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledStringValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledStringValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledStringValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledStringValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledStringValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type THINKING.
type NodeOutputCompiledThinkingValue struct {
	Value        *StringVellumValue            `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledThinkingValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledThinkingValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledThinkingValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledThinkingValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledThinkingValue(unmarshaler.embed)
	if unmarshaler.Type != "THINKING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "THINKING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledThinkingValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledThinkingValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "THINKING",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledThinkingValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledValue struct {
	NodeOutputCompiledStringValue        *NodeOutputCompiledStringValue
	NodeOutputCompiledNumberValue        *NodeOutputCompiledNumberValue
	NodeOutputCompiledJsonValue          *NodeOutputCompiledJsonValue
	NodeOutputCompiledChatHistoryValue   *NodeOutputCompiledChatHistoryValue
	NodeOutputCompiledSearchResultsValue *NodeOutputCompiledSearchResultsValue
	NodeOutputCompiledErrorValue         *NodeOutputCompiledErrorValue
	NodeOutputCompiledArrayValue         *NodeOutputCompiledArrayValue
	NodeOutputCompiledFunctionCallValue  *NodeOutputCompiledFunctionCallValue
	NodeOutputCompiledThinkingValue      *NodeOutputCompiledThinkingValue
}

func (n *NodeOutputCompiledValue) UnmarshalJSON(data []byte) error {
	valueNodeOutputCompiledStringValue := new(NodeOutputCompiledStringValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledStringValue); err == nil {
		n.NodeOutputCompiledStringValue = valueNodeOutputCompiledStringValue
		return nil
	}
	valueNodeOutputCompiledNumberValue := new(NodeOutputCompiledNumberValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledNumberValue); err == nil {
		n.NodeOutputCompiledNumberValue = valueNodeOutputCompiledNumberValue
		return nil
	}
	valueNodeOutputCompiledJsonValue := new(NodeOutputCompiledJsonValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledJsonValue); err == nil {
		n.NodeOutputCompiledJsonValue = valueNodeOutputCompiledJsonValue
		return nil
	}
	valueNodeOutputCompiledChatHistoryValue := new(NodeOutputCompiledChatHistoryValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledChatHistoryValue); err == nil {
		n.NodeOutputCompiledChatHistoryValue = valueNodeOutputCompiledChatHistoryValue
		return nil
	}
	valueNodeOutputCompiledSearchResultsValue := new(NodeOutputCompiledSearchResultsValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledSearchResultsValue); err == nil {
		n.NodeOutputCompiledSearchResultsValue = valueNodeOutputCompiledSearchResultsValue
		return nil
	}
	valueNodeOutputCompiledErrorValue := new(NodeOutputCompiledErrorValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledErrorValue); err == nil {
		n.NodeOutputCompiledErrorValue = valueNodeOutputCompiledErrorValue
		return nil
	}
	valueNodeOutputCompiledArrayValue := new(NodeOutputCompiledArrayValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledArrayValue); err == nil {
		n.NodeOutputCompiledArrayValue = valueNodeOutputCompiledArrayValue
		return nil
	}
	valueNodeOutputCompiledFunctionCallValue := new(NodeOutputCompiledFunctionCallValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledFunctionCallValue); err == nil {
		n.NodeOutputCompiledFunctionCallValue = valueNodeOutputCompiledFunctionCallValue
		return nil
	}
	valueNodeOutputCompiledThinkingValue := new(NodeOutputCompiledThinkingValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledThinkingValue); err == nil {
		n.NodeOutputCompiledThinkingValue = valueNodeOutputCompiledThinkingValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NodeOutputCompiledValue) MarshalJSON() ([]byte, error) {
	if n.NodeOutputCompiledStringValue != nil {
		return json.Marshal(n.NodeOutputCompiledStringValue)
	}
	if n.NodeOutputCompiledNumberValue != nil {
		return json.Marshal(n.NodeOutputCompiledNumberValue)
	}
	if n.NodeOutputCompiledJsonValue != nil {
		return json.Marshal(n.NodeOutputCompiledJsonValue)
	}
	if n.NodeOutputCompiledChatHistoryValue != nil {
		return json.Marshal(n.NodeOutputCompiledChatHistoryValue)
	}
	if n.NodeOutputCompiledSearchResultsValue != nil {
		return json.Marshal(n.NodeOutputCompiledSearchResultsValue)
	}
	if n.NodeOutputCompiledErrorValue != nil {
		return json.Marshal(n.NodeOutputCompiledErrorValue)
	}
	if n.NodeOutputCompiledArrayValue != nil {
		return json.Marshal(n.NodeOutputCompiledArrayValue)
	}
	if n.NodeOutputCompiledFunctionCallValue != nil {
		return json.Marshal(n.NodeOutputCompiledFunctionCallValue)
	}
	if n.NodeOutputCompiledThinkingValue != nil {
		return json.Marshal(n.NodeOutputCompiledThinkingValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NodeOutputCompiledValueVisitor interface {
	VisitNodeOutputCompiledStringValue(*NodeOutputCompiledStringValue) error
	VisitNodeOutputCompiledNumberValue(*NodeOutputCompiledNumberValue) error
	VisitNodeOutputCompiledJsonValue(*NodeOutputCompiledJsonValue) error
	VisitNodeOutputCompiledChatHistoryValue(*NodeOutputCompiledChatHistoryValue) error
	VisitNodeOutputCompiledSearchResultsValue(*NodeOutputCompiledSearchResultsValue) error
	VisitNodeOutputCompiledErrorValue(*NodeOutputCompiledErrorValue) error
	VisitNodeOutputCompiledArrayValue(*NodeOutputCompiledArrayValue) error
	VisitNodeOutputCompiledFunctionCallValue(*NodeOutputCompiledFunctionCallValue) error
	VisitNodeOutputCompiledThinkingValue(*NodeOutputCompiledThinkingValue) error
}

func (n *NodeOutputCompiledValue) Accept(visitor NodeOutputCompiledValueVisitor) error {
	if n.NodeOutputCompiledStringValue != nil {
		return visitor.VisitNodeOutputCompiledStringValue(n.NodeOutputCompiledStringValue)
	}
	if n.NodeOutputCompiledNumberValue != nil {
		return visitor.VisitNodeOutputCompiledNumberValue(n.NodeOutputCompiledNumberValue)
	}
	if n.NodeOutputCompiledJsonValue != nil {
		return visitor.VisitNodeOutputCompiledJsonValue(n.NodeOutputCompiledJsonValue)
	}
	if n.NodeOutputCompiledChatHistoryValue != nil {
		return visitor.VisitNodeOutputCompiledChatHistoryValue(n.NodeOutputCompiledChatHistoryValue)
	}
	if n.NodeOutputCompiledSearchResultsValue != nil {
		return visitor.VisitNodeOutputCompiledSearchResultsValue(n.NodeOutputCompiledSearchResultsValue)
	}
	if n.NodeOutputCompiledErrorValue != nil {
		return visitor.VisitNodeOutputCompiledErrorValue(n.NodeOutputCompiledErrorValue)
	}
	if n.NodeOutputCompiledArrayValue != nil {
		return visitor.VisitNodeOutputCompiledArrayValue(n.NodeOutputCompiledArrayValue)
	}
	if n.NodeOutputCompiledFunctionCallValue != nil {
		return visitor.VisitNodeOutputCompiledFunctionCallValue(n.NodeOutputCompiledFunctionCallValue)
	}
	if n.NodeOutputCompiledThinkingValue != nil {
		return visitor.VisitNodeOutputCompiledThinkingValue(n.NodeOutputCompiledThinkingValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NodeParentContext struct {
	Parent         *ParentContext                `json:"parent,omitempty" url:"parent,omitempty"`
	Links          []*SpanLink                   `json:"links,omitempty" url:"links,omitempty"`
	NodeDefinition *VellumCodeResourceDefinition `json:"node_definition" url:"node_definition"`
	SpanId         string                        `json:"span_id" url:"span_id"`
	type_          string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeParentContext) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeParentContext) Type() string {
	return n.type_
}

func (n *NodeParentContext) UnmarshalJSON(data []byte) error {
	type embed NodeParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_NODE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "WORKFLOW_NODE", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeParentContext) MarshalJSON() ([]byte, error) {
	type embed NodeParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "WORKFLOW_NODE",
	}
	return json.Marshal(marshaler)
}

func (n *NodeParentContext) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NormalizedLogProbs struct {
	Tokens     []*NormalizedTokenLogProbs `json:"tokens" url:"tokens"`
	Likelihood *float64                   `json:"likelihood,omitempty" url:"likelihood,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NormalizedLogProbs) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NormalizedLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedLogProbs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NormalizedTokenLogProbs struct {
	Token       string              `json:"token" url:"token"`
	Logprob     *float64            `json:"logprob,omitempty" url:"logprob,omitempty"`
	TopLogprobs map[string]*float64 `json:"top_logprobs,omitempty" url:"top_logprobs,omitempty"`
	TextOffset  int                 `json:"text_offset" url:"text_offset"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NormalizedTokenLogProbs) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NormalizedTokenLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedTokenLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedTokenLogProbs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedTokenLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A user input representing a number value
type NumberInput struct {
	// The variable's name
	Name  string  `json:"name" url:"name"`
	Value float64 `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberInput) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberInput) Type() string {
	return n.type_
}

func (n *NumberInput) UnmarshalJSON(data []byte) error {
	type embed NumberInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NumberInput(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberInput) MarshalJSON() ([]byte, error) {
	type embed NumberInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NumberInput) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A value representing a number.
type NumberVellumValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVellumValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVellumValue) Type() string {
	return n.type_
}

func (n *NumberVellumValue) UnmarshalJSON(data []byte) error {
	type embed NumberVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NumberVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVellumValue) MarshalJSON() ([]byte, error) {
	type embed NumberVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NumberVellumValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A value representing a number.
type NumberVellumValueRequest struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVellumValueRequest) Type() string {
	return n.type_
}

func (n *NumberVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed NumberVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NumberVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed NumberVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NumberVellumValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Configuration for using an OpenAI vectorizer.
type OpenAiVectorizerConfig struct {
	AddOpenaiApiKey *AddOpenaiApiKeyEnum `json:"add_openai_api_key,omitempty" url:"add_openai_api_key,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerConfig) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-large.
type OpenAiVectorizerTextEmbedding3Large struct {
	Config    *OpenAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3Large) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3Large) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbedding3Large) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbedding3Large
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3Large(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-3-large" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-3-large", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3Large) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbedding3Large
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-3-large",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbedding3Large) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-small.
type OpenAiVectorizerTextEmbedding3Small struct {
	Config    *OpenAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3Small) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3Small) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbedding3Small) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbedding3Small
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3Small(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-3-small" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-3-small", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3Small) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbedding3Small
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-3-small",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbedding3Small) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-ada-002.
type OpenAiVectorizerTextEmbeddingAda002 struct {
	Config    *OpenAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbeddingAda002) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbeddingAda002) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbeddingAda002) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbeddingAda002
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbeddingAda002(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-ada-002" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-ada-002", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbeddingAda002) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbeddingAda002
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-ada-002",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbeddingAda002) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type ParentContext struct {
	WorkflowParentContext           *WorkflowParentContext
	NodeParentContext               *NodeParentContext
	WorkflowDeploymentParentContext *WorkflowDeploymentParentContext
	WorkflowSandboxParentContext    *WorkflowSandboxParentContext
	PromptDeploymentParentContext   *PromptDeploymentParentContext
	ApiRequestParentContext         *ApiRequestParentContext
	ExternalParentContext           *ExternalParentContext
}

func (p *ParentContext) UnmarshalJSON(data []byte) error {
	valueWorkflowParentContext := new(WorkflowParentContext)
	if err := json.Unmarshal(data, &valueWorkflowParentContext); err == nil {
		p.WorkflowParentContext = valueWorkflowParentContext
		return nil
	}
	valueNodeParentContext := new(NodeParentContext)
	if err := json.Unmarshal(data, &valueNodeParentContext); err == nil {
		p.NodeParentContext = valueNodeParentContext
		return nil
	}
	valueWorkflowDeploymentParentContext := new(WorkflowDeploymentParentContext)
	if err := json.Unmarshal(data, &valueWorkflowDeploymentParentContext); err == nil {
		p.WorkflowDeploymentParentContext = valueWorkflowDeploymentParentContext
		return nil
	}
	valueWorkflowSandboxParentContext := new(WorkflowSandboxParentContext)
	if err := json.Unmarshal(data, &valueWorkflowSandboxParentContext); err == nil {
		p.WorkflowSandboxParentContext = valueWorkflowSandboxParentContext
		return nil
	}
	valuePromptDeploymentParentContext := new(PromptDeploymentParentContext)
	if err := json.Unmarshal(data, &valuePromptDeploymentParentContext); err == nil {
		p.PromptDeploymentParentContext = valuePromptDeploymentParentContext
		return nil
	}
	valueApiRequestParentContext := new(ApiRequestParentContext)
	if err := json.Unmarshal(data, &valueApiRequestParentContext); err == nil {
		p.ApiRequestParentContext = valueApiRequestParentContext
		return nil
	}
	valueExternalParentContext := new(ExternalParentContext)
	if err := json.Unmarshal(data, &valueExternalParentContext); err == nil {
		p.ExternalParentContext = valueExternalParentContext
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p ParentContext) MarshalJSON() ([]byte, error) {
	if p.WorkflowParentContext != nil {
		return json.Marshal(p.WorkflowParentContext)
	}
	if p.NodeParentContext != nil {
		return json.Marshal(p.NodeParentContext)
	}
	if p.WorkflowDeploymentParentContext != nil {
		return json.Marshal(p.WorkflowDeploymentParentContext)
	}
	if p.WorkflowSandboxParentContext != nil {
		return json.Marshal(p.WorkflowSandboxParentContext)
	}
	if p.PromptDeploymentParentContext != nil {
		return json.Marshal(p.PromptDeploymentParentContext)
	}
	if p.ApiRequestParentContext != nil {
		return json.Marshal(p.ApiRequestParentContext)
	}
	if p.ExternalParentContext != nil {
		return json.Marshal(p.ExternalParentContext)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type ParentContextVisitor interface {
	VisitWorkflowParentContext(*WorkflowParentContext) error
	VisitNodeParentContext(*NodeParentContext) error
	VisitWorkflowDeploymentParentContext(*WorkflowDeploymentParentContext) error
	VisitWorkflowSandboxParentContext(*WorkflowSandboxParentContext) error
	VisitPromptDeploymentParentContext(*PromptDeploymentParentContext) error
	VisitApiRequestParentContext(*ApiRequestParentContext) error
	VisitExternalParentContext(*ExternalParentContext) error
}

func (p *ParentContext) Accept(visitor ParentContextVisitor) error {
	if p.WorkflowParentContext != nil {
		return visitor.VisitWorkflowParentContext(p.WorkflowParentContext)
	}
	if p.NodeParentContext != nil {
		return visitor.VisitNodeParentContext(p.NodeParentContext)
	}
	if p.WorkflowDeploymentParentContext != nil {
		return visitor.VisitWorkflowDeploymentParentContext(p.WorkflowDeploymentParentContext)
	}
	if p.WorkflowSandboxParentContext != nil {
		return visitor.VisitWorkflowSandboxParentContext(p.WorkflowSandboxParentContext)
	}
	if p.PromptDeploymentParentContext != nil {
		return visitor.VisitPromptDeploymentParentContext(p.PromptDeploymentParentContext)
	}
	if p.ApiRequestParentContext != nil {
		return visitor.VisitApiRequestParentContext(p.ApiRequestParentContext)
	}
	if p.ExternalParentContext != nil {
		return visitor.VisitExternalParentContext(p.ExternalParentContext)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// The source of a search result from a PDF document.
type PdfSearchResultMetaSource struct {
	// The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.
	StartPageNum *int `json:"start_page_num,omitempty" url:"start_page_num,omitempty"`
	// The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.
	EndPageNum   *int `json:"end_page_num,omitempty" url:"end_page_num,omitempty"`
	documentType string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PdfSearchResultMetaSource) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PdfSearchResultMetaSource) DocumentType() string {
	return p.documentType
}

func (p *PdfSearchResultMetaSource) UnmarshalJSON(data []byte) error {
	type embed PdfSearchResultMetaSource
	var unmarshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PdfSearchResultMetaSource(unmarshaler.embed)
	if unmarshaler.DocumentType != "PDF" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PDF", unmarshaler.DocumentType)
	}
	p.documentType = unmarshaler.DocumentType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "document_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PdfSearchResultMetaSource) MarshalJSON() ([]byte, error) {
	type embed PdfSearchResultMetaSource
	var marshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed:        embed(*p),
		DocumentType: "PDF",
	}
	return json.Marshal(marshaler)
}

func (p *PdfSearchResultMetaSource) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The source of a search result from a PDF document.
type PdfSearchResultMetaSourceRequest struct {
	// The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.
	StartPageNum *int `json:"start_page_num,omitempty" url:"start_page_num,omitempty"`
	// The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.
	EndPageNum   *int `json:"end_page_num,omitempty" url:"end_page_num,omitempty"`
	documentType string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PdfSearchResultMetaSourceRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PdfSearchResultMetaSourceRequest) DocumentType() string {
	return p.documentType
}

func (p *PdfSearchResultMetaSourceRequest) UnmarshalJSON(data []byte) error {
	type embed PdfSearchResultMetaSourceRequest
	var unmarshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PdfSearchResultMetaSourceRequest(unmarshaler.embed)
	if unmarshaler.DocumentType != "PDF" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PDF", unmarshaler.DocumentType)
	}
	p.documentType = unmarshaler.DocumentType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "document_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PdfSearchResultMetaSourceRequest) MarshalJSON() ([]byte, error) {
	type embed PdfSearchResultMetaSourceRequest
	var marshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed:        embed(*p),
		DocumentType: "PDF",
	}
	return json.Marshal(marshaler)
}

func (p *PdfSearchResultMetaSourceRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A block that holds a plain text string value.
type PlainTextPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Text        string                      `json:"text" url:"text"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlainTextPromptBlock) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlainTextPromptBlock) BlockType() string {
	return p.blockType
}

func (p *PlainTextPromptBlock) UnmarshalJSON(data []byte) error {
	type embed PlainTextPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlainTextPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "PLAIN_TEXT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PLAIN_TEXT", unmarshaler.BlockType)
	}
	p.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "block_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlainTextPromptBlock) MarshalJSON() ([]byte, error) {
	type embed PlainTextPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*p),
		BlockType: "PLAIN_TEXT",
	}
	return json.Marshal(marshaler)
}

func (p *PlainTextPromptBlock) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Price struct {
	Value float64  `json:"value" url:"value"`
	Unit  UnitEnum `json:"unit" url:"unit"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Price) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Price) UnmarshalJSON(data []byte) error {
	type unmarshaler Price
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Price(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Price) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Serializer for private vectorizer.
type PrivateVectorizer struct {
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PrivateVectorizer) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PrivateVectorizer) ModelName() string {
	return p.modelName
}

func (p *PrivateVectorizer) UnmarshalJSON(data []byte) error {
	type embed PrivateVectorizer
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PrivateVectorizer(unmarshaler.embed)
	if unmarshaler.ModelName != "private-vectorizer" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "private-vectorizer", unmarshaler.ModelName)
	}
	p.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *p, "model_name")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PrivateVectorizer) MarshalJSON() ([]byte, error) {
	type embed PrivateVectorizer
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*p),
		ModelName: "private-vectorizer",
	}
	return json.Marshal(marshaler)
}

func (p *PrivateVectorizer) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptBlock struct {
	JinjaPromptBlock        *JinjaPromptBlock
	ChatMessagePromptBlock  *ChatMessagePromptBlock
	VariablePromptBlock     *VariablePromptBlock
	RichTextPromptBlock     *RichTextPromptBlock
	FunctionCallPromptBlock *FunctionCallPromptBlock
	AudioPromptBlock        *AudioPromptBlock
	VideoPromptBlock        *VideoPromptBlock
	ImagePromptBlock        *ImagePromptBlock
	DocumentPromptBlock     *DocumentPromptBlock
}

func (p *PromptBlock) UnmarshalJSON(data []byte) error {
	valueJinjaPromptBlock := new(JinjaPromptBlock)
	if err := json.Unmarshal(data, &valueJinjaPromptBlock); err == nil {
		p.JinjaPromptBlock = valueJinjaPromptBlock
		return nil
	}
	valueChatMessagePromptBlock := new(ChatMessagePromptBlock)
	if err := json.Unmarshal(data, &valueChatMessagePromptBlock); err == nil {
		p.ChatMessagePromptBlock = valueChatMessagePromptBlock
		return nil
	}
	valueVariablePromptBlock := new(VariablePromptBlock)
	if err := json.Unmarshal(data, &valueVariablePromptBlock); err == nil {
		p.VariablePromptBlock = valueVariablePromptBlock
		return nil
	}
	valueRichTextPromptBlock := new(RichTextPromptBlock)
	if err := json.Unmarshal(data, &valueRichTextPromptBlock); err == nil {
		p.RichTextPromptBlock = valueRichTextPromptBlock
		return nil
	}
	valueFunctionCallPromptBlock := new(FunctionCallPromptBlock)
	if err := json.Unmarshal(data, &valueFunctionCallPromptBlock); err == nil {
		p.FunctionCallPromptBlock = valueFunctionCallPromptBlock
		return nil
	}
	valueAudioPromptBlock := new(AudioPromptBlock)
	if err := json.Unmarshal(data, &valueAudioPromptBlock); err == nil {
		p.AudioPromptBlock = valueAudioPromptBlock
		return nil
	}
	valueVideoPromptBlock := new(VideoPromptBlock)
	if err := json.Unmarshal(data, &valueVideoPromptBlock); err == nil {
		p.VideoPromptBlock = valueVideoPromptBlock
		return nil
	}
	valueImagePromptBlock := new(ImagePromptBlock)
	if err := json.Unmarshal(data, &valueImagePromptBlock); err == nil {
		p.ImagePromptBlock = valueImagePromptBlock
		return nil
	}
	valueDocumentPromptBlock := new(DocumentPromptBlock)
	if err := json.Unmarshal(data, &valueDocumentPromptBlock); err == nil {
		p.DocumentPromptBlock = valueDocumentPromptBlock
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PromptBlock) MarshalJSON() ([]byte, error) {
	if p.JinjaPromptBlock != nil {
		return json.Marshal(p.JinjaPromptBlock)
	}
	if p.ChatMessagePromptBlock != nil {
		return json.Marshal(p.ChatMessagePromptBlock)
	}
	if p.VariablePromptBlock != nil {
		return json.Marshal(p.VariablePromptBlock)
	}
	if p.RichTextPromptBlock != nil {
		return json.Marshal(p.RichTextPromptBlock)
	}
	if p.FunctionCallPromptBlock != nil {
		return json.Marshal(p.FunctionCallPromptBlock)
	}
	if p.AudioPromptBlock != nil {
		return json.Marshal(p.AudioPromptBlock)
	}
	if p.VideoPromptBlock != nil {
		return json.Marshal(p.VideoPromptBlock)
	}
	if p.ImagePromptBlock != nil {
		return json.Marshal(p.ImagePromptBlock)
	}
	if p.DocumentPromptBlock != nil {
		return json.Marshal(p.DocumentPromptBlock)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptBlockVisitor interface {
	VisitJinjaPromptBlock(*JinjaPromptBlock) error
	VisitChatMessagePromptBlock(*ChatMessagePromptBlock) error
	VisitVariablePromptBlock(*VariablePromptBlock) error
	VisitRichTextPromptBlock(*RichTextPromptBlock) error
	VisitFunctionCallPromptBlock(*FunctionCallPromptBlock) error
	VisitAudioPromptBlock(*AudioPromptBlock) error
	VisitVideoPromptBlock(*VideoPromptBlock) error
	VisitImagePromptBlock(*ImagePromptBlock) error
	VisitDocumentPromptBlock(*DocumentPromptBlock) error
}

func (p *PromptBlock) Accept(visitor PromptBlockVisitor) error {
	if p.JinjaPromptBlock != nil {
		return visitor.VisitJinjaPromptBlock(p.JinjaPromptBlock)
	}
	if p.ChatMessagePromptBlock != nil {
		return visitor.VisitChatMessagePromptBlock(p.ChatMessagePromptBlock)
	}
	if p.VariablePromptBlock != nil {
		return visitor.VisitVariablePromptBlock(p.VariablePromptBlock)
	}
	if p.RichTextPromptBlock != nil {
		return visitor.VisitRichTextPromptBlock(p.RichTextPromptBlock)
	}
	if p.FunctionCallPromptBlock != nil {
		return visitor.VisitFunctionCallPromptBlock(p.FunctionCallPromptBlock)
	}
	if p.AudioPromptBlock != nil {
		return visitor.VisitAudioPromptBlock(p.AudioPromptBlock)
	}
	if p.VideoPromptBlock != nil {
		return visitor.VisitVideoPromptBlock(p.VideoPromptBlock)
	}
	if p.ImagePromptBlock != nil {
		return visitor.VisitImagePromptBlock(p.ImagePromptBlock)
	}
	if p.DocumentPromptBlock != nil {
		return visitor.VisitDocumentPromptBlock(p.DocumentPromptBlock)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// * `ENABLED` - Enabled
// * `DISABLED` - Disabled
type PromptBlockState string

const (
	PromptBlockStateEnabled  PromptBlockState = "ENABLED"
	PromptBlockStateDisabled PromptBlockState = "DISABLED"
)

func NewPromptBlockStateFromString(s string) (PromptBlockState, error) {
	switch s {
	case "ENABLED":
		return PromptBlockStateEnabled, nil
	case "DISABLED":
		return PromptBlockStateDisabled, nil
	}
	var t PromptBlockState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PromptBlockState) Ptr() *PromptBlockState {
	return &p
}

type PromptDeploymentExpandMetaRequest struct {
	// If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`
	// If enabled, the response will include model host usage tracking. This may increase latency for some model hosts.
	Usage *bool `json:"usage,omitempty" url:"usage,omitempty"`
	// If enabled, the response will include model host cost tracking. This may increase latency for some model hosts.
	Cost *bool `json:"cost,omitempty" url:"cost,omitempty"`
	// If enabled, the response will include the reason provided by the model for why the execution finished.
	FinishReason *bool `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	// If enabled, the response will include the time in nanoseconds it took to execute the Prompt Deployment.
	Latency *bool `json:"latency,omitempty" url:"latency,omitempty"`
	// If enabled, the response will include the release tag of the Prompt Deployment.
	DeploymentReleaseTag *bool `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	// If enabled, the response will include the ID of the Prompt Version backing the deployment.
	PromptVersionId *bool `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptDeploymentExpandMetaRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptDeploymentExpandMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptDeploymentExpandMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptDeploymentExpandMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptDeploymentExpandMetaRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptDeploymentInputRequest struct {
	StringInputRequest      *StringInputRequest
	JsonInputRequest        *JsonInputRequest
	ChatHistoryInputRequest *ChatHistoryInputRequest
	AudioInputRequest       *AudioInputRequest
	VideoInputRequest       *VideoInputRequest
	ImageInputRequest       *ImageInputRequest
	DocumentInputRequest    *DocumentInputRequest
}

func (p *PromptDeploymentInputRequest) UnmarshalJSON(data []byte) error {
	valueStringInputRequest := new(StringInputRequest)
	if err := json.Unmarshal(data, &valueStringInputRequest); err == nil {
		p.StringInputRequest = valueStringInputRequest
		return nil
	}
	valueJsonInputRequest := new(JsonInputRequest)
	if err := json.Unmarshal(data, &valueJsonInputRequest); err == nil {
		p.JsonInputRequest = valueJsonInputRequest
		return nil
	}
	valueChatHistoryInputRequest := new(ChatHistoryInputRequest)
	if err := json.Unmarshal(data, &valueChatHistoryInputRequest); err == nil {
		p.ChatHistoryInputRequest = valueChatHistoryInputRequest
		return nil
	}
	valueAudioInputRequest := new(AudioInputRequest)
	if err := json.Unmarshal(data, &valueAudioInputRequest); err == nil {
		p.AudioInputRequest = valueAudioInputRequest
		return nil
	}
	valueVideoInputRequest := new(VideoInputRequest)
	if err := json.Unmarshal(data, &valueVideoInputRequest); err == nil {
		p.VideoInputRequest = valueVideoInputRequest
		return nil
	}
	valueImageInputRequest := new(ImageInputRequest)
	if err := json.Unmarshal(data, &valueImageInputRequest); err == nil {
		p.ImageInputRequest = valueImageInputRequest
		return nil
	}
	valueDocumentInputRequest := new(DocumentInputRequest)
	if err := json.Unmarshal(data, &valueDocumentInputRequest); err == nil {
		p.DocumentInputRequest = valueDocumentInputRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PromptDeploymentInputRequest) MarshalJSON() ([]byte, error) {
	if p.StringInputRequest != nil {
		return json.Marshal(p.StringInputRequest)
	}
	if p.JsonInputRequest != nil {
		return json.Marshal(p.JsonInputRequest)
	}
	if p.ChatHistoryInputRequest != nil {
		return json.Marshal(p.ChatHistoryInputRequest)
	}
	if p.AudioInputRequest != nil {
		return json.Marshal(p.AudioInputRequest)
	}
	if p.VideoInputRequest != nil {
		return json.Marshal(p.VideoInputRequest)
	}
	if p.ImageInputRequest != nil {
		return json.Marshal(p.ImageInputRequest)
	}
	if p.DocumentInputRequest != nil {
		return json.Marshal(p.DocumentInputRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptDeploymentInputRequestVisitor interface {
	VisitStringInputRequest(*StringInputRequest) error
	VisitJsonInputRequest(*JsonInputRequest) error
	VisitChatHistoryInputRequest(*ChatHistoryInputRequest) error
	VisitAudioInputRequest(*AudioInputRequest) error
	VisitVideoInputRequest(*VideoInputRequest) error
	VisitImageInputRequest(*ImageInputRequest) error
	VisitDocumentInputRequest(*DocumentInputRequest) error
}

func (p *PromptDeploymentInputRequest) Accept(visitor PromptDeploymentInputRequestVisitor) error {
	if p.StringInputRequest != nil {
		return visitor.VisitStringInputRequest(p.StringInputRequest)
	}
	if p.JsonInputRequest != nil {
		return visitor.VisitJsonInputRequest(p.JsonInputRequest)
	}
	if p.ChatHistoryInputRequest != nil {
		return visitor.VisitChatHistoryInputRequest(p.ChatHistoryInputRequest)
	}
	if p.AudioInputRequest != nil {
		return visitor.VisitAudioInputRequest(p.AudioInputRequest)
	}
	if p.VideoInputRequest != nil {
		return visitor.VisitVideoInputRequest(p.VideoInputRequest)
	}
	if p.ImageInputRequest != nil {
		return visitor.VisitImageInputRequest(p.ImageInputRequest)
	}
	if p.DocumentInputRequest != nil {
		return visitor.VisitDocumentInputRequest(p.DocumentInputRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptDeploymentParentContext struct {
	Parent                  *ParentContext         `json:"parent,omitempty" url:"parent,omitempty"`
	Links                   []*SpanLink            `json:"links,omitempty" url:"links,omitempty"`
	SpanId                  string                 `json:"span_id" url:"span_id"`
	DeploymentId            string                 `json:"deployment_id" url:"deployment_id"`
	DeploymentName          string                 `json:"deployment_name" url:"deployment_name"`
	DeploymentHistoryItemId string                 `json:"deployment_history_item_id" url:"deployment_history_item_id"`
	ReleaseTagId            string                 `json:"release_tag_id" url:"release_tag_id"`
	ReleaseTagName          string                 `json:"release_tag_name" url:"release_tag_name"`
	ExternalId              *string                `json:"external_id,omitempty" url:"external_id,omitempty"`
	Metadata                map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	PromptVersionId         string                 `json:"prompt_version_id" url:"prompt_version_id"`
	type_                   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptDeploymentParentContext) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptDeploymentParentContext) Type() string {
	return p.type_
}

func (p *PromptDeploymentParentContext) UnmarshalJSON(data []byte) error {
	type embed PromptDeploymentParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PromptDeploymentParentContext(unmarshaler.embed)
	if unmarshaler.Type != "PROMPT_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PROMPT_RELEASE_TAG", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptDeploymentParentContext) MarshalJSON() ([]byte, error) {
	type embed PromptDeploymentParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "PROMPT_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (p *PromptDeploymentParentContext) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type PromptExecutionMeta struct {
	ModelName            *string           `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int              `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string           `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string           `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`
	FinishReason         *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	Usage                *MlModelUsage     `json:"usage,omitempty" url:"usage,omitempty"`
	Cost                 *Price            `json:"cost,omitempty" url:"cost,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptExecutionMeta) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type PromptNodeExecutionMeta struct {
	Usage     *MlModelUsage `json:"usage,omitempty" url:"usage,omitempty"`
	Cost      *Price        `json:"cost,omitempty" url:"cost,omitempty"`
	ModelName *string       `json:"model_name,omitempty" url:"model_name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeExecutionMeta) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeExecutionMeta) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A Node Result Event emitted from a Prompt Node.
type PromptNodeResult struct {
	Data  *PromptNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeResult) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeResult) Type() string {
	return p.type_
}

func (p *PromptNodeResult) UnmarshalJSON(data []byte) error {
	type embed PromptNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PromptNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "PROMPT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PROMPT", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResult) MarshalJSON() ([]byte, error) {
	type embed PromptNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "PROMPT",
	}
	return json.Marshal(marshaler)
}

func (p *PromptNodeResult) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptNodeResultData struct {
	ExecutionMeta *PromptNodeExecutionMeta `json:"execution_meta,omitempty" url:"execution_meta,omitempty"`
	OutputId      string                   `json:"output_id" url:"output_id"`
	ArrayOutputId *string                  `json:"array_output_id,omitempty" url:"array_output_id,omitempty"`
	ExecutionId   *string                  `json:"execution_id,omitempty" url:"execution_id,omitempty"`
	Text          *string                  `json:"text,omitempty" url:"text,omitempty"`
	Delta         *string                  `json:"delta,omitempty" url:"delta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeResultData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResultData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptOutput struct {
	StringVellumValue       *StringVellumValue
	JsonVellumValue         *JsonVellumValue
	ErrorVellumValue        *ErrorVellumValue
	FunctionCallVellumValue *FunctionCallVellumValue
	ThinkingVellumValue     *ThinkingVellumValue
}

func (p *PromptOutput) UnmarshalJSON(data []byte) error {
	valueStringVellumValue := new(StringVellumValue)
	if err := json.Unmarshal(data, &valueStringVellumValue); err == nil {
		p.StringVellumValue = valueStringVellumValue
		return nil
	}
	valueJsonVellumValue := new(JsonVellumValue)
	if err := json.Unmarshal(data, &valueJsonVellumValue); err == nil {
		p.JsonVellumValue = valueJsonVellumValue
		return nil
	}
	valueErrorVellumValue := new(ErrorVellumValue)
	if err := json.Unmarshal(data, &valueErrorVellumValue); err == nil {
		p.ErrorVellumValue = valueErrorVellumValue
		return nil
	}
	valueFunctionCallVellumValue := new(FunctionCallVellumValue)
	if err := json.Unmarshal(data, &valueFunctionCallVellumValue); err == nil {
		p.FunctionCallVellumValue = valueFunctionCallVellumValue
		return nil
	}
	valueThinkingVellumValue := new(ThinkingVellumValue)
	if err := json.Unmarshal(data, &valueThinkingVellumValue); err == nil {
		p.ThinkingVellumValue = valueThinkingVellumValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PromptOutput) MarshalJSON() ([]byte, error) {
	if p.StringVellumValue != nil {
		return json.Marshal(p.StringVellumValue)
	}
	if p.JsonVellumValue != nil {
		return json.Marshal(p.JsonVellumValue)
	}
	if p.ErrorVellumValue != nil {
		return json.Marshal(p.ErrorVellumValue)
	}
	if p.FunctionCallVellumValue != nil {
		return json.Marshal(p.FunctionCallVellumValue)
	}
	if p.ThinkingVellumValue != nil {
		return json.Marshal(p.ThinkingVellumValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptOutputVisitor interface {
	VisitStringVellumValue(*StringVellumValue) error
	VisitJsonVellumValue(*JsonVellumValue) error
	VisitErrorVellumValue(*ErrorVellumValue) error
	VisitFunctionCallVellumValue(*FunctionCallVellumValue) error
	VisitThinkingVellumValue(*ThinkingVellumValue) error
}

func (p *PromptOutput) Accept(visitor PromptOutputVisitor) error {
	if p.StringVellumValue != nil {
		return visitor.VisitStringVellumValue(p.StringVellumValue)
	}
	if p.JsonVellumValue != nil {
		return visitor.VisitJsonVellumValue(p.JsonVellumValue)
	}
	if p.ErrorVellumValue != nil {
		return visitor.VisitErrorVellumValue(p.ErrorVellumValue)
	}
	if p.FunctionCallVellumValue != nil {
		return visitor.VisitFunctionCallVellumValue(p.FunctionCallVellumValue)
	}
	if p.ThinkingVellumValue != nil {
		return visitor.VisitThinkingVellumValue(p.ThinkingVellumValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptParameters struct {
	Stop             []string               `json:"stop,omitempty" url:"stop,omitempty"`
	Temperature      *float64               `json:"temperature,omitempty" url:"temperature,omitempty"`
	MaxTokens        *int                   `json:"max_tokens,omitempty" url:"max_tokens,omitempty"`
	TopP             *float64               `json:"top_p,omitempty" url:"top_p,omitempty"`
	TopK             *int                   `json:"top_k,omitempty" url:"top_k,omitempty"`
	FrequencyPenalty *float64               `json:"frequency_penalty,omitempty" url:"frequency_penalty,omitempty"`
	PresencePenalty  *float64               `json:"presence_penalty,omitempty" url:"presence_penalty,omitempty"`
	LogitBias        map[string]*float64    `json:"logit_bias,omitempty" url:"logit_bias,omitempty"`
	CustomParameters map[string]interface{} `json:"custom_parameters,omitempty" url:"custom_parameters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptParameters) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptParameters) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptParameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptParameters(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptParameters) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptSettings struct {
	Timeout       *float64 `json:"timeout,omitempty" url:"timeout,omitempty"`
	StreamEnabled *bool    `json:"stream_enabled,omitempty" url:"stream_enabled,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptSettings) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptSettings(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptSettings) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RawPromptExecutionOverridesRequest struct {
	Body map[string]interface{} `json:"body,omitempty" url:"body,omitempty"`
	// The raw headers to send to the model host.
	Headers map[string]*string `json:"headers,omitempty" url:"headers,omitempty"`
	// The raw URL to send to the model host.
	Url *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RawPromptExecutionOverridesRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawPromptExecutionOverridesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RawPromptExecutionOverridesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawPromptExecutionOverridesRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawPromptExecutionOverridesRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Configuration for Reducto chunking
type ReductoChunkerConfig struct {
	CharacterLimit *int `json:"character_limit,omitempty" url:"character_limit,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunkerConfig) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ReductoChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReductoChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunkerConfig) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Reducto chunking
type ReductoChunking struct {
	ChunkerConfig *ReductoChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunking) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunking) ChunkerName() string {
	return r.chunkerName
}

func (r *ReductoChunking) UnmarshalJSON(data []byte) error {
	type embed ReductoChunking
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReductoChunking(unmarshaler.embed)
	if unmarshaler.ChunkerName != "reducto-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "reducto-chunker", unmarshaler.ChunkerName)
	}
	r.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *r, "chunker_name")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunking) MarshalJSON() ([]byte, error) {
	type embed ReductoChunking
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*r),
		ChunkerName: "reducto-chunker",
	}
	return json.Marshal(marshaler)
}

func (r *ReductoChunking) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The final data returned indicating an error occurred during the stream.
type RejectedExecutePromptEvent struct {
	Error       *VellumError                 `json:"error" url:"error"`
	ExecutionId string                       `json:"execution_id" url:"execution_id"`
	Meta        *RejectedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecutePromptEvent) State() string {
	return r.state
}

func (r *RejectedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecutePromptEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the model containing an error of what went wrong.
type RejectedExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string       `json:"execution_id" url:"execution_id"`
	Error       *VellumError `json:"error" url:"error"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecutePromptResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecutePromptResponse) State() string {
	return r.state
}

func (r *RejectedExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type embed RejectedExecutePromptResponse
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecutePromptResponse(unmarshaler.embed)
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptResponse) MarshalJSON() ([]byte, error) {
	type embed RejectedExecutePromptResponse
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecutePromptResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the Workflow execution containing an error specifying what went wrong.
type RejectedExecuteWorkflowWorkflowResultEvent struct {
	Id    string              `json:"id" url:"id"`
	Ts    time.Time           `json:"ts" url:"ts"`
	Error *WorkflowEventError `json:"error" url:"error"`
	state string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) State() string {
	return r.state
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.Time()
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
		Ts:    core.NewDateTime(r.Ts),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type RejectedPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedPromptExecutionMeta) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// An event that indicates that the node has rejected its execution.
type RejectedWorkflowNodeResultEvent struct {
	Id                string                  `json:"id" url:"id"`
	NodeId            string                  `json:"node_id" url:"node_id"`
	NodeResultId      string                  `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time              `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                 `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Error             *WorkflowEventError     `json:"error" url:"error"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedWorkflowNodeResultEvent) State() string {
	return r.state
}

func (r *RejectedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedWorkflowNodeResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
		Ts:    core.NewOptionalDateTime(r.Ts),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedWorkflowNodeResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReleaseCreatedBy struct {
	Id       string  `json:"id" url:"id"`
	FullName *string `json:"full_name,omitempty" url:"full_name,omitempty"`
	Email    string  `json:"email" url:"email"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseCreatedBy) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseCreatedBy) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseCreatedBy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseCreatedBy(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseCreatedBy) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReleaseEnvironment struct {
	Id    string `json:"id" url:"id"`
	Name  string `json:"name" url:"name"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseEnvironment) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseEnvironment) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseEnvironment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseEnvironment(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseEnvironment) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReleaseReleaseTag struct {
	// The name of the Release Tag
	Name string `json:"name" url:"name"`
	// The source of how the Release Tag was originally created
	//
	// * `SYSTEM` - System
	// * `USER` - User
	Source ReleaseTagSource `json:"source" url:"source"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseReleaseTag) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseReleaseTag) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseReleaseTag
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseReleaseTag(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseReleaseTag) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReleaseReviewReviewer struct {
	Id       string  `json:"id" url:"id"`
	FullName *string `json:"full_name,omitempty" url:"full_name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseReviewReviewer) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseReviewReviewer) UnmarshalJSON(data []byte) error {
	type unmarshaler ReleaseReviewReviewer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReleaseReviewReviewer(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseReviewReviewer) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// * `APPROVED` - Approved
// * `CHANGES_REQUESTED` - Changes Requested
// * `COMMENTED` - Commented
type ReleaseReviewState string

const (
	ReleaseReviewStateApproved         ReleaseReviewState = "APPROVED"
	ReleaseReviewStateChangesRequested ReleaseReviewState = "CHANGES_REQUESTED"
	ReleaseReviewStateCommented        ReleaseReviewState = "COMMENTED"
)

func NewReleaseReviewStateFromString(s string) (ReleaseReviewState, error) {
	switch s {
	case "APPROVED":
		return ReleaseReviewStateApproved, nil
	case "CHANGES_REQUESTED":
		return ReleaseReviewStateChangesRequested, nil
	case "COMMENTED":
		return ReleaseReviewStateCommented, nil
	}
	var t ReleaseReviewState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReleaseReviewState) Ptr() *ReleaseReviewState {
	return &r
}

type ReleaseTagRelease struct {
	Id        string    `json:"id" url:"id"`
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReleaseTagRelease) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReleaseTagRelease) UnmarshalJSON(data []byte) error {
	type embed ReleaseTagRelease
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReleaseTagRelease(unmarshaler.embed)
	r.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReleaseTagRelease) MarshalJSON() ([]byte, error) {
	type embed ReleaseTagRelease
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*r),
		Timestamp: core.NewDateTime(r.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (r *ReleaseTagRelease) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// * `SYSTEM` - System
// * `USER` - User
type ReleaseTagSource string

const (
	ReleaseTagSourceSystem ReleaseTagSource = "SYSTEM"
	ReleaseTagSourceUser   ReleaseTagSource = "USER"
)

func NewReleaseTagSourceFromString(s string) (ReleaseTagSource, error) {
	switch s {
	case "SYSTEM":
		return ReleaseTagSourceSystem, nil
	case "USER":
		return ReleaseTagSourceUser, nil
	}
	var t ReleaseTagSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReleaseTagSource) Ptr() *ReleaseTagSource {
	return &r
}

type RichTextChildBlock struct {
	VariablePromptBlock  *VariablePromptBlock
	PlainTextPromptBlock *PlainTextPromptBlock
}

func (r *RichTextChildBlock) UnmarshalJSON(data []byte) error {
	valueVariablePromptBlock := new(VariablePromptBlock)
	if err := json.Unmarshal(data, &valueVariablePromptBlock); err == nil {
		r.VariablePromptBlock = valueVariablePromptBlock
		return nil
	}
	valuePlainTextPromptBlock := new(PlainTextPromptBlock)
	if err := json.Unmarshal(data, &valuePlainTextPromptBlock); err == nil {
		r.PlainTextPromptBlock = valuePlainTextPromptBlock
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RichTextChildBlock) MarshalJSON() ([]byte, error) {
	if r.VariablePromptBlock != nil {
		return json.Marshal(r.VariablePromptBlock)
	}
	if r.PlainTextPromptBlock != nil {
		return json.Marshal(r.PlainTextPromptBlock)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RichTextChildBlockVisitor interface {
	VisitVariablePromptBlock(*VariablePromptBlock) error
	VisitPlainTextPromptBlock(*PlainTextPromptBlock) error
}

func (r *RichTextChildBlock) Accept(visitor RichTextChildBlockVisitor) error {
	if r.VariablePromptBlock != nil {
		return visitor.VisitVariablePromptBlock(r.VariablePromptBlock)
	}
	if r.PlainTextPromptBlock != nil {
		return visitor.VisitPlainTextPromptBlock(r.PlainTextPromptBlock)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// A block that includes a combination of plain text and variable blocks.
type RichTextPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Blocks      []*RichTextChildBlock       `json:"blocks" url:"blocks"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RichTextPromptBlock) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RichTextPromptBlock) BlockType() string {
	return r.blockType
}

func (r *RichTextPromptBlock) UnmarshalJSON(data []byte) error {
	type embed RichTextPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RichTextPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "RICH_TEXT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "RICH_TEXT", unmarshaler.BlockType)
	}
	r.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *r, "block_type")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RichTextPromptBlock) MarshalJSON() ([]byte, error) {
	type embed RichTextPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*r),
		BlockType: "RICH_TEXT",
	}
	return json.Marshal(marshaler)
}

func (r *RichTextPromptBlock) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SearchFiltersRequest struct {
	// The document external IDs to filter by
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`
	// The metadata filters to apply to the search
	Metadata *MetadataFiltersRequest `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchFiltersRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchFiltersRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchFiltersRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchFiltersRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchFiltersRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A Node Result Event emitted from a Search Node.
type SearchNodeResult struct {
	Data  *SearchNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchNodeResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchNodeResult) Type() string {
	return s.type_
}

func (s *SearchNodeResult) UnmarshalJSON(data []byte) error {
	type embed SearchNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResult) MarshalJSON() ([]byte, error) {
	type embed SearchNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH",
	}
	return json.Marshal(marshaler)
}

func (s *SearchNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchNodeResultData struct {
	ResultsOutputId string `json:"results_output_id" url:"results_output_id"`
	// The results of the search. Each result represents a chunk that matches the search query.
	Results      []*SearchResult `json:"results" url:"results"`
	TextOutputId string          `json:"text_output_id" url:"text_output_id"`
	Text         *string         `json:"text,omitempty" url:"text,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchNodeResultData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchRequestOptionsRequest struct {
	// The maximum number of results to return.
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// The weights to use for the search. Must add up to 1.0.
	Weights *SearchWeightsRequest `json:"weights,omitempty" url:"weights,omitempty"`
	// The configuration for merging results.
	ResultMerging *SearchResultMergingRequest `json:"result_merging,omitempty" url:"result_merging,omitempty"`
	// The filters to apply to the search.
	Filters *SearchFiltersRequest `json:"filters,omitempty" url:"filters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchRequestOptionsRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchRequestOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchRequestOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchRequestOptionsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchRequestOptionsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResponse struct {
	// The results of the search. Each result represents a chunk that matches the search query.
	Results []*SearchResult `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResult struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords" url:"keywords"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocument `json:"document" url:"document"`
	// Additional information about the search result.
	Meta *SearchResultMeta `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocument struct {
	// The ID of the document.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultDocument) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocument(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocumentRequest struct {
	// The ID of the document.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultDocumentRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocumentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocumentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMergingRequest struct {
	// Whether to enable merging results
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMergingRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMergingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMergingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMergingRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMergingRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMeta struct {
	Source *ComponentsSchemasPdfSearchResultMetaSource `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMeta) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMeta) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMetaRequest struct {
	Source *ComponentsSchemasPdfSearchResultMetaSourceRequest `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMetaRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMetaRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultRequest struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords" url:"keywords"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocumentRequest `json:"document" url:"document"`
	// Additional information about the search result.
	Meta *SearchResultMetaRequest `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A user input representing a search results value
type SearchResultsInput struct {
	// The variable's name
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultsInput) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultsInput) Type() string {
	return s.type_
}

func (s *SearchResultsInput) UnmarshalJSON(data []byte) error {
	type embed SearchResultsInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchResultsInput(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH_RESULTS", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsInput) MarshalJSON() ([]byte, error) {
	type embed SearchResultsInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (s *SearchResultsInput) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing Search Results.
type SearchResultsVellumValue struct {
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultsVellumValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultsVellumValue) Type() string {
	return s.type_
}

func (s *SearchResultsVellumValue) UnmarshalJSON(data []byte) error {
	type embed SearchResultsVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchResultsVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH_RESULTS", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsVellumValue) MarshalJSON() ([]byte, error) {
	type embed SearchResultsVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (s *SearchResultsVellumValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing Search Results.
type SearchResultsVellumValueRequest struct {
	Value []*SearchResultRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultsVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultsVellumValueRequest) Type() string {
	return s.type_
}

func (s *SearchResultsVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed SearchResultsVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchResultsVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH_RESULTS", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed SearchResultsVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (s *SearchResultsVellumValueRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchWeightsRequest struct {
	// The relative weight to give to semantic similarity
	SemanticSimilarity *float64 `json:"semantic_similarity,omitempty" url:"semantic_similarity,omitempty"`
	// The relative weight to give to keywords
	Keywords *float64 `json:"keywords,omitempty" url:"keywords,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchWeightsRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchWeightsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchWeightsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchWeightsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchWeightsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration for sentence chunking
type SentenceChunkerConfig struct {
	CharacterLimit  *int     `json:"character_limit,omitempty" url:"character_limit,omitempty"`
	MinOverlapRatio *float64 `json:"min_overlap_ratio,omitempty" url:"min_overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunkerConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SentenceChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SentenceChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunkerConfig) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Sentence chunking
type SentenceChunking struct {
	ChunkerConfig *SentenceChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunking) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunking) ChunkerName() string {
	return s.chunkerName
}

func (s *SentenceChunking) UnmarshalJSON(data []byte) error {
	type embed SentenceChunking
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SentenceChunking(unmarshaler.embed)
	if unmarshaler.ChunkerName != "sentence-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "sentence-chunker", unmarshaler.ChunkerName)
	}
	s.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *s, "chunker_name")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunking) MarshalJSON() ([]byte, error) {
	type embed SentenceChunking
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*s),
		ChunkerName: "sentence-chunker",
	}
	return json.Marshal(marshaler)
}

func (s *SentenceChunking) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimReleaseReview struct {
	Id       string                 `json:"id" url:"id"`
	Created  time.Time              `json:"created" url:"created"`
	Reviewer *ReleaseReviewReviewer `json:"reviewer" url:"reviewer"`
	State    ReleaseReviewState     `json:"state" url:"state"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimReleaseReview) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimReleaseReview) UnmarshalJSON(data []byte) error {
	type embed SlimReleaseReview
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimReleaseReview(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimReleaseReview) MarshalJSON() ([]byte, error) {
	type embed SlimReleaseReview
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*s),
		Created: core.NewDateTime(s.Created),
	}
	return json.Marshal(marshaler)
}

func (s *SlimReleaseReview) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SpanLink struct {
	TraceId     string           `json:"trace_id" url:"trace_id"`
	Type        SpanLinkTypeEnum `json:"type" url:"type"`
	SpanContext *ParentContext   `json:"span_context" url:"span_context"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SpanLink) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SpanLink) UnmarshalJSON(data []byte) error {
	type unmarshaler SpanLink
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SpanLink(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SpanLink) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// * `TRIGGERED_BY` - TRIGGERED_BY
// * `PREVIOUS_SPAN` - PREVIOUS_SPAN
// * `ROOT_SPAN` - ROOT_SPAN
type SpanLinkTypeEnum string

const (
	SpanLinkTypeEnumTriggeredBy  SpanLinkTypeEnum = "TRIGGERED_BY"
	SpanLinkTypeEnumPreviousSpan SpanLinkTypeEnum = "PREVIOUS_SPAN"
	SpanLinkTypeEnumRootSpan     SpanLinkTypeEnum = "ROOT_SPAN"
)

func NewSpanLinkTypeEnumFromString(s string) (SpanLinkTypeEnum, error) {
	switch s {
	case "TRIGGERED_BY":
		return SpanLinkTypeEnumTriggeredBy, nil
	case "PREVIOUS_SPAN":
		return SpanLinkTypeEnumPreviousSpan, nil
	case "ROOT_SPAN":
		return SpanLinkTypeEnumRootSpan, nil
	}
	var t SpanLinkTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SpanLinkTypeEnum) Ptr() *SpanLinkTypeEnum {
	return &s
}

// The data returned for each delta during the prompt execution stream.
type StreamingExecutePromptEvent struct {
	Output      *PromptOutput                 `json:"output" url:"output"`
	OutputIndex int                           `json:"output_index" url:"output_index"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *StreamingPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw   map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	state string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingExecutePromptEvent) State() string {
	return s.state
}

func (s *StreamingExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed StreamingExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StreamingExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "STREAMING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STREAMING", unmarshaler.State)
	}
	s.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *s, "state")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed StreamingExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*s),
		State: "STREAMING",
	}
	return json.Marshal(marshaler)
}

func (s *StreamingExecutePromptEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type StreamingPromptExecutionMeta struct {
	Latency *int `json:"latency,omitempty" url:"latency,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamingPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamingPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingPromptExecutionMeta) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// An event that indicates that the node has execution is in progress.
type StreamingWorkflowNodeResultEvent struct {
	Id                string                   `json:"id" url:"id"`
	NodeId            string                   `json:"node_id" url:"node_id"`
	NodeResultId      string                   `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time               `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData  `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                  `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Output            *NodeOutputCompiledValue `json:"output,omitempty" url:"output,omitempty"`
	OutputIndex       *int                     `json:"output_index,omitempty" url:"output_index,omitempty"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingWorkflowNodeResultEvent) State() string {
	return s.state
}

func (s *StreamingWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed StreamingWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StreamingWorkflowNodeResultEvent(unmarshaler.embed)
	s.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "STREAMING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STREAMING", unmarshaler.State)
	}
	s.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *s, "state")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed StreamingWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*s),
		Ts:    core.NewOptionalDateTime(s.Ts),
		State: "STREAMING",
	}
	return json.Marshal(marshaler)
}

func (s *StreamingWorkflowNodeResultEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContent struct {
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringChatMessageContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringChatMessageContent) Type() string {
	return s.type_
}

func (s *StringChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed StringChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed StringChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringChatMessageContent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContentRequest struct {
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringChatMessageContentRequest) Type() string {
	return s.type_
}

func (s *StringChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed StringChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed StringChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringChatMessageContentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A user input representing a string value
type StringInput struct {
	// The variable's name
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringInput) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringInput) Type() string {
	return s.type_
}

func (s *StringInput) UnmarshalJSON(data []byte) error {
	type embed StringInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringInput(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringInput) MarshalJSON() ([]byte, error) {
	type embed StringInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringInput) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A user input representing a string value
type StringInputRequest struct {
	// The variable's name
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringInputRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringInputRequest) Type() string {
	return s.type_
}

func (s *StringInputRequest) UnmarshalJSON(data []byte) error {
	type embed StringInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringInputRequest) MarshalJSON() ([]byte, error) {
	type embed StringInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing a string.
type StringVellumValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVellumValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVellumValue) Type() string {
	return s.type_
}

func (s *StringVellumValue) UnmarshalJSON(data []byte) error {
	type embed StringVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVellumValue) MarshalJSON() ([]byte, error) {
	type embed StringVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringVellumValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing a string.
type StringVellumValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVellumValueRequest) Type() string {
	return s.type_
}

func (s *StringVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed StringVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed StringVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringVellumValueRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitCompletionActualRequest struct {
	// The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// Text representing what the completion _should_ have been.
	Text *string `json:"text,omitempty" url:"text,omitempty"`
	// A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *time.Time `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubmitCompletionActualRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubmitCompletionActualRequest) UnmarshalJSON(data []byte) error {
	type embed SubmitCompletionActualRequest
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SubmitCompletionActualRequest(unmarshaler.embed)
	s.Timestamp = unmarshaler.Timestamp.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitCompletionActualRequest) MarshalJSON() ([]byte, error) {
	type embed SubmitCompletionActualRequest
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed:     embed(*s),
		Timestamp: core.NewOptionalDateTime(s.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (s *SubmitCompletionActualRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitWorkflowExecutionActualRequest struct {
	WorkflowExecutionActualStringRequest      *WorkflowExecutionActualStringRequest
	WorkflowExecutionActualJsonRequest        *WorkflowExecutionActualJsonRequest
	WorkflowExecutionActualChatHistoryRequest *WorkflowExecutionActualChatHistoryRequest
}

func (s *SubmitWorkflowExecutionActualRequest) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionActualStringRequest := new(WorkflowExecutionActualStringRequest)
	if err := json.Unmarshal(data, &valueWorkflowExecutionActualStringRequest); err == nil {
		s.WorkflowExecutionActualStringRequest = valueWorkflowExecutionActualStringRequest
		return nil
	}
	valueWorkflowExecutionActualJsonRequest := new(WorkflowExecutionActualJsonRequest)
	if err := json.Unmarshal(data, &valueWorkflowExecutionActualJsonRequest); err == nil {
		s.WorkflowExecutionActualJsonRequest = valueWorkflowExecutionActualJsonRequest
		return nil
	}
	valueWorkflowExecutionActualChatHistoryRequest := new(WorkflowExecutionActualChatHistoryRequest)
	if err := json.Unmarshal(data, &valueWorkflowExecutionActualChatHistoryRequest); err == nil {
		s.WorkflowExecutionActualChatHistoryRequest = valueWorkflowExecutionActualChatHistoryRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SubmitWorkflowExecutionActualRequest) MarshalJSON() ([]byte, error) {
	if s.WorkflowExecutionActualStringRequest != nil {
		return json.Marshal(s.WorkflowExecutionActualStringRequest)
	}
	if s.WorkflowExecutionActualJsonRequest != nil {
		return json.Marshal(s.WorkflowExecutionActualJsonRequest)
	}
	if s.WorkflowExecutionActualChatHistoryRequest != nil {
		return json.Marshal(s.WorkflowExecutionActualChatHistoryRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SubmitWorkflowExecutionActualRequestVisitor interface {
	VisitWorkflowExecutionActualStringRequest(*WorkflowExecutionActualStringRequest) error
	VisitWorkflowExecutionActualJsonRequest(*WorkflowExecutionActualJsonRequest) error
	VisitWorkflowExecutionActualChatHistoryRequest(*WorkflowExecutionActualChatHistoryRequest) error
}

func (s *SubmitWorkflowExecutionActualRequest) Accept(visitor SubmitWorkflowExecutionActualRequestVisitor) error {
	if s.WorkflowExecutionActualStringRequest != nil {
		return visitor.VisitWorkflowExecutionActualStringRequest(s.WorkflowExecutionActualStringRequest)
	}
	if s.WorkflowExecutionActualJsonRequest != nil {
		return visitor.VisitWorkflowExecutionActualJsonRequest(s.WorkflowExecutionActualJsonRequest)
	}
	if s.WorkflowExecutionActualChatHistoryRequest != nil {
		return visitor.VisitWorkflowExecutionActualChatHistoryRequest(s.WorkflowExecutionActualChatHistoryRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// A Node Result Event emitted from a Subworkflow Node.
type SubworkflowNodeResult struct {
	Data  *SubworkflowNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubworkflowNodeResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubworkflowNodeResult) Type() string {
	return s.type_
}

func (s *SubworkflowNodeResult) UnmarshalJSON(data []byte) error {
	type embed SubworkflowNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SubworkflowNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "SUBWORKFLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SUBWORKFLOW", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubworkflowNodeResult) MarshalJSON() ([]byte, error) {
	type embed SubworkflowNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SUBWORKFLOW",
	}
	return json.Marshal(marshaler)
}

func (s *SubworkflowNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubworkflowNodeResultData struct {
	ExecutionId *string `json:"execution_id,omitempty" url:"execution_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubworkflowNodeResultData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubworkflowNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SubworkflowNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubworkflowNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubworkflowNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TemplatingNodeArrayResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeArrayResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeArrayResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeArrayResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeArrayResult(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ARRAY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeArrayResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeArrayResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeChatHistoryResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeChatHistoryResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeChatHistoryResult(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CHAT_HISTORY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeChatHistoryResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeChatHistoryResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeErrorResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeErrorResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeErrorResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeErrorResult(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeErrorResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeErrorResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeFunctionCallResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeFunctionCallResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeFunctionCallResult(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "FUNCTION_CALL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeFunctionCallResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeFunctionCallResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeJsonResult struct {
	Id    string      `json:"id" url:"id"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeJsonResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeJsonResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeJsonResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeJsonResult(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeJsonResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeJsonResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeNumberResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeNumberResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeNumberResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeNumberResult(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeNumberResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeNumberResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Templating Node.
type TemplatingNodeResult struct {
	Data  *TemplatingNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "TEMPLATING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "TEMPLATING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "TEMPLATING",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultData struct {
	Output *TemplatingNodeResultOutput `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultOutput struct {
	TemplatingNodeStringResult        *TemplatingNodeStringResult
	TemplatingNodeNumberResult        *TemplatingNodeNumberResult
	TemplatingNodeJsonResult          *TemplatingNodeJsonResult
	TemplatingNodeChatHistoryResult   *TemplatingNodeChatHistoryResult
	TemplatingNodeSearchResultsResult *TemplatingNodeSearchResultsResult
	TemplatingNodeErrorResult         *TemplatingNodeErrorResult
	TemplatingNodeArrayResult         *TemplatingNodeArrayResult
	TemplatingNodeFunctionCallResult  *TemplatingNodeFunctionCallResult
}

func (t *TemplatingNodeResultOutput) UnmarshalJSON(data []byte) error {
	valueTemplatingNodeStringResult := new(TemplatingNodeStringResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeStringResult); err == nil {
		t.TemplatingNodeStringResult = valueTemplatingNodeStringResult
		return nil
	}
	valueTemplatingNodeNumberResult := new(TemplatingNodeNumberResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeNumberResult); err == nil {
		t.TemplatingNodeNumberResult = valueTemplatingNodeNumberResult
		return nil
	}
	valueTemplatingNodeJsonResult := new(TemplatingNodeJsonResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeJsonResult); err == nil {
		t.TemplatingNodeJsonResult = valueTemplatingNodeJsonResult
		return nil
	}
	valueTemplatingNodeChatHistoryResult := new(TemplatingNodeChatHistoryResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeChatHistoryResult); err == nil {
		t.TemplatingNodeChatHistoryResult = valueTemplatingNodeChatHistoryResult
		return nil
	}
	valueTemplatingNodeSearchResultsResult := new(TemplatingNodeSearchResultsResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeSearchResultsResult); err == nil {
		t.TemplatingNodeSearchResultsResult = valueTemplatingNodeSearchResultsResult
		return nil
	}
	valueTemplatingNodeErrorResult := new(TemplatingNodeErrorResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeErrorResult); err == nil {
		t.TemplatingNodeErrorResult = valueTemplatingNodeErrorResult
		return nil
	}
	valueTemplatingNodeArrayResult := new(TemplatingNodeArrayResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeArrayResult); err == nil {
		t.TemplatingNodeArrayResult = valueTemplatingNodeArrayResult
		return nil
	}
	valueTemplatingNodeFunctionCallResult := new(TemplatingNodeFunctionCallResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeFunctionCallResult); err == nil {
		t.TemplatingNodeFunctionCallResult = valueTemplatingNodeFunctionCallResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TemplatingNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.TemplatingNodeStringResult != nil {
		return json.Marshal(t.TemplatingNodeStringResult)
	}
	if t.TemplatingNodeNumberResult != nil {
		return json.Marshal(t.TemplatingNodeNumberResult)
	}
	if t.TemplatingNodeJsonResult != nil {
		return json.Marshal(t.TemplatingNodeJsonResult)
	}
	if t.TemplatingNodeChatHistoryResult != nil {
		return json.Marshal(t.TemplatingNodeChatHistoryResult)
	}
	if t.TemplatingNodeSearchResultsResult != nil {
		return json.Marshal(t.TemplatingNodeSearchResultsResult)
	}
	if t.TemplatingNodeErrorResult != nil {
		return json.Marshal(t.TemplatingNodeErrorResult)
	}
	if t.TemplatingNodeArrayResult != nil {
		return json.Marshal(t.TemplatingNodeArrayResult)
	}
	if t.TemplatingNodeFunctionCallResult != nil {
		return json.Marshal(t.TemplatingNodeFunctionCallResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TemplatingNodeResultOutputVisitor interface {
	VisitTemplatingNodeStringResult(*TemplatingNodeStringResult) error
	VisitTemplatingNodeNumberResult(*TemplatingNodeNumberResult) error
	VisitTemplatingNodeJsonResult(*TemplatingNodeJsonResult) error
	VisitTemplatingNodeChatHistoryResult(*TemplatingNodeChatHistoryResult) error
	VisitTemplatingNodeSearchResultsResult(*TemplatingNodeSearchResultsResult) error
	VisitTemplatingNodeErrorResult(*TemplatingNodeErrorResult) error
	VisitTemplatingNodeArrayResult(*TemplatingNodeArrayResult) error
	VisitTemplatingNodeFunctionCallResult(*TemplatingNodeFunctionCallResult) error
}

func (t *TemplatingNodeResultOutput) Accept(visitor TemplatingNodeResultOutputVisitor) error {
	if t.TemplatingNodeStringResult != nil {
		return visitor.VisitTemplatingNodeStringResult(t.TemplatingNodeStringResult)
	}
	if t.TemplatingNodeNumberResult != nil {
		return visitor.VisitTemplatingNodeNumberResult(t.TemplatingNodeNumberResult)
	}
	if t.TemplatingNodeJsonResult != nil {
		return visitor.VisitTemplatingNodeJsonResult(t.TemplatingNodeJsonResult)
	}
	if t.TemplatingNodeChatHistoryResult != nil {
		return visitor.VisitTemplatingNodeChatHistoryResult(t.TemplatingNodeChatHistoryResult)
	}
	if t.TemplatingNodeSearchResultsResult != nil {
		return visitor.VisitTemplatingNodeSearchResultsResult(t.TemplatingNodeSearchResultsResult)
	}
	if t.TemplatingNodeErrorResult != nil {
		return visitor.VisitTemplatingNodeErrorResult(t.TemplatingNodeErrorResult)
	}
	if t.TemplatingNodeArrayResult != nil {
		return visitor.VisitTemplatingNodeArrayResult(t.TemplatingNodeArrayResult)
	}
	if t.TemplatingNodeFunctionCallResult != nil {
		return visitor.VisitTemplatingNodeFunctionCallResult(t.TemplatingNodeFunctionCallResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TemplatingNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeSearchResultsResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeSearchResultsResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeSearchResultsResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "SEARCH_RESULTS", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeSearchResultsResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeSearchResultsResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeStringResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeStringResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeStringResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeStringResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeStringResult(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeStringResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeStringResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeArrayResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string         `json:"name" url:"name"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeArrayResult) Type() string {
	return t.type_
}

func (t *TerminalNodeArrayResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeArrayResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeArrayResult(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ARRAY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeArrayResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeArrayResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeChatHistoryResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeChatHistoryResult) Type() string {
	return t.type_
}

func (t *TerminalNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeChatHistoryResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeChatHistoryResult(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CHAT_HISTORY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeChatHistoryResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeChatHistoryResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeErrorResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeErrorResult) Type() string {
	return t.type_
}

func (t *TerminalNodeErrorResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeErrorResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeErrorResult(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeErrorResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeErrorResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeFunctionCallResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeFunctionCallResult) Type() string {
	return t.type_
}

func (t *TerminalNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeFunctionCallResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeFunctionCallResult(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "FUNCTION_CALL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeFunctionCallResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeFunctionCallResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeJsonResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeJsonResult) Type() string {
	return t.type_
}

func (t *TerminalNodeJsonResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeJsonResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeJsonResult(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeJsonResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeJsonResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeNumberResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeNumberResult) Type() string {
	return t.type_
}

func (t *TerminalNodeNumberResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeNumberResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeNumberResult(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeNumberResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeNumberResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Terminal Node.
type TerminalNodeResult struct {
	Data  *TerminalNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeResult) Type() string {
	return t.type_
}

func (t *TerminalNodeResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "TERMINAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "TERMINAL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "TERMINAL",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultData struct {
	Output *TerminalNodeResultOutput `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultOutput struct {
	TerminalNodeStringResult        *TerminalNodeStringResult
	TerminalNodeNumberResult        *TerminalNodeNumberResult
	TerminalNodeJsonResult          *TerminalNodeJsonResult
	TerminalNodeChatHistoryResult   *TerminalNodeChatHistoryResult
	TerminalNodeSearchResultsResult *TerminalNodeSearchResultsResult
	TerminalNodeErrorResult         *TerminalNodeErrorResult
	TerminalNodeArrayResult         *TerminalNodeArrayResult
	TerminalNodeFunctionCallResult  *TerminalNodeFunctionCallResult
}

func (t *TerminalNodeResultOutput) UnmarshalJSON(data []byte) error {
	valueTerminalNodeStringResult := new(TerminalNodeStringResult)
	if err := json.Unmarshal(data, &valueTerminalNodeStringResult); err == nil {
		t.TerminalNodeStringResult = valueTerminalNodeStringResult
		return nil
	}
	valueTerminalNodeNumberResult := new(TerminalNodeNumberResult)
	if err := json.Unmarshal(data, &valueTerminalNodeNumberResult); err == nil {
		t.TerminalNodeNumberResult = valueTerminalNodeNumberResult
		return nil
	}
	valueTerminalNodeJsonResult := new(TerminalNodeJsonResult)
	if err := json.Unmarshal(data, &valueTerminalNodeJsonResult); err == nil {
		t.TerminalNodeJsonResult = valueTerminalNodeJsonResult
		return nil
	}
	valueTerminalNodeChatHistoryResult := new(TerminalNodeChatHistoryResult)
	if err := json.Unmarshal(data, &valueTerminalNodeChatHistoryResult); err == nil {
		t.TerminalNodeChatHistoryResult = valueTerminalNodeChatHistoryResult
		return nil
	}
	valueTerminalNodeSearchResultsResult := new(TerminalNodeSearchResultsResult)
	if err := json.Unmarshal(data, &valueTerminalNodeSearchResultsResult); err == nil {
		t.TerminalNodeSearchResultsResult = valueTerminalNodeSearchResultsResult
		return nil
	}
	valueTerminalNodeErrorResult := new(TerminalNodeErrorResult)
	if err := json.Unmarshal(data, &valueTerminalNodeErrorResult); err == nil {
		t.TerminalNodeErrorResult = valueTerminalNodeErrorResult
		return nil
	}
	valueTerminalNodeArrayResult := new(TerminalNodeArrayResult)
	if err := json.Unmarshal(data, &valueTerminalNodeArrayResult); err == nil {
		t.TerminalNodeArrayResult = valueTerminalNodeArrayResult
		return nil
	}
	valueTerminalNodeFunctionCallResult := new(TerminalNodeFunctionCallResult)
	if err := json.Unmarshal(data, &valueTerminalNodeFunctionCallResult); err == nil {
		t.TerminalNodeFunctionCallResult = valueTerminalNodeFunctionCallResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TerminalNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.TerminalNodeStringResult != nil {
		return json.Marshal(t.TerminalNodeStringResult)
	}
	if t.TerminalNodeNumberResult != nil {
		return json.Marshal(t.TerminalNodeNumberResult)
	}
	if t.TerminalNodeJsonResult != nil {
		return json.Marshal(t.TerminalNodeJsonResult)
	}
	if t.TerminalNodeChatHistoryResult != nil {
		return json.Marshal(t.TerminalNodeChatHistoryResult)
	}
	if t.TerminalNodeSearchResultsResult != nil {
		return json.Marshal(t.TerminalNodeSearchResultsResult)
	}
	if t.TerminalNodeErrorResult != nil {
		return json.Marshal(t.TerminalNodeErrorResult)
	}
	if t.TerminalNodeArrayResult != nil {
		return json.Marshal(t.TerminalNodeArrayResult)
	}
	if t.TerminalNodeFunctionCallResult != nil {
		return json.Marshal(t.TerminalNodeFunctionCallResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TerminalNodeResultOutputVisitor interface {
	VisitTerminalNodeStringResult(*TerminalNodeStringResult) error
	VisitTerminalNodeNumberResult(*TerminalNodeNumberResult) error
	VisitTerminalNodeJsonResult(*TerminalNodeJsonResult) error
	VisitTerminalNodeChatHistoryResult(*TerminalNodeChatHistoryResult) error
	VisitTerminalNodeSearchResultsResult(*TerminalNodeSearchResultsResult) error
	VisitTerminalNodeErrorResult(*TerminalNodeErrorResult) error
	VisitTerminalNodeArrayResult(*TerminalNodeArrayResult) error
	VisitTerminalNodeFunctionCallResult(*TerminalNodeFunctionCallResult) error
}

func (t *TerminalNodeResultOutput) Accept(visitor TerminalNodeResultOutputVisitor) error {
	if t.TerminalNodeStringResult != nil {
		return visitor.VisitTerminalNodeStringResult(t.TerminalNodeStringResult)
	}
	if t.TerminalNodeNumberResult != nil {
		return visitor.VisitTerminalNodeNumberResult(t.TerminalNodeNumberResult)
	}
	if t.TerminalNodeJsonResult != nil {
		return visitor.VisitTerminalNodeJsonResult(t.TerminalNodeJsonResult)
	}
	if t.TerminalNodeChatHistoryResult != nil {
		return visitor.VisitTerminalNodeChatHistoryResult(t.TerminalNodeChatHistoryResult)
	}
	if t.TerminalNodeSearchResultsResult != nil {
		return visitor.VisitTerminalNodeSearchResultsResult(t.TerminalNodeSearchResultsResult)
	}
	if t.TerminalNodeErrorResult != nil {
		return visitor.VisitTerminalNodeErrorResult(t.TerminalNodeErrorResult)
	}
	if t.TerminalNodeArrayResult != nil {
		return visitor.VisitTerminalNodeArrayResult(t.TerminalNodeArrayResult)
	}
	if t.TerminalNodeFunctionCallResult != nil {
		return visitor.VisitTerminalNodeFunctionCallResult(t.TerminalNodeFunctionCallResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TerminalNodeSearchResultsResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeSearchResultsResult) Type() string {
	return t.type_
}

func (t *TerminalNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeSearchResultsResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeSearchResultsResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "SEARCH_RESULTS", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeSearchResultsResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeSearchResultsResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeStringResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeStringResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeStringResult) Type() string {
	return t.type_
}

func (t *TerminalNodeStringResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeStringResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeStringResult(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeStringResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeStringResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type ARRAY
type TestSuiteRunMetricArrayOutput struct {
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	Name  string         `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricArrayOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricArrayOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricArrayOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricArrayOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricArrayOutput(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ARRAY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricArrayOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricArrayOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricArrayOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type ERROR
type TestSuiteRunMetricErrorOutput struct {
	Value *VellumError `json:"value" url:"value"`
	Name  string       `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricErrorOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricErrorOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricErrorOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricErrorOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricErrorOutput(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricErrorOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricErrorOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricErrorOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type NUMBER
type TestSuiteRunMetricJsonOutput struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricJsonOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricJsonOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricJsonOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricJsonOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricJsonOutput(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricJsonOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricJsonOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricJsonOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type NUMBER
type TestSuiteRunMetricNumberOutput struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricNumberOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricNumberOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricNumberOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricNumberOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricNumberOutput(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricNumberOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricNumberOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricNumberOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunMetricOutput struct {
	TestSuiteRunMetricStringOutput *TestSuiteRunMetricStringOutput
	TestSuiteRunMetricNumberOutput *TestSuiteRunMetricNumberOutput
	TestSuiteRunMetricJsonOutput   *TestSuiteRunMetricJsonOutput
	TestSuiteRunMetricErrorOutput  *TestSuiteRunMetricErrorOutput
	TestSuiteRunMetricArrayOutput  *TestSuiteRunMetricArrayOutput
}

func (t *TestSuiteRunMetricOutput) UnmarshalJSON(data []byte) error {
	valueTestSuiteRunMetricStringOutput := new(TestSuiteRunMetricStringOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricStringOutput); err == nil {
		t.TestSuiteRunMetricStringOutput = valueTestSuiteRunMetricStringOutput
		return nil
	}
	valueTestSuiteRunMetricNumberOutput := new(TestSuiteRunMetricNumberOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricNumberOutput); err == nil {
		t.TestSuiteRunMetricNumberOutput = valueTestSuiteRunMetricNumberOutput
		return nil
	}
	valueTestSuiteRunMetricJsonOutput := new(TestSuiteRunMetricJsonOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricJsonOutput); err == nil {
		t.TestSuiteRunMetricJsonOutput = valueTestSuiteRunMetricJsonOutput
		return nil
	}
	valueTestSuiteRunMetricErrorOutput := new(TestSuiteRunMetricErrorOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricErrorOutput); err == nil {
		t.TestSuiteRunMetricErrorOutput = valueTestSuiteRunMetricErrorOutput
		return nil
	}
	valueTestSuiteRunMetricArrayOutput := new(TestSuiteRunMetricArrayOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricArrayOutput); err == nil {
		t.TestSuiteRunMetricArrayOutput = valueTestSuiteRunMetricArrayOutput
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestSuiteRunMetricOutput) MarshalJSON() ([]byte, error) {
	if t.TestSuiteRunMetricStringOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricStringOutput)
	}
	if t.TestSuiteRunMetricNumberOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricNumberOutput)
	}
	if t.TestSuiteRunMetricJsonOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricJsonOutput)
	}
	if t.TestSuiteRunMetricErrorOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricErrorOutput)
	}
	if t.TestSuiteRunMetricArrayOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricArrayOutput)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteRunMetricOutputVisitor interface {
	VisitTestSuiteRunMetricStringOutput(*TestSuiteRunMetricStringOutput) error
	VisitTestSuiteRunMetricNumberOutput(*TestSuiteRunMetricNumberOutput) error
	VisitTestSuiteRunMetricJsonOutput(*TestSuiteRunMetricJsonOutput) error
	VisitTestSuiteRunMetricErrorOutput(*TestSuiteRunMetricErrorOutput) error
	VisitTestSuiteRunMetricArrayOutput(*TestSuiteRunMetricArrayOutput) error
}

func (t *TestSuiteRunMetricOutput) Accept(visitor TestSuiteRunMetricOutputVisitor) error {
	if t.TestSuiteRunMetricStringOutput != nil {
		return visitor.VisitTestSuiteRunMetricStringOutput(t.TestSuiteRunMetricStringOutput)
	}
	if t.TestSuiteRunMetricNumberOutput != nil {
		return visitor.VisitTestSuiteRunMetricNumberOutput(t.TestSuiteRunMetricNumberOutput)
	}
	if t.TestSuiteRunMetricJsonOutput != nil {
		return visitor.VisitTestSuiteRunMetricJsonOutput(t.TestSuiteRunMetricJsonOutput)
	}
	if t.TestSuiteRunMetricErrorOutput != nil {
		return visitor.VisitTestSuiteRunMetricErrorOutput(t.TestSuiteRunMetricErrorOutput)
	}
	if t.TestSuiteRunMetricArrayOutput != nil {
		return visitor.VisitTestSuiteRunMetricArrayOutput(t.TestSuiteRunMetricArrayOutput)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// Output for a test suite run metric that is of type STRING
type TestSuiteRunMetricStringOutput struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricStringOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricStringOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricStringOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricStringOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricStringOutput(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricStringOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricStringOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricStringOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A value representing Thinking mode output.
type ThinkingVellumValue struct {
	Value *StringVellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThinkingVellumValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThinkingVellumValue) Type() string {
	return t.type_
}

func (t *ThinkingVellumValue) UnmarshalJSON(data []byte) error {
	type embed ThinkingVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = ThinkingVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "THINKING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "THINKING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThinkingVellumValue) MarshalJSON() ([]byte, error) {
	type embed ThinkingVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "THINKING",
	}
	return json.Marshal(marshaler)
}

func (t *ThinkingVellumValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A value representing Thinking mode output.
type ThinkingVellumValueRequest struct {
	Value *StringVellumValueRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ThinkingVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThinkingVellumValueRequest) Type() string {
	return t.type_
}

func (t *ThinkingVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ThinkingVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = ThinkingVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "THINKING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "THINKING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThinkingVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ThinkingVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "THINKING",
	}
	return json.Marshal(marshaler)
}

func (t *ThinkingVellumValueRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Configuration for token overlapping window chunking
type TokenOverlappingWindowChunkerConfig struct {
	TokenLimit   *int     `json:"token_limit,omitempty" url:"token_limit,omitempty"`
	OverlapRatio *float64 `json:"overlap_ratio,omitempty" url:"overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunkerConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenOverlappingWindowChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunkerConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Token overlapping window chunking
type TokenOverlappingWindowChunking struct {
	ChunkerConfig *TokenOverlappingWindowChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunking) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunking) ChunkerName() string {
	return t.chunkerName
}

func (t *TokenOverlappingWindowChunking) UnmarshalJSON(data []byte) error {
	type embed TokenOverlappingWindowChunking
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunking(unmarshaler.embed)
	if unmarshaler.ChunkerName != "token-overlapping-window-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "token-overlapping-window-chunker", unmarshaler.ChunkerName)
	}
	t.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *t, "chunker_name")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunking) MarshalJSON() ([]byte, error) {
	type embed TokenOverlappingWindowChunking
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*t),
		ChunkerName: "token-overlapping-window-chunker",
	}
	return json.Marshal(marshaler)
}

func (t *TokenOverlappingWindowChunking) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ToolDefinitionIntegration struct {
	Id       string              `json:"id" url:"id"`
	Provider IntegrationProvider `json:"provider" url:"provider"`
	Name     IntegrationName     `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *ToolDefinitionIntegration) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ToolDefinitionIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler ToolDefinitionIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ToolDefinitionIntegration(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ToolDefinitionIntegration) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// * `USD` - USD
type UnitEnum = string

// A block that represents a variable in a prompt template.
type VariablePromptBlock struct {
	State         *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig   *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	InputVariable string                      `json:"input_variable" url:"input_variable"`
	blockType     string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VariablePromptBlock) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VariablePromptBlock) BlockType() string {
	return v.blockType
}

func (v *VariablePromptBlock) UnmarshalJSON(data []byte) error {
	type embed VariablePromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VariablePromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "VARIABLE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VARIABLE", unmarshaler.BlockType)
	}
	v.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *v, "block_type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VariablePromptBlock) MarshalJSON() ([]byte, error) {
	type embed VariablePromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*v),
		BlockType: "VARIABLE",
	}
	return json.Marshal(marshaler)
}

func (v *VariablePromptBlock) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumAudio struct {
	// A valid data URL containing the audio data.
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumAudio) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumAudio) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumAudio
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumAudio(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumAudio) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumAudioRequest struct {
	// A valid data URL containing the audio data.
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumAudioRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumAudioRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumAudioRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumAudioRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumAudioRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumCodeResourceDefinition struct {
	Name string `json:"name" url:"name"`
	// The module that this resource is defined in.
	Module []string `json:"module" url:"module"`
	Id     string   `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumCodeResourceDefinition) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumCodeResourceDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumCodeResourceDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumCodeResourceDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumCodeResourceDefinition) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumDocument struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumDocument) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumDocument(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumDocument) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumDocumentRequest struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumDocumentRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumDocumentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumDocumentRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumError struct {
	Code    VellumErrorCodeEnum    `json:"code" url:"code"`
	Message string                 `json:"message" url:"message"`
	RawData map[string]interface{} `json:"raw_data,omitempty" url:"raw_data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumError) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// * `INVALID_REQUEST` - INVALID_REQUEST
// * `INVALID_INPUTS` - INVALID_INPUTS
// * `PROVIDER_ERROR` - PROVIDER_ERROR
// * `PROVIDER_CREDENTIALS_UNAVAILABLE` - PROVIDER_CREDENTIALS_UNAVAILABLE
// * `REQUEST_TIMEOUT` - REQUEST_TIMEOUT
// * `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// * `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
// * `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED
type VellumErrorCodeEnum string

const (
	VellumErrorCodeEnumInvalidRequest                 VellumErrorCodeEnum = "INVALID_REQUEST"
	VellumErrorCodeEnumInvalidInputs                  VellumErrorCodeEnum = "INVALID_INPUTS"
	VellumErrorCodeEnumProviderError                  VellumErrorCodeEnum = "PROVIDER_ERROR"
	VellumErrorCodeEnumProviderCredentialsUnavailable VellumErrorCodeEnum = "PROVIDER_CREDENTIALS_UNAVAILABLE"
	VellumErrorCodeEnumRequestTimeout                 VellumErrorCodeEnum = "REQUEST_TIMEOUT"
	VellumErrorCodeEnumInternalServerError            VellumErrorCodeEnum = "INTERNAL_SERVER_ERROR"
	VellumErrorCodeEnumUserDefinedError               VellumErrorCodeEnum = "USER_DEFINED_ERROR"
	VellumErrorCodeEnumWorkflowCancelled              VellumErrorCodeEnum = "WORKFLOW_CANCELLED"
)

func NewVellumErrorCodeEnumFromString(s string) (VellumErrorCodeEnum, error) {
	switch s {
	case "INVALID_REQUEST":
		return VellumErrorCodeEnumInvalidRequest, nil
	case "INVALID_INPUTS":
		return VellumErrorCodeEnumInvalidInputs, nil
	case "PROVIDER_ERROR":
		return VellumErrorCodeEnumProviderError, nil
	case "PROVIDER_CREDENTIALS_UNAVAILABLE":
		return VellumErrorCodeEnumProviderCredentialsUnavailable, nil
	case "REQUEST_TIMEOUT":
		return VellumErrorCodeEnumRequestTimeout, nil
	case "INTERNAL_SERVER_ERROR":
		return VellumErrorCodeEnumInternalServerError, nil
	case "USER_DEFINED_ERROR":
		return VellumErrorCodeEnumUserDefinedError, nil
	case "WORKFLOW_CANCELLED":
		return VellumErrorCodeEnumWorkflowCancelled, nil
	}
	var t VellumErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumErrorCodeEnum) Ptr() *VellumErrorCodeEnum {
	return &v
}

type VellumErrorRequest struct {
	Code    VellumErrorCodeEnum    `json:"code" url:"code"`
	Message string                 `json:"message" url:"message"`
	RawData map[string]interface{} `json:"raw_data,omitempty" url:"raw_data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumErrorRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumErrorRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumErrorRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumErrorRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumErrorRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImage struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumImage) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumImage) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImage) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImageRequest struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumImageRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumImageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImageRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImageRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumNodeExecutionEvent struct {
	NodeExecutionInitiatedEvent *NodeExecutionInitiatedEvent
	NodeExecutionStreamingEvent *NodeExecutionStreamingEvent
	NodeExecutionFulfilledEvent *NodeExecutionFulfilledEvent
	NodeExecutionRejectedEvent  *NodeExecutionRejectedEvent
	NodeExecutionPausedEvent    *NodeExecutionPausedEvent
	NodeExecutionResumedEvent   *NodeExecutionResumedEvent
}

func (v *VellumNodeExecutionEvent) UnmarshalJSON(data []byte) error {
	valueNodeExecutionInitiatedEvent := new(NodeExecutionInitiatedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionInitiatedEvent); err == nil {
		v.NodeExecutionInitiatedEvent = valueNodeExecutionInitiatedEvent
		return nil
	}
	valueNodeExecutionStreamingEvent := new(NodeExecutionStreamingEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionStreamingEvent); err == nil {
		v.NodeExecutionStreamingEvent = valueNodeExecutionStreamingEvent
		return nil
	}
	valueNodeExecutionFulfilledEvent := new(NodeExecutionFulfilledEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionFulfilledEvent); err == nil {
		v.NodeExecutionFulfilledEvent = valueNodeExecutionFulfilledEvent
		return nil
	}
	valueNodeExecutionRejectedEvent := new(NodeExecutionRejectedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionRejectedEvent); err == nil {
		v.NodeExecutionRejectedEvent = valueNodeExecutionRejectedEvent
		return nil
	}
	valueNodeExecutionPausedEvent := new(NodeExecutionPausedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionPausedEvent); err == nil {
		v.NodeExecutionPausedEvent = valueNodeExecutionPausedEvent
		return nil
	}
	valueNodeExecutionResumedEvent := new(NodeExecutionResumedEvent)
	if err := json.Unmarshal(data, &valueNodeExecutionResumedEvent); err == nil {
		v.NodeExecutionResumedEvent = valueNodeExecutionResumedEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumNodeExecutionEvent) MarshalJSON() ([]byte, error) {
	if v.NodeExecutionInitiatedEvent != nil {
		return json.Marshal(v.NodeExecutionInitiatedEvent)
	}
	if v.NodeExecutionStreamingEvent != nil {
		return json.Marshal(v.NodeExecutionStreamingEvent)
	}
	if v.NodeExecutionFulfilledEvent != nil {
		return json.Marshal(v.NodeExecutionFulfilledEvent)
	}
	if v.NodeExecutionRejectedEvent != nil {
		return json.Marshal(v.NodeExecutionRejectedEvent)
	}
	if v.NodeExecutionPausedEvent != nil {
		return json.Marshal(v.NodeExecutionPausedEvent)
	}
	if v.NodeExecutionResumedEvent != nil {
		return json.Marshal(v.NodeExecutionResumedEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumNodeExecutionEventVisitor interface {
	VisitNodeExecutionInitiatedEvent(*NodeExecutionInitiatedEvent) error
	VisitNodeExecutionStreamingEvent(*NodeExecutionStreamingEvent) error
	VisitNodeExecutionFulfilledEvent(*NodeExecutionFulfilledEvent) error
	VisitNodeExecutionRejectedEvent(*NodeExecutionRejectedEvent) error
	VisitNodeExecutionPausedEvent(*NodeExecutionPausedEvent) error
	VisitNodeExecutionResumedEvent(*NodeExecutionResumedEvent) error
}

func (v *VellumNodeExecutionEvent) Accept(visitor VellumNodeExecutionEventVisitor) error {
	if v.NodeExecutionInitiatedEvent != nil {
		return visitor.VisitNodeExecutionInitiatedEvent(v.NodeExecutionInitiatedEvent)
	}
	if v.NodeExecutionStreamingEvent != nil {
		return visitor.VisitNodeExecutionStreamingEvent(v.NodeExecutionStreamingEvent)
	}
	if v.NodeExecutionFulfilledEvent != nil {
		return visitor.VisitNodeExecutionFulfilledEvent(v.NodeExecutionFulfilledEvent)
	}
	if v.NodeExecutionRejectedEvent != nil {
		return visitor.VisitNodeExecutionRejectedEvent(v.NodeExecutionRejectedEvent)
	}
	if v.NodeExecutionPausedEvent != nil {
		return visitor.VisitNodeExecutionPausedEvent(v.NodeExecutionPausedEvent)
	}
	if v.NodeExecutionResumedEvent != nil {
		return visitor.VisitNodeExecutionResumedEvent(v.NodeExecutionResumedEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumSdkError struct {
	Message string                 `json:"message" url:"message"`
	Code    VellumSdkErrorCodeEnum `json:"code" url:"code"`
	RawData map[string]interface{} `json:"raw_data,omitempty" url:"raw_data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumSdkError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumSdkError) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumSdkError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumSdkError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumSdkError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// * `INVALID_WORKFLOW` - INVALID_WORKFLOW
// * `INVALID_INPUTS` - INVALID_INPUTS
// * `INVALID_OUTPUTS` - INVALID_OUTPUTS
// * `INVALID_STATE` - INVALID_STATE
// * `INVALID_CODE` - INVALID_CODE
// * `INVALID_TEMPLATE` - INVALID_TEMPLATE
// * `INTERNAL_ERROR` - INTERNAL_ERROR
// * `PROVIDER_CREDENTIALS_UNAVAILABLE` - PROVIDER_CREDENTIALS_UNAVAILABLE
// * `PROVIDER_ERROR` - PROVIDER_ERROR
// * `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
// * `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED
// * `NODE_EXECUTION` - NODE_EXECUTION
type VellumSdkErrorCodeEnum string

const (
	VellumSdkErrorCodeEnumInvalidWorkflow                VellumSdkErrorCodeEnum = "INVALID_WORKFLOW"
	VellumSdkErrorCodeEnumInvalidInputs                  VellumSdkErrorCodeEnum = "INVALID_INPUTS"
	VellumSdkErrorCodeEnumInvalidOutputs                 VellumSdkErrorCodeEnum = "INVALID_OUTPUTS"
	VellumSdkErrorCodeEnumInvalidState                   VellumSdkErrorCodeEnum = "INVALID_STATE"
	VellumSdkErrorCodeEnumInvalidCode                    VellumSdkErrorCodeEnum = "INVALID_CODE"
	VellumSdkErrorCodeEnumInvalidTemplate                VellumSdkErrorCodeEnum = "INVALID_TEMPLATE"
	VellumSdkErrorCodeEnumInternalError                  VellumSdkErrorCodeEnum = "INTERNAL_ERROR"
	VellumSdkErrorCodeEnumProviderCredentialsUnavailable VellumSdkErrorCodeEnum = "PROVIDER_CREDENTIALS_UNAVAILABLE"
	VellumSdkErrorCodeEnumProviderError                  VellumSdkErrorCodeEnum = "PROVIDER_ERROR"
	VellumSdkErrorCodeEnumUserDefinedError               VellumSdkErrorCodeEnum = "USER_DEFINED_ERROR"
	VellumSdkErrorCodeEnumWorkflowCancelled              VellumSdkErrorCodeEnum = "WORKFLOW_CANCELLED"
	VellumSdkErrorCodeEnumNodeExecution                  VellumSdkErrorCodeEnum = "NODE_EXECUTION"
)

func NewVellumSdkErrorCodeEnumFromString(s string) (VellumSdkErrorCodeEnum, error) {
	switch s {
	case "INVALID_WORKFLOW":
		return VellumSdkErrorCodeEnumInvalidWorkflow, nil
	case "INVALID_INPUTS":
		return VellumSdkErrorCodeEnumInvalidInputs, nil
	case "INVALID_OUTPUTS":
		return VellumSdkErrorCodeEnumInvalidOutputs, nil
	case "INVALID_STATE":
		return VellumSdkErrorCodeEnumInvalidState, nil
	case "INVALID_CODE":
		return VellumSdkErrorCodeEnumInvalidCode, nil
	case "INVALID_TEMPLATE":
		return VellumSdkErrorCodeEnumInvalidTemplate, nil
	case "INTERNAL_ERROR":
		return VellumSdkErrorCodeEnumInternalError, nil
	case "PROVIDER_CREDENTIALS_UNAVAILABLE":
		return VellumSdkErrorCodeEnumProviderCredentialsUnavailable, nil
	case "PROVIDER_ERROR":
		return VellumSdkErrorCodeEnumProviderError, nil
	case "USER_DEFINED_ERROR":
		return VellumSdkErrorCodeEnumUserDefinedError, nil
	case "WORKFLOW_CANCELLED":
		return VellumSdkErrorCodeEnumWorkflowCancelled, nil
	case "NODE_EXECUTION":
		return VellumSdkErrorCodeEnumNodeExecution, nil
	}
	var t VellumSdkErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumSdkErrorCodeEnum) Ptr() *VellumSdkErrorCodeEnum {
	return &v
}

type VellumSecret struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumSecret) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumSecret) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumSecret
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumSecret(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumSecret) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumSpan struct {
	WorkflowExecutionSpan *WorkflowExecutionSpan
	NodeExecutionSpan     *NodeExecutionSpan
}

func (v *VellumSpan) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionSpan := new(WorkflowExecutionSpan)
	if err := json.Unmarshal(data, &valueWorkflowExecutionSpan); err == nil {
		v.WorkflowExecutionSpan = valueWorkflowExecutionSpan
		return nil
	}
	valueNodeExecutionSpan := new(NodeExecutionSpan)
	if err := json.Unmarshal(data, &valueNodeExecutionSpan); err == nil {
		v.NodeExecutionSpan = valueNodeExecutionSpan
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumSpan) MarshalJSON() ([]byte, error) {
	if v.WorkflowExecutionSpan != nil {
		return json.Marshal(v.WorkflowExecutionSpan)
	}
	if v.NodeExecutionSpan != nil {
		return json.Marshal(v.NodeExecutionSpan)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumSpanVisitor interface {
	VisitWorkflowExecutionSpan(*WorkflowExecutionSpan) error
	VisitNodeExecutionSpan(*NodeExecutionSpan) error
}

func (v *VellumSpan) Accept(visitor VellumSpanVisitor) error {
	if v.WorkflowExecutionSpan != nil {
		return visitor.VisitWorkflowExecutionSpan(v.WorkflowExecutionSpan)
	}
	if v.NodeExecutionSpan != nil {
		return visitor.VisitNodeExecutionSpan(v.NodeExecutionSpan)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValue struct {
	StringVellumValue        *StringVellumValue
	NumberVellumValue        *NumberVellumValue
	JsonVellumValue          *JsonVellumValue
	AudioVellumValue         *AudioVellumValue
	VideoVellumValue         *VideoVellumValue
	ImageVellumValue         *ImageVellumValue
	DocumentVellumValue      *DocumentVellumValue
	FunctionCallVellumValue  *FunctionCallVellumValue
	ErrorVellumValue         *ErrorVellumValue
	ArrayVellumValue         *ArrayVellumValue
	ChatHistoryVellumValue   *ChatHistoryVellumValue
	SearchResultsVellumValue *SearchResultsVellumValue
	ThinkingVellumValue      *ThinkingVellumValue
}

func (v *VellumValue) UnmarshalJSON(data []byte) error {
	valueStringVellumValue := new(StringVellumValue)
	if err := json.Unmarshal(data, &valueStringVellumValue); err == nil {
		v.StringVellumValue = valueStringVellumValue
		return nil
	}
	valueNumberVellumValue := new(NumberVellumValue)
	if err := json.Unmarshal(data, &valueNumberVellumValue); err == nil {
		v.NumberVellumValue = valueNumberVellumValue
		return nil
	}
	valueJsonVellumValue := new(JsonVellumValue)
	if err := json.Unmarshal(data, &valueJsonVellumValue); err == nil {
		v.JsonVellumValue = valueJsonVellumValue
		return nil
	}
	valueAudioVellumValue := new(AudioVellumValue)
	if err := json.Unmarshal(data, &valueAudioVellumValue); err == nil {
		v.AudioVellumValue = valueAudioVellumValue
		return nil
	}
	valueVideoVellumValue := new(VideoVellumValue)
	if err := json.Unmarshal(data, &valueVideoVellumValue); err == nil {
		v.VideoVellumValue = valueVideoVellumValue
		return nil
	}
	valueImageVellumValue := new(ImageVellumValue)
	if err := json.Unmarshal(data, &valueImageVellumValue); err == nil {
		v.ImageVellumValue = valueImageVellumValue
		return nil
	}
	valueDocumentVellumValue := new(DocumentVellumValue)
	if err := json.Unmarshal(data, &valueDocumentVellumValue); err == nil {
		v.DocumentVellumValue = valueDocumentVellumValue
		return nil
	}
	valueFunctionCallVellumValue := new(FunctionCallVellumValue)
	if err := json.Unmarshal(data, &valueFunctionCallVellumValue); err == nil {
		v.FunctionCallVellumValue = valueFunctionCallVellumValue
		return nil
	}
	valueErrorVellumValue := new(ErrorVellumValue)
	if err := json.Unmarshal(data, &valueErrorVellumValue); err == nil {
		v.ErrorVellumValue = valueErrorVellumValue
		return nil
	}
	valueArrayVellumValue := new(ArrayVellumValue)
	if err := json.Unmarshal(data, &valueArrayVellumValue); err == nil {
		v.ArrayVellumValue = valueArrayVellumValue
		return nil
	}
	valueChatHistoryVellumValue := new(ChatHistoryVellumValue)
	if err := json.Unmarshal(data, &valueChatHistoryVellumValue); err == nil {
		v.ChatHistoryVellumValue = valueChatHistoryVellumValue
		return nil
	}
	valueSearchResultsVellumValue := new(SearchResultsVellumValue)
	if err := json.Unmarshal(data, &valueSearchResultsVellumValue); err == nil {
		v.SearchResultsVellumValue = valueSearchResultsVellumValue
		return nil
	}
	valueThinkingVellumValue := new(ThinkingVellumValue)
	if err := json.Unmarshal(data, &valueThinkingVellumValue); err == nil {
		v.ThinkingVellumValue = valueThinkingVellumValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumValue) MarshalJSON() ([]byte, error) {
	if v.StringVellumValue != nil {
		return json.Marshal(v.StringVellumValue)
	}
	if v.NumberVellumValue != nil {
		return json.Marshal(v.NumberVellumValue)
	}
	if v.JsonVellumValue != nil {
		return json.Marshal(v.JsonVellumValue)
	}
	if v.AudioVellumValue != nil {
		return json.Marshal(v.AudioVellumValue)
	}
	if v.VideoVellumValue != nil {
		return json.Marshal(v.VideoVellumValue)
	}
	if v.ImageVellumValue != nil {
		return json.Marshal(v.ImageVellumValue)
	}
	if v.DocumentVellumValue != nil {
		return json.Marshal(v.DocumentVellumValue)
	}
	if v.FunctionCallVellumValue != nil {
		return json.Marshal(v.FunctionCallVellumValue)
	}
	if v.ErrorVellumValue != nil {
		return json.Marshal(v.ErrorVellumValue)
	}
	if v.ArrayVellumValue != nil {
		return json.Marshal(v.ArrayVellumValue)
	}
	if v.ChatHistoryVellumValue != nil {
		return json.Marshal(v.ChatHistoryVellumValue)
	}
	if v.SearchResultsVellumValue != nil {
		return json.Marshal(v.SearchResultsVellumValue)
	}
	if v.ThinkingVellumValue != nil {
		return json.Marshal(v.ThinkingVellumValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueVisitor interface {
	VisitStringVellumValue(*StringVellumValue) error
	VisitNumberVellumValue(*NumberVellumValue) error
	VisitJsonVellumValue(*JsonVellumValue) error
	VisitAudioVellumValue(*AudioVellumValue) error
	VisitVideoVellumValue(*VideoVellumValue) error
	VisitImageVellumValue(*ImageVellumValue) error
	VisitDocumentVellumValue(*DocumentVellumValue) error
	VisitFunctionCallVellumValue(*FunctionCallVellumValue) error
	VisitErrorVellumValue(*ErrorVellumValue) error
	VisitArrayVellumValue(*ArrayVellumValue) error
	VisitChatHistoryVellumValue(*ChatHistoryVellumValue) error
	VisitSearchResultsVellumValue(*SearchResultsVellumValue) error
	VisitThinkingVellumValue(*ThinkingVellumValue) error
}

func (v *VellumValue) Accept(visitor VellumValueVisitor) error {
	if v.StringVellumValue != nil {
		return visitor.VisitStringVellumValue(v.StringVellumValue)
	}
	if v.NumberVellumValue != nil {
		return visitor.VisitNumberVellumValue(v.NumberVellumValue)
	}
	if v.JsonVellumValue != nil {
		return visitor.VisitJsonVellumValue(v.JsonVellumValue)
	}
	if v.AudioVellumValue != nil {
		return visitor.VisitAudioVellumValue(v.AudioVellumValue)
	}
	if v.VideoVellumValue != nil {
		return visitor.VisitVideoVellumValue(v.VideoVellumValue)
	}
	if v.ImageVellumValue != nil {
		return visitor.VisitImageVellumValue(v.ImageVellumValue)
	}
	if v.DocumentVellumValue != nil {
		return visitor.VisitDocumentVellumValue(v.DocumentVellumValue)
	}
	if v.FunctionCallVellumValue != nil {
		return visitor.VisitFunctionCallVellumValue(v.FunctionCallVellumValue)
	}
	if v.ErrorVellumValue != nil {
		return visitor.VisitErrorVellumValue(v.ErrorVellumValue)
	}
	if v.ArrayVellumValue != nil {
		return visitor.VisitArrayVellumValue(v.ArrayVellumValue)
	}
	if v.ChatHistoryVellumValue != nil {
		return visitor.VisitChatHistoryVellumValue(v.ChatHistoryVellumValue)
	}
	if v.SearchResultsVellumValue != nil {
		return visitor.VisitSearchResultsVellumValue(v.SearchResultsVellumValue)
	}
	if v.ThinkingVellumValue != nil {
		return visitor.VisitThinkingVellumValue(v.ThinkingVellumValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// A higher-order condition that combines one or more basic conditions or other higher-order conditions.
type VellumValueLogicalConditionGroupRequest struct {
	Conditions []*VellumValueLogicalExpressionRequest `json:"conditions" url:"conditions"`
	Combinator ConditionCombinator                    `json:"combinator" url:"combinator"`
	Negated    bool                                   `json:"negated" url:"negated"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumValueLogicalConditionGroupRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumValueLogicalConditionGroupRequest) Type() string {
	return v.type_
}

func (v *VellumValueLogicalConditionGroupRequest) UnmarshalJSON(data []byte) error {
	type embed VellumValueLogicalConditionGroupRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VellumValueLogicalConditionGroupRequest(unmarshaler.embed)
	if unmarshaler.Type != "LOGICAL_CONDITION_GROUP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "LOGICAL_CONDITION_GROUP", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumValueLogicalConditionGroupRequest) MarshalJSON() ([]byte, error) {
	type embed VellumValueLogicalConditionGroupRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "LOGICAL_CONDITION_GROUP",
	}
	return json.Marshal(marshaler)
}

func (v *VellumValueLogicalConditionGroupRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A basic condition comparing two Vellum values.
type VellumValueLogicalConditionRequest struct {
	LhsVariable *VellumValueRequest `json:"lhs_variable" url:"lhs_variable"`
	Operator    LogicalOperator     `json:"operator" url:"operator"`
	RhsVariable *VellumValueRequest `json:"rhs_variable" url:"rhs_variable"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumValueLogicalConditionRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumValueLogicalConditionRequest) Type() string {
	return v.type_
}

func (v *VellumValueLogicalConditionRequest) UnmarshalJSON(data []byte) error {
	type embed VellumValueLogicalConditionRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VellumValueLogicalConditionRequest(unmarshaler.embed)
	if unmarshaler.Type != "LOGICAL_CONDITION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "LOGICAL_CONDITION", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumValueLogicalConditionRequest) MarshalJSON() ([]byte, error) {
	type embed VellumValueLogicalConditionRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "LOGICAL_CONDITION",
	}
	return json.Marshal(marshaler)
}

func (v *VellumValueLogicalConditionRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumValueLogicalExpressionRequest struct {
	VellumValueLogicalConditionRequest      *VellumValueLogicalConditionRequest
	VellumValueLogicalConditionGroupRequest *VellumValueLogicalConditionGroupRequest
}

func (v *VellumValueLogicalExpressionRequest) UnmarshalJSON(data []byte) error {
	valueVellumValueLogicalConditionRequest := new(VellumValueLogicalConditionRequest)
	if err := json.Unmarshal(data, &valueVellumValueLogicalConditionRequest); err == nil {
		v.VellumValueLogicalConditionRequest = valueVellumValueLogicalConditionRequest
		return nil
	}
	valueVellumValueLogicalConditionGroupRequest := new(VellumValueLogicalConditionGroupRequest)
	if err := json.Unmarshal(data, &valueVellumValueLogicalConditionGroupRequest); err == nil {
		v.VellumValueLogicalConditionGroupRequest = valueVellumValueLogicalConditionGroupRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumValueLogicalExpressionRequest) MarshalJSON() ([]byte, error) {
	if v.VellumValueLogicalConditionRequest != nil {
		return json.Marshal(v.VellumValueLogicalConditionRequest)
	}
	if v.VellumValueLogicalConditionGroupRequest != nil {
		return json.Marshal(v.VellumValueLogicalConditionGroupRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueLogicalExpressionRequestVisitor interface {
	VisitVellumValueLogicalConditionRequest(*VellumValueLogicalConditionRequest) error
	VisitVellumValueLogicalConditionGroupRequest(*VellumValueLogicalConditionGroupRequest) error
}

func (v *VellumValueLogicalExpressionRequest) Accept(visitor VellumValueLogicalExpressionRequestVisitor) error {
	if v.VellumValueLogicalConditionRequest != nil {
		return visitor.VisitVellumValueLogicalConditionRequest(v.VellumValueLogicalConditionRequest)
	}
	if v.VellumValueLogicalConditionGroupRequest != nil {
		return visitor.VisitVellumValueLogicalConditionGroupRequest(v.VellumValueLogicalConditionGroupRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueRequest struct {
	StringVellumValueRequest        *StringVellumValueRequest
	NumberVellumValueRequest        *NumberVellumValueRequest
	JsonVellumValueRequest          *JsonVellumValueRequest
	AudioVellumValueRequest         *AudioVellumValueRequest
	VideoVellumValueRequest         *VideoVellumValueRequest
	ImageVellumValueRequest         *ImageVellumValueRequest
	DocumentVellumValueRequest      *DocumentVellumValueRequest
	FunctionCallVellumValueRequest  *FunctionCallVellumValueRequest
	ErrorVellumValueRequest         *ErrorVellumValueRequest
	ArrayVellumValueRequest         *ArrayVellumValueRequest
	ChatHistoryVellumValueRequest   *ChatHistoryVellumValueRequest
	SearchResultsVellumValueRequest *SearchResultsVellumValueRequest
	ThinkingVellumValueRequest      *ThinkingVellumValueRequest
}

func (v *VellumValueRequest) UnmarshalJSON(data []byte) error {
	valueStringVellumValueRequest := new(StringVellumValueRequest)
	if err := json.Unmarshal(data, &valueStringVellumValueRequest); err == nil {
		v.StringVellumValueRequest = valueStringVellumValueRequest
		return nil
	}
	valueNumberVellumValueRequest := new(NumberVellumValueRequest)
	if err := json.Unmarshal(data, &valueNumberVellumValueRequest); err == nil {
		v.NumberVellumValueRequest = valueNumberVellumValueRequest
		return nil
	}
	valueJsonVellumValueRequest := new(JsonVellumValueRequest)
	if err := json.Unmarshal(data, &valueJsonVellumValueRequest); err == nil {
		v.JsonVellumValueRequest = valueJsonVellumValueRequest
		return nil
	}
	valueAudioVellumValueRequest := new(AudioVellumValueRequest)
	if err := json.Unmarshal(data, &valueAudioVellumValueRequest); err == nil {
		v.AudioVellumValueRequest = valueAudioVellumValueRequest
		return nil
	}
	valueVideoVellumValueRequest := new(VideoVellumValueRequest)
	if err := json.Unmarshal(data, &valueVideoVellumValueRequest); err == nil {
		v.VideoVellumValueRequest = valueVideoVellumValueRequest
		return nil
	}
	valueImageVellumValueRequest := new(ImageVellumValueRequest)
	if err := json.Unmarshal(data, &valueImageVellumValueRequest); err == nil {
		v.ImageVellumValueRequest = valueImageVellumValueRequest
		return nil
	}
	valueDocumentVellumValueRequest := new(DocumentVellumValueRequest)
	if err := json.Unmarshal(data, &valueDocumentVellumValueRequest); err == nil {
		v.DocumentVellumValueRequest = valueDocumentVellumValueRequest
		return nil
	}
	valueFunctionCallVellumValueRequest := new(FunctionCallVellumValueRequest)
	if err := json.Unmarshal(data, &valueFunctionCallVellumValueRequest); err == nil {
		v.FunctionCallVellumValueRequest = valueFunctionCallVellumValueRequest
		return nil
	}
	valueErrorVellumValueRequest := new(ErrorVellumValueRequest)
	if err := json.Unmarshal(data, &valueErrorVellumValueRequest); err == nil {
		v.ErrorVellumValueRequest = valueErrorVellumValueRequest
		return nil
	}
	valueArrayVellumValueRequest := new(ArrayVellumValueRequest)
	if err := json.Unmarshal(data, &valueArrayVellumValueRequest); err == nil {
		v.ArrayVellumValueRequest = valueArrayVellumValueRequest
		return nil
	}
	valueChatHistoryVellumValueRequest := new(ChatHistoryVellumValueRequest)
	if err := json.Unmarshal(data, &valueChatHistoryVellumValueRequest); err == nil {
		v.ChatHistoryVellumValueRequest = valueChatHistoryVellumValueRequest
		return nil
	}
	valueSearchResultsVellumValueRequest := new(SearchResultsVellumValueRequest)
	if err := json.Unmarshal(data, &valueSearchResultsVellumValueRequest); err == nil {
		v.SearchResultsVellumValueRequest = valueSearchResultsVellumValueRequest
		return nil
	}
	valueThinkingVellumValueRequest := new(ThinkingVellumValueRequest)
	if err := json.Unmarshal(data, &valueThinkingVellumValueRequest); err == nil {
		v.ThinkingVellumValueRequest = valueThinkingVellumValueRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumValueRequest) MarshalJSON() ([]byte, error) {
	if v.StringVellumValueRequest != nil {
		return json.Marshal(v.StringVellumValueRequest)
	}
	if v.NumberVellumValueRequest != nil {
		return json.Marshal(v.NumberVellumValueRequest)
	}
	if v.JsonVellumValueRequest != nil {
		return json.Marshal(v.JsonVellumValueRequest)
	}
	if v.AudioVellumValueRequest != nil {
		return json.Marshal(v.AudioVellumValueRequest)
	}
	if v.VideoVellumValueRequest != nil {
		return json.Marshal(v.VideoVellumValueRequest)
	}
	if v.ImageVellumValueRequest != nil {
		return json.Marshal(v.ImageVellumValueRequest)
	}
	if v.DocumentVellumValueRequest != nil {
		return json.Marshal(v.DocumentVellumValueRequest)
	}
	if v.FunctionCallVellumValueRequest != nil {
		return json.Marshal(v.FunctionCallVellumValueRequest)
	}
	if v.ErrorVellumValueRequest != nil {
		return json.Marshal(v.ErrorVellumValueRequest)
	}
	if v.ArrayVellumValueRequest != nil {
		return json.Marshal(v.ArrayVellumValueRequest)
	}
	if v.ChatHistoryVellumValueRequest != nil {
		return json.Marshal(v.ChatHistoryVellumValueRequest)
	}
	if v.SearchResultsVellumValueRequest != nil {
		return json.Marshal(v.SearchResultsVellumValueRequest)
	}
	if v.ThinkingVellumValueRequest != nil {
		return json.Marshal(v.ThinkingVellumValueRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueRequestVisitor interface {
	VisitStringVellumValueRequest(*StringVellumValueRequest) error
	VisitNumberVellumValueRequest(*NumberVellumValueRequest) error
	VisitJsonVellumValueRequest(*JsonVellumValueRequest) error
	VisitAudioVellumValueRequest(*AudioVellumValueRequest) error
	VisitVideoVellumValueRequest(*VideoVellumValueRequest) error
	VisitImageVellumValueRequest(*ImageVellumValueRequest) error
	VisitDocumentVellumValueRequest(*DocumentVellumValueRequest) error
	VisitFunctionCallVellumValueRequest(*FunctionCallVellumValueRequest) error
	VisitErrorVellumValueRequest(*ErrorVellumValueRequest) error
	VisitArrayVellumValueRequest(*ArrayVellumValueRequest) error
	VisitChatHistoryVellumValueRequest(*ChatHistoryVellumValueRequest) error
	VisitSearchResultsVellumValueRequest(*SearchResultsVellumValueRequest) error
	VisitThinkingVellumValueRequest(*ThinkingVellumValueRequest) error
}

func (v *VellumValueRequest) Accept(visitor VellumValueRequestVisitor) error {
	if v.StringVellumValueRequest != nil {
		return visitor.VisitStringVellumValueRequest(v.StringVellumValueRequest)
	}
	if v.NumberVellumValueRequest != nil {
		return visitor.VisitNumberVellumValueRequest(v.NumberVellumValueRequest)
	}
	if v.JsonVellumValueRequest != nil {
		return visitor.VisitJsonVellumValueRequest(v.JsonVellumValueRequest)
	}
	if v.AudioVellumValueRequest != nil {
		return visitor.VisitAudioVellumValueRequest(v.AudioVellumValueRequest)
	}
	if v.VideoVellumValueRequest != nil {
		return visitor.VisitVideoVellumValueRequest(v.VideoVellumValueRequest)
	}
	if v.ImageVellumValueRequest != nil {
		return visitor.VisitImageVellumValueRequest(v.ImageVellumValueRequest)
	}
	if v.DocumentVellumValueRequest != nil {
		return visitor.VisitDocumentVellumValueRequest(v.DocumentVellumValueRequest)
	}
	if v.FunctionCallVellumValueRequest != nil {
		return visitor.VisitFunctionCallVellumValueRequest(v.FunctionCallVellumValueRequest)
	}
	if v.ErrorVellumValueRequest != nil {
		return visitor.VisitErrorVellumValueRequest(v.ErrorVellumValueRequest)
	}
	if v.ArrayVellumValueRequest != nil {
		return visitor.VisitArrayVellumValueRequest(v.ArrayVellumValueRequest)
	}
	if v.ChatHistoryVellumValueRequest != nil {
		return visitor.VisitChatHistoryVellumValueRequest(v.ChatHistoryVellumValueRequest)
	}
	if v.SearchResultsVellumValueRequest != nil {
		return visitor.VisitSearchResultsVellumValueRequest(v.SearchResultsVellumValueRequest)
	}
	if v.ThinkingVellumValueRequest != nil {
		return visitor.VisitThinkingVellumValueRequest(v.ThinkingVellumValueRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumVariable struct {
	Id         string                    `json:"id" url:"id"`
	Key        string                    `json:"key" url:"key"`
	Type       VellumVariableType        `json:"type" url:"type"`
	Required   *bool                     `json:"required,omitempty" url:"required,omitempty"`
	Default    *VellumValue              `json:"default,omitempty" url:"default,omitempty"`
	Extensions *VellumVariableExtensions `json:"extensions,omitempty" url:"extensions,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumVariable) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumVariable) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVariable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVariable(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVariable) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A set of fields with additional properties for use in Vellum Variables.
type VellumVariableExtensions struct {
	Color *string `json:"color,omitempty" url:"color,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumVariableExtensions) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumVariableExtensions) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVariableExtensions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVariableExtensions(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVariableExtensions) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// * `STRING` - STRING
// * `NUMBER` - NUMBER
// * `JSON` - JSON
// * `CHAT_HISTORY` - CHAT_HISTORY
// * `SEARCH_RESULTS` - SEARCH_RESULTS
// * `ERROR` - ERROR
// * `ARRAY` - ARRAY
//
// * `FUNCTION_CALL` - FUNCTION_CALL
// * `AUDIO` - AUDIO
// * `VIDEO` - VIDEO
// * `IMAGE` - IMAGE
// * `DOCUMENT` - DOCUMENT
// * `NULL` - NULL
// * `THINKING` - THINKING
type VellumVariableType string

const (
	VellumVariableTypeString        VellumVariableType = "STRING"
	VellumVariableTypeNumber        VellumVariableType = "NUMBER"
	VellumVariableTypeJson          VellumVariableType = "JSON"
	VellumVariableTypeChatHistory   VellumVariableType = "CHAT_HISTORY"
	VellumVariableTypeSearchResults VellumVariableType = "SEARCH_RESULTS"
	VellumVariableTypeError         VellumVariableType = "ERROR"
	VellumVariableTypeArray         VellumVariableType = "ARRAY"
	VellumVariableTypeFunctionCall  VellumVariableType = "FUNCTION_CALL"
	VellumVariableTypeAudio         VellumVariableType = "AUDIO"
	VellumVariableTypeVideo         VellumVariableType = "VIDEO"
	VellumVariableTypeImage         VellumVariableType = "IMAGE"
	VellumVariableTypeDocument      VellumVariableType = "DOCUMENT"
	VellumVariableTypeNull          VellumVariableType = "NULL"
	VellumVariableTypeThinking      VellumVariableType = "THINKING"
)

func NewVellumVariableTypeFromString(s string) (VellumVariableType, error) {
	switch s {
	case "STRING":
		return VellumVariableTypeString, nil
	case "NUMBER":
		return VellumVariableTypeNumber, nil
	case "JSON":
		return VellumVariableTypeJson, nil
	case "CHAT_HISTORY":
		return VellumVariableTypeChatHistory, nil
	case "SEARCH_RESULTS":
		return VellumVariableTypeSearchResults, nil
	case "ERROR":
		return VellumVariableTypeError, nil
	case "ARRAY":
		return VellumVariableTypeArray, nil
	case "FUNCTION_CALL":
		return VellumVariableTypeFunctionCall, nil
	case "AUDIO":
		return VellumVariableTypeAudio, nil
	case "VIDEO":
		return VellumVariableTypeVideo, nil
	case "IMAGE":
		return VellumVariableTypeImage, nil
	case "DOCUMENT":
		return VellumVariableTypeDocument, nil
	case "NULL":
		return VellumVariableTypeNull, nil
	case "THINKING":
		return VellumVariableTypeThinking, nil
	}
	var t VellumVariableType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumVariableType) Ptr() *VellumVariableType {
	return &v
}

type VellumVideo struct {
	// A valid data URL containing the video data.
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumVideo) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumVideo) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVideo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVideo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVideo) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumVideoRequest struct {
	// A valid data URL containing the video data.
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumVideoRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumVideoRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVideoRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVideoRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVideoRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumWorkflowExecutionEvent struct {
	WorkflowExecutionInitiatedEvent   *WorkflowExecutionInitiatedEvent
	WorkflowExecutionStreamingEvent   *WorkflowExecutionStreamingEvent
	WorkflowExecutionFulfilledEvent   *WorkflowExecutionFulfilledEvent
	WorkflowExecutionRejectedEvent    *WorkflowExecutionRejectedEvent
	WorkflowExecutionPausedEvent      *WorkflowExecutionPausedEvent
	WorkflowExecutionResumedEvent     *WorkflowExecutionResumedEvent
	WorkflowExecutionSnapshottedEvent *WorkflowExecutionSnapshottedEvent
}

func (v *VellumWorkflowExecutionEvent) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionInitiatedEvent := new(WorkflowExecutionInitiatedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionInitiatedEvent); err == nil {
		v.WorkflowExecutionInitiatedEvent = valueWorkflowExecutionInitiatedEvent
		return nil
	}
	valueWorkflowExecutionStreamingEvent := new(WorkflowExecutionStreamingEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionStreamingEvent); err == nil {
		v.WorkflowExecutionStreamingEvent = valueWorkflowExecutionStreamingEvent
		return nil
	}
	valueWorkflowExecutionFulfilledEvent := new(WorkflowExecutionFulfilledEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionFulfilledEvent); err == nil {
		v.WorkflowExecutionFulfilledEvent = valueWorkflowExecutionFulfilledEvent
		return nil
	}
	valueWorkflowExecutionRejectedEvent := new(WorkflowExecutionRejectedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionRejectedEvent); err == nil {
		v.WorkflowExecutionRejectedEvent = valueWorkflowExecutionRejectedEvent
		return nil
	}
	valueWorkflowExecutionPausedEvent := new(WorkflowExecutionPausedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionPausedEvent); err == nil {
		v.WorkflowExecutionPausedEvent = valueWorkflowExecutionPausedEvent
		return nil
	}
	valueWorkflowExecutionResumedEvent := new(WorkflowExecutionResumedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionResumedEvent); err == nil {
		v.WorkflowExecutionResumedEvent = valueWorkflowExecutionResumedEvent
		return nil
	}
	valueWorkflowExecutionSnapshottedEvent := new(WorkflowExecutionSnapshottedEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionSnapshottedEvent); err == nil {
		v.WorkflowExecutionSnapshottedEvent = valueWorkflowExecutionSnapshottedEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumWorkflowExecutionEvent) MarshalJSON() ([]byte, error) {
	if v.WorkflowExecutionInitiatedEvent != nil {
		return json.Marshal(v.WorkflowExecutionInitiatedEvent)
	}
	if v.WorkflowExecutionStreamingEvent != nil {
		return json.Marshal(v.WorkflowExecutionStreamingEvent)
	}
	if v.WorkflowExecutionFulfilledEvent != nil {
		return json.Marshal(v.WorkflowExecutionFulfilledEvent)
	}
	if v.WorkflowExecutionRejectedEvent != nil {
		return json.Marshal(v.WorkflowExecutionRejectedEvent)
	}
	if v.WorkflowExecutionPausedEvent != nil {
		return json.Marshal(v.WorkflowExecutionPausedEvent)
	}
	if v.WorkflowExecutionResumedEvent != nil {
		return json.Marshal(v.WorkflowExecutionResumedEvent)
	}
	if v.WorkflowExecutionSnapshottedEvent != nil {
		return json.Marshal(v.WorkflowExecutionSnapshottedEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumWorkflowExecutionEventVisitor interface {
	VisitWorkflowExecutionInitiatedEvent(*WorkflowExecutionInitiatedEvent) error
	VisitWorkflowExecutionStreamingEvent(*WorkflowExecutionStreamingEvent) error
	VisitWorkflowExecutionFulfilledEvent(*WorkflowExecutionFulfilledEvent) error
	VisitWorkflowExecutionRejectedEvent(*WorkflowExecutionRejectedEvent) error
	VisitWorkflowExecutionPausedEvent(*WorkflowExecutionPausedEvent) error
	VisitWorkflowExecutionResumedEvent(*WorkflowExecutionResumedEvent) error
	VisitWorkflowExecutionSnapshottedEvent(*WorkflowExecutionSnapshottedEvent) error
}

func (v *VellumWorkflowExecutionEvent) Accept(visitor VellumWorkflowExecutionEventVisitor) error {
	if v.WorkflowExecutionInitiatedEvent != nil {
		return visitor.VisitWorkflowExecutionInitiatedEvent(v.WorkflowExecutionInitiatedEvent)
	}
	if v.WorkflowExecutionStreamingEvent != nil {
		return visitor.VisitWorkflowExecutionStreamingEvent(v.WorkflowExecutionStreamingEvent)
	}
	if v.WorkflowExecutionFulfilledEvent != nil {
		return visitor.VisitWorkflowExecutionFulfilledEvent(v.WorkflowExecutionFulfilledEvent)
	}
	if v.WorkflowExecutionRejectedEvent != nil {
		return visitor.VisitWorkflowExecutionRejectedEvent(v.WorkflowExecutionRejectedEvent)
	}
	if v.WorkflowExecutionPausedEvent != nil {
		return visitor.VisitWorkflowExecutionPausedEvent(v.WorkflowExecutionPausedEvent)
	}
	if v.WorkflowExecutionResumedEvent != nil {
		return visitor.VisitWorkflowExecutionResumedEvent(v.WorkflowExecutionResumedEvent)
	}
	if v.WorkflowExecutionSnapshottedEvent != nil {
		return visitor.VisitWorkflowExecutionSnapshottedEvent(v.WorkflowExecutionSnapshottedEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// A video value that is used in a chat message.
type VideoChatMessageContent struct {
	Value *VellumVideo `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VideoChatMessageContent) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VideoChatMessageContent) Type() string {
	return v.type_
}

func (v *VideoChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed VideoChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VideoChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VIDEO", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VideoChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed VideoChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (v *VideoChatMessageContent) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A video value that is used in a chat message.
type VideoChatMessageContentRequest struct {
	Value *VellumVideoRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VideoChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VideoChatMessageContentRequest) Type() string {
	return v.type_
}

func (v *VideoChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed VideoChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VideoChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VIDEO", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VideoChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed VideoChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (v *VideoChatMessageContentRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A user input representing a Vellum Video value
type VideoInput struct {
	// The variable's name
	Name  string       `json:"name" url:"name"`
	Value *VellumVideo `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VideoInput) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VideoInput) Type() string {
	return v.type_
}

func (v *VideoInput) UnmarshalJSON(data []byte) error {
	type embed VideoInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VideoInput(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VIDEO", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VideoInput) MarshalJSON() ([]byte, error) {
	type embed VideoInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (v *VideoInput) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A user input representing a Vellum Video value
type VideoInputRequest struct {
	// The variable's name
	Name  string              `json:"name" url:"name"`
	Value *VellumVideoRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VideoInputRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VideoInputRequest) Type() string {
	return v.type_
}

func (v *VideoInputRequest) UnmarshalJSON(data []byte) error {
	type embed VideoInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VideoInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VIDEO", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VideoInputRequest) MarshalJSON() ([]byte, error) {
	type embed VideoInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (v *VideoInputRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A block that represents an video file in a prompt template.
type VideoPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Src         string                      `json:"src" url:"src"`
	Metadata    map[string]interface{}      `json:"metadata,omitempty" url:"metadata,omitempty"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VideoPromptBlock) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VideoPromptBlock) BlockType() string {
	return v.blockType
}

func (v *VideoPromptBlock) UnmarshalJSON(data []byte) error {
	type embed VideoPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VideoPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VIDEO", unmarshaler.BlockType)
	}
	v.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *v, "block_type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VideoPromptBlock) MarshalJSON() ([]byte, error) {
	type embed VideoPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*v),
		BlockType: "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (v *VideoPromptBlock) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A base Vellum primitive value representing a video.
type VideoVellumValue struct {
	Value *VellumVideo `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VideoVellumValue) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VideoVellumValue) Type() string {
	return v.type_
}

func (v *VideoVellumValue) UnmarshalJSON(data []byte) error {
	type embed VideoVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VideoVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VIDEO", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VideoVellumValue) MarshalJSON() ([]byte, error) {
	type embed VideoVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (v *VideoVellumValue) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A base Vellum primitive value representing a video.
type VideoVellumValueRequest struct {
	Value *VellumVideoRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VideoVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VideoVellumValueRequest) Type() string {
	return v.type_
}

func (v *VideoVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed VideoVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VideoVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VIDEO", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VideoVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed VideoVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (v *VideoVellumValueRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type WorkflowDeploymentParentContext struct {
	Parent                  *ParentContext         `json:"parent,omitempty" url:"parent,omitempty"`
	Links                   []*SpanLink            `json:"links,omitempty" url:"links,omitempty"`
	SpanId                  string                 `json:"span_id" url:"span_id"`
	DeploymentId            string                 `json:"deployment_id" url:"deployment_id"`
	DeploymentName          string                 `json:"deployment_name" url:"deployment_name"`
	DeploymentHistoryItemId string                 `json:"deployment_history_item_id" url:"deployment_history_item_id"`
	ReleaseTagId            string                 `json:"release_tag_id" url:"release_tag_id"`
	ReleaseTagName          string                 `json:"release_tag_name" url:"release_tag_name"`
	ExternalId              *string                `json:"external_id,omitempty" url:"external_id,omitempty"`
	Metadata                map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	WorkflowVersionId       string                 `json:"workflow_version_id" url:"workflow_version_id"`
	type_                   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentParentContext) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentParentContext) Type() string {
	return w.type_
}

func (w *WorkflowDeploymentParentContext) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW_RELEASE_TAG", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentParentContext) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentParentContext) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Workflow Deployment's full details.
type WorkflowDeploymentRead struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// * `ACTIVE` - Active
	// * `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// Deprecated. The value returned will always be 'PRODUCTION'.
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The ID of the history item associated with this Workflow Deployment's LATEST Release Tag
	LastDeployedHistoryItemId string `json:"last_deployed_history_item_id" url:"last_deployed_history_item_id"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// The output variables this Workflow Deployment produces values for when it's executed.
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`
	// A human-readable description of the workflow deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentRead) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentRead(unmarshaler.embed)
	w.Created = unmarshaler.Created.Time()
	w.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentRead) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*w),
		Created:        core.NewDateTime(w.Created),
		LastDeployedOn: core.NewDateTime(w.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowError struct {
	WorkflowEventError          *WorkflowEventError
	WorkflowInitializationError *WorkflowInitializationError
}

func (w *WorkflowError) UnmarshalJSON(data []byte) error {
	valueWorkflowEventError := new(WorkflowEventError)
	if err := json.Unmarshal(data, &valueWorkflowEventError); err == nil {
		w.WorkflowEventError = valueWorkflowEventError
		return nil
	}
	valueWorkflowInitializationError := new(WorkflowInitializationError)
	if err := json.Unmarshal(data, &valueWorkflowInitializationError); err == nil {
		w.WorkflowInitializationError = valueWorkflowInitializationError
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowError) MarshalJSON() ([]byte, error) {
	if w.WorkflowEventError != nil {
		return json.Marshal(w.WorkflowEventError)
	}
	if w.WorkflowInitializationError != nil {
		return json.Marshal(w.WorkflowInitializationError)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowErrorVisitor interface {
	VisitWorkflowEventError(*WorkflowEventError) error
	VisitWorkflowInitializationError(*WorkflowInitializationError) error
}

func (w *WorkflowError) Accept(visitor WorkflowErrorVisitor) error {
	if w.WorkflowEventError != nil {
		return visitor.VisitWorkflowEventError(w.WorkflowEventError)
	}
	if w.WorkflowInitializationError != nil {
		return visitor.VisitWorkflowInitializationError(w.WorkflowInitializationError)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowEventError struct {
	Message    string                          `json:"message" url:"message"`
	Code       WorkflowExecutionEventErrorCode `json:"code" url:"code"`
	RawData    map[string]interface{}          `json:"raw_data,omitempty" url:"raw_data,omitempty"`
	Stacktrace *string                         `json:"stacktrace,omitempty" url:"stacktrace,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowEventError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowEventError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowEventError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowEventError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowEventError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualChatHistoryRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue []*ChatMessageRequest `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`
	outputType         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualChatHistoryRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualChatHistoryRequest) OutputType() string {
	return w.outputType
}

func (w *WorkflowExecutionActualChatHistoryRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionActualChatHistoryRequest
	var unmarshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionActualChatHistoryRequest(unmarshaler.embed)
	if unmarshaler.OutputType != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.OutputType)
	}
	w.outputType = unmarshaler.OutputType

	extraProperties, err := core.ExtractExtraProperties(data, *w, "output_type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualChatHistoryRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionActualChatHistoryRequest
	var marshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed:      embed(*w),
		OutputType: "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionActualChatHistoryRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualJsonRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue map[string]interface{} `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`
	outputType         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualJsonRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualJsonRequest) OutputType() string {
	return w.outputType
}

func (w *WorkflowExecutionActualJsonRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionActualJsonRequest
	var unmarshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionActualJsonRequest(unmarshaler.embed)
	if unmarshaler.OutputType != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.OutputType)
	}
	w.outputType = unmarshaler.OutputType

	extraProperties, err := core.ExtractExtraProperties(data, *w, "output_type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualJsonRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionActualJsonRequest
	var marshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed:      embed(*w),
		OutputType: "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionActualJsonRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualStringRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue *string `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`
	outputType         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualStringRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualStringRequest) OutputType() string {
	return w.outputType
}

func (w *WorkflowExecutionActualStringRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionActualStringRequest
	var unmarshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionActualStringRequest(unmarshaler.embed)
	if unmarshaler.OutputType != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.OutputType)
	}
	w.outputType = unmarshaler.OutputType

	extraProperties, err := core.ExtractExtraProperties(data, *w, "output_type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualStringRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionActualStringRequest
	var marshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed:      embed(*w),
		OutputType: "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionActualStringRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// * `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION
// * `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED
// * `PROVIDER_CREDENTIALS_UNAVAILABLE` - PROVIDER_CREDENTIALS_UNAVAILABLE
// * `NODE_EXECUTION_COUNT_LIMIT_REACHED` - NODE_EXECUTION_COUNT_LIMIT_REACHED
// * `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// * `NODE_EXECUTION` - NODE_EXECUTION
// * `LLM_PROVIDER` - LLM_PROVIDER
// * `INVALID_TEMPLATE` - INVALID_TEMPLATE
// * `INVALID_INPUTS` - INVALID_INPUTS
// * `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
type WorkflowExecutionEventErrorCode string

const (
	WorkflowExecutionEventErrorCodeWorkflowInitialization         WorkflowExecutionEventErrorCode = "WORKFLOW_INITIALIZATION"
	WorkflowExecutionEventErrorCodeWorkflowCancelled              WorkflowExecutionEventErrorCode = "WORKFLOW_CANCELLED"
	WorkflowExecutionEventErrorCodeProviderCredentialsUnavailable WorkflowExecutionEventErrorCode = "PROVIDER_CREDENTIALS_UNAVAILABLE"
	WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached WorkflowExecutionEventErrorCode = "NODE_EXECUTION_COUNT_LIMIT_REACHED"
	WorkflowExecutionEventErrorCodeInternalServerError            WorkflowExecutionEventErrorCode = "INTERNAL_SERVER_ERROR"
	WorkflowExecutionEventErrorCodeNodeExecution                  WorkflowExecutionEventErrorCode = "NODE_EXECUTION"
	WorkflowExecutionEventErrorCodeLlmProvider                    WorkflowExecutionEventErrorCode = "LLM_PROVIDER"
	WorkflowExecutionEventErrorCodeInvalidTemplate                WorkflowExecutionEventErrorCode = "INVALID_TEMPLATE"
	WorkflowExecutionEventErrorCodeInvalidInputs                  WorkflowExecutionEventErrorCode = "INVALID_INPUTS"
	WorkflowExecutionEventErrorCodeUserDefinedError               WorkflowExecutionEventErrorCode = "USER_DEFINED_ERROR"
)

func NewWorkflowExecutionEventErrorCodeFromString(s string) (WorkflowExecutionEventErrorCode, error) {
	switch s {
	case "WORKFLOW_INITIALIZATION":
		return WorkflowExecutionEventErrorCodeWorkflowInitialization, nil
	case "WORKFLOW_CANCELLED":
		return WorkflowExecutionEventErrorCodeWorkflowCancelled, nil
	case "PROVIDER_CREDENTIALS_UNAVAILABLE":
		return WorkflowExecutionEventErrorCodeProviderCredentialsUnavailable, nil
	case "NODE_EXECUTION_COUNT_LIMIT_REACHED":
		return WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached, nil
	case "INTERNAL_SERVER_ERROR":
		return WorkflowExecutionEventErrorCodeInternalServerError, nil
	case "NODE_EXECUTION":
		return WorkflowExecutionEventErrorCodeNodeExecution, nil
	case "LLM_PROVIDER":
		return WorkflowExecutionEventErrorCodeLlmProvider, nil
	case "INVALID_TEMPLATE":
		return WorkflowExecutionEventErrorCodeInvalidTemplate, nil
	case "INVALID_INPUTS":
		return WorkflowExecutionEventErrorCodeInvalidInputs, nil
	case "USER_DEFINED_ERROR":
		return WorkflowExecutionEventErrorCodeUserDefinedError, nil
	}
	var t WorkflowExecutionEventErrorCode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventErrorCode) Ptr() *WorkflowExecutionEventErrorCode {
	return &w
}

// * `NODE` - NODE
// * `WORKFLOW` - WORKFLOW
type WorkflowExecutionEventType string

const (
	WorkflowExecutionEventTypeNode     WorkflowExecutionEventType = "NODE"
	WorkflowExecutionEventTypeWorkflow WorkflowExecutionEventType = "WORKFLOW"
)

func NewWorkflowExecutionEventTypeFromString(s string) (WorkflowExecutionEventType, error) {
	switch s {
	case "NODE":
		return WorkflowExecutionEventTypeNode, nil
	case "WORKFLOW":
		return WorkflowExecutionEventTypeWorkflow, nil
	}
	var t WorkflowExecutionEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventType) Ptr() *WorkflowExecutionEventType {
	return &w
}

type WorkflowExecutionFulfilledBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	Outputs            map[string]interface{}        `json:"outputs" url:"outputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionFulfilledBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionFulfilledBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionFulfilledBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionFulfilledBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionFulfilledBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionFulfilledEvent struct {
	Parent     *ParentContext                  `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                     `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionFulfilledBody `json:"body" url:"body"`
	Id         string                          `json:"id" url:"id"`
	Timestamp  time.Time                       `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                 `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                          `json:"trace_id" url:"trace_id"`
	SpanId     string                          `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionFulfilledEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionFulfilledEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionFulfilledEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionFulfilledEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionFulfilledEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.fulfilled" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.fulfilled", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionFulfilledEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionFulfilledEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.fulfilled",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionFulfilledEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionInitiatedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	Inputs             map[string]interface{}        `json:"inputs" url:"inputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionInitiatedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionInitiatedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionInitiatedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionInitiatedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionInitiatedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionInitiatedEvent struct {
	Parent     *ParentContext                  `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                     `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionInitiatedBody `json:"body" url:"body"`
	Id         string                          `json:"id" url:"id"`
	Timestamp  time.Time                       `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                 `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                          `json:"trace_id" url:"trace_id"`
	SpanId     string                          `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionInitiatedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionInitiatedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionInitiatedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionInitiatedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionInitiatedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.initiated" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.initiated", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionInitiatedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionInitiatedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.initiated",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionInitiatedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A NODE-level event emitted from the workflow's execution.
type WorkflowExecutionNodeResultEvent struct {
	ExecutionId string                   `json:"execution_id" url:"execution_id"`
	RunId       *string                  `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                  `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowNodeResultEvent `json:"data" url:"data"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionNodeResultEvent) Type() string {
	return w.type_
}

func (w *WorkflowExecutionNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionNodeResultEvent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionNodeResultEvent(unmarshaler.embed)
	if unmarshaler.Type != "NODE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NODE", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionNodeResultEvent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NODE",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionNodeResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionPausedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	ExternalInputs     []*ExternalInputDescriptor    `json:"external_inputs" url:"external_inputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionPausedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionPausedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionPausedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionPausedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionPausedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionPausedEvent struct {
	Parent     *ParentContext               `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                  `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionPausedBody `json:"body" url:"body"`
	Id         string                       `json:"id" url:"id"`
	Timestamp  time.Time                    `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum              `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                       `json:"trace_id" url:"trace_id"`
	SpanId     string                       `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionPausedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionPausedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionPausedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionPausedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionPausedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.paused" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.paused", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionPausedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionPausedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.paused",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionPausedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionRejectedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	Error              *VellumSdkError               `json:"error" url:"error"`
	Stacktrace         *string                       `json:"stacktrace,omitempty" url:"stacktrace,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionRejectedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionRejectedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionRejectedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionRejectedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionRejectedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionRejectedEvent struct {
	Parent     *ParentContext                 `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                    `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionRejectedBody `json:"body" url:"body"`
	Id         string                         `json:"id" url:"id"`
	Timestamp  time.Time                      `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                         `json:"trace_id" url:"trace_id"`
	SpanId     string                         `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionRejectedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionRejectedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionRejectedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionRejectedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionRejectedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.rejected" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.rejected", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionRejectedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionRejectedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.rejected",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionRejectedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionResumedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionResumedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionResumedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionResumedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionResumedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionResumedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionResumedEvent struct {
	Parent     *ParentContext                `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                   `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionResumedBody `json:"body" url:"body"`
	Id         string                        `json:"id" url:"id"`
	Timestamp  time.Time                     `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum               `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                        `json:"trace_id" url:"trace_id"`
	SpanId     string                        `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionResumedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionResumedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionResumedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionResumedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionResumedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.resumed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.resumed", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionResumedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionResumedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.resumed",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionResumedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSnapshottedBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	State              map[string]interface{}        `json:"state" url:"state"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSnapshottedBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSnapshottedBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionSnapshottedBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionSnapshottedBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSnapshottedBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSnapshottedEvent struct {
	Parent     *ParentContext                    `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                       `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionSnapshottedBody `json:"body" url:"body"`
	Id         string                            `json:"id" url:"id"`
	Timestamp  time.Time                         `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                   `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                            `json:"trace_id" url:"trace_id"`
	SpanId     string                            `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSnapshottedEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSnapshottedEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionSnapshottedEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionSnapshottedEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionSnapshottedEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.snapshotted" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.snapshotted", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSnapshottedEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionSnapshottedEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.snapshotted",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionSnapshottedEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSpan struct {
	Events       []*VellumWorkflowExecutionEvent                 `json:"events" url:"events"`
	Attributes   *WorkflowExecutionSpanAttributes                `json:"attributes" url:"attributes"`
	UsageResult  *WorkflowExecutionUsageCalculationFulfilledBody `json:"usage_result,omitempty" url:"usage_result,omitempty"`
	SpanId       string                                          `json:"span_id" url:"span_id"`
	StartTs      time.Time                                       `json:"start_ts" url:"start_ts"`
	EndTs        time.Time                                       `json:"end_ts" url:"end_ts"`
	ParentSpanId *string                                         `json:"parent_span_id,omitempty" url:"parent_span_id,omitempty"`
	name         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSpan) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSpan) Name() string {
	return w.name
}

func (w *WorkflowExecutionSpan) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionSpan
	var unmarshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionSpan(unmarshaler.embed)
	w.StartTs = unmarshaler.StartTs.Time()
	w.EndTs = unmarshaler.EndTs.Time()
	if unmarshaler.Name != "workflow.execution" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSpan) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionSpan
	var marshaler = struct {
		embed
		StartTs *core.DateTime `json:"start_ts"`
		EndTs   *core.DateTime `json:"end_ts"`
		Name    string         `json:"name"`
	}{
		embed:   embed(*w),
		StartTs: core.NewDateTime(w.StartTs),
		EndTs:   core.NewDateTime(w.EndTs),
		Name:    "workflow.execution",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionSpan) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionSpanAttributes struct {
	Label      string `json:"label" url:"label"`
	WorkflowId string `json:"workflow_id" url:"workflow_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionSpanAttributes) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionSpanAttributes) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionSpanAttributes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionSpanAttributes(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionSpanAttributes) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionStreamingBody struct {
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	Output             *BaseOutput                   `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionStreamingBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionStreamingBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionStreamingBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionStreamingBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionStreamingBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionStreamingEvent struct {
	Parent     *ParentContext                  `json:"parent,omitempty" url:"parent,omitempty"`
	Links      []*SpanLink                     `json:"links,omitempty" url:"links,omitempty"`
	Body       *WorkflowExecutionStreamingBody `json:"body" url:"body"`
	Id         string                          `json:"id" url:"id"`
	Timestamp  time.Time                       `json:"timestamp" url:"timestamp"`
	ApiVersion *ApiVersionEnum                 `json:"api_version,omitempty" url:"api_version,omitempty"`
	TraceId    string                          `json:"trace_id" url:"trace_id"`
	SpanId     string                          `json:"span_id" url:"span_id"`
	name       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionStreamingEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionStreamingEvent) Name() string {
	return w.name
}

func (w *WorkflowExecutionStreamingEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionStreamingEvent
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionStreamingEvent(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Name != "workflow.execution.streaming" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workflow.execution.streaming", unmarshaler.Name)
	}
	w.name = unmarshaler.Name

	extraProperties, err := core.ExtractExtraProperties(data, *w, "name")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionStreamingEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionStreamingEvent
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
		Name      string         `json:"name"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
		Name:      "workflow.execution.streaming",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionStreamingEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionUsageCalculationError struct {
	Code    WorkflowExecutionUsageCalculationErrorCodeEnum `json:"code" url:"code"`
	Message string                                         `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionUsageCalculationError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionUsageCalculationError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionUsageCalculationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionUsageCalculationError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionUsageCalculationError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// * `UNKNOWN` - UNKNOWN
// * `DEPENDENCIES_FAILED` - DEPENDENCIES_FAILED
// * `NO_USAGE_CALCULATED` - NO_USAGE_CALCULATED
// * `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
type WorkflowExecutionUsageCalculationErrorCodeEnum string

const (
	WorkflowExecutionUsageCalculationErrorCodeEnumUnknown             WorkflowExecutionUsageCalculationErrorCodeEnum = "UNKNOWN"
	WorkflowExecutionUsageCalculationErrorCodeEnumDependenciesFailed  WorkflowExecutionUsageCalculationErrorCodeEnum = "DEPENDENCIES_FAILED"
	WorkflowExecutionUsageCalculationErrorCodeEnumNoUsageCalculated   WorkflowExecutionUsageCalculationErrorCodeEnum = "NO_USAGE_CALCULATED"
	WorkflowExecutionUsageCalculationErrorCodeEnumInternalServerError WorkflowExecutionUsageCalculationErrorCodeEnum = "INTERNAL_SERVER_ERROR"
)

func NewWorkflowExecutionUsageCalculationErrorCodeEnumFromString(s string) (WorkflowExecutionUsageCalculationErrorCodeEnum, error) {
	switch s {
	case "UNKNOWN":
		return WorkflowExecutionUsageCalculationErrorCodeEnumUnknown, nil
	case "DEPENDENCIES_FAILED":
		return WorkflowExecutionUsageCalculationErrorCodeEnumDependenciesFailed, nil
	case "NO_USAGE_CALCULATED":
		return WorkflowExecutionUsageCalculationErrorCodeEnumNoUsageCalculated, nil
	case "INTERNAL_SERVER_ERROR":
		return WorkflowExecutionUsageCalculationErrorCodeEnumInternalServerError, nil
	}
	var t WorkflowExecutionUsageCalculationErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionUsageCalculationErrorCodeEnum) Ptr() *WorkflowExecutionUsageCalculationErrorCodeEnum {
	return &w
}

type WorkflowExecutionUsageCalculationFulfilledBody struct {
	Usage []*MlModelUsageWrapper `json:"usage" url:"usage"`
	Cost  []*Price               `json:"cost" url:"cost"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionUsageCalculationFulfilledBody) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionUsageCalculationFulfilledBody) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionUsageCalculationFulfilledBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionUsageCalculationFulfilledBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionUsageCalculationFulfilledBody) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionUsageResult struct {
	Usage []*MlModelUsageWrapper                  `json:"usage,omitempty" url:"usage,omitempty"`
	Cost  []*Price                                `json:"cost,omitempty" url:"cost,omitempty"`
	Error *WorkflowExecutionUsageCalculationError `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionUsageResult) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionUsageResult) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionUsageResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionUsageResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionUsageResult) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A WORKFLOW-level event emitted from the workflow's execution.
type WorkflowExecutionWorkflowResultEvent struct {
	ExecutionId string               `json:"execution_id" url:"execution_id"`
	RunId       *string              `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string              `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowResultEvent `json:"data" url:"data"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionWorkflowResultEvent) Type() string {
	return w.type_
}

func (w *WorkflowExecutionWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionWorkflowResultEvent(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionWorkflowResultEvent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionWorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExpandMetaRequest struct {
	// If enabled, the Prompt Node FULFILLED events will include model host usage tracking. This may increase latency for some model hosts.
	Usage *bool `json:"usage,omitempty" url:"usage,omitempty"`
	// If enabled, the Prompt Node FULFILLED events will include model host cost tracking. This may increase latency for some model hosts.
	Cost *bool `json:"cost,omitempty" url:"cost,omitempty"`
	// If enabled, the Prompt Node FULFILLED events will include model host name
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExpandMetaRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExpandMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExpandMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExpandMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExpandMetaRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// Workflow initialization error.
type WorkflowInitializationError struct {
	Code    string `json:"code" url:"code"`
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowInitializationError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowInitializationError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowInitializationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowInitializationError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowInitializationError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowNodeResultData struct {
	PromptNodeResult        *PromptNodeResult
	SearchNodeResult        *SearchNodeResult
	TemplatingNodeResult    *TemplatingNodeResult
	CodeExecutionNodeResult *CodeExecutionNodeResult
	ConditionalNodeResult   *ConditionalNodeResult
	ApiNodeResult           *ApiNodeResult
	TerminalNodeResult      *TerminalNodeResult
	MergeNodeResult         *MergeNodeResult
	SubworkflowNodeResult   *SubworkflowNodeResult
	MetricNodeResult        *MetricNodeResult
	MapNodeResult           *MapNodeResult
}

func (w *WorkflowNodeResultData) UnmarshalJSON(data []byte) error {
	valuePromptNodeResult := new(PromptNodeResult)
	if err := json.Unmarshal(data, &valuePromptNodeResult); err == nil {
		w.PromptNodeResult = valuePromptNodeResult
		return nil
	}
	valueSearchNodeResult := new(SearchNodeResult)
	if err := json.Unmarshal(data, &valueSearchNodeResult); err == nil {
		w.SearchNodeResult = valueSearchNodeResult
		return nil
	}
	valueTemplatingNodeResult := new(TemplatingNodeResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeResult); err == nil {
		w.TemplatingNodeResult = valueTemplatingNodeResult
		return nil
	}
	valueCodeExecutionNodeResult := new(CodeExecutionNodeResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeResult); err == nil {
		w.CodeExecutionNodeResult = valueCodeExecutionNodeResult
		return nil
	}
	valueConditionalNodeResult := new(ConditionalNodeResult)
	if err := json.Unmarshal(data, &valueConditionalNodeResult); err == nil {
		w.ConditionalNodeResult = valueConditionalNodeResult
		return nil
	}
	valueApiNodeResult := new(ApiNodeResult)
	if err := json.Unmarshal(data, &valueApiNodeResult); err == nil {
		w.ApiNodeResult = valueApiNodeResult
		return nil
	}
	valueTerminalNodeResult := new(TerminalNodeResult)
	if err := json.Unmarshal(data, &valueTerminalNodeResult); err == nil {
		w.TerminalNodeResult = valueTerminalNodeResult
		return nil
	}
	valueMergeNodeResult := new(MergeNodeResult)
	if err := json.Unmarshal(data, &valueMergeNodeResult); err == nil {
		w.MergeNodeResult = valueMergeNodeResult
		return nil
	}
	valueSubworkflowNodeResult := new(SubworkflowNodeResult)
	if err := json.Unmarshal(data, &valueSubworkflowNodeResult); err == nil {
		w.SubworkflowNodeResult = valueSubworkflowNodeResult
		return nil
	}
	valueMetricNodeResult := new(MetricNodeResult)
	if err := json.Unmarshal(data, &valueMetricNodeResult); err == nil {
		w.MetricNodeResult = valueMetricNodeResult
		return nil
	}
	valueMapNodeResult := new(MapNodeResult)
	if err := json.Unmarshal(data, &valueMapNodeResult); err == nil {
		w.MapNodeResult = valueMapNodeResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowNodeResultData) MarshalJSON() ([]byte, error) {
	if w.PromptNodeResult != nil {
		return json.Marshal(w.PromptNodeResult)
	}
	if w.SearchNodeResult != nil {
		return json.Marshal(w.SearchNodeResult)
	}
	if w.TemplatingNodeResult != nil {
		return json.Marshal(w.TemplatingNodeResult)
	}
	if w.CodeExecutionNodeResult != nil {
		return json.Marshal(w.CodeExecutionNodeResult)
	}
	if w.ConditionalNodeResult != nil {
		return json.Marshal(w.ConditionalNodeResult)
	}
	if w.ApiNodeResult != nil {
		return json.Marshal(w.ApiNodeResult)
	}
	if w.TerminalNodeResult != nil {
		return json.Marshal(w.TerminalNodeResult)
	}
	if w.MergeNodeResult != nil {
		return json.Marshal(w.MergeNodeResult)
	}
	if w.SubworkflowNodeResult != nil {
		return json.Marshal(w.SubworkflowNodeResult)
	}
	if w.MetricNodeResult != nil {
		return json.Marshal(w.MetricNodeResult)
	}
	if w.MapNodeResult != nil {
		return json.Marshal(w.MapNodeResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodeResultDataVisitor interface {
	VisitPromptNodeResult(*PromptNodeResult) error
	VisitSearchNodeResult(*SearchNodeResult) error
	VisitTemplatingNodeResult(*TemplatingNodeResult) error
	VisitCodeExecutionNodeResult(*CodeExecutionNodeResult) error
	VisitConditionalNodeResult(*ConditionalNodeResult) error
	VisitApiNodeResult(*ApiNodeResult) error
	VisitTerminalNodeResult(*TerminalNodeResult) error
	VisitMergeNodeResult(*MergeNodeResult) error
	VisitSubworkflowNodeResult(*SubworkflowNodeResult) error
	VisitMetricNodeResult(*MetricNodeResult) error
	VisitMapNodeResult(*MapNodeResult) error
}

func (w *WorkflowNodeResultData) Accept(visitor WorkflowNodeResultDataVisitor) error {
	if w.PromptNodeResult != nil {
		return visitor.VisitPromptNodeResult(w.PromptNodeResult)
	}
	if w.SearchNodeResult != nil {
		return visitor.VisitSearchNodeResult(w.SearchNodeResult)
	}
	if w.TemplatingNodeResult != nil {
		return visitor.VisitTemplatingNodeResult(w.TemplatingNodeResult)
	}
	if w.CodeExecutionNodeResult != nil {
		return visitor.VisitCodeExecutionNodeResult(w.CodeExecutionNodeResult)
	}
	if w.ConditionalNodeResult != nil {
		return visitor.VisitConditionalNodeResult(w.ConditionalNodeResult)
	}
	if w.ApiNodeResult != nil {
		return visitor.VisitApiNodeResult(w.ApiNodeResult)
	}
	if w.TerminalNodeResult != nil {
		return visitor.VisitTerminalNodeResult(w.TerminalNodeResult)
	}
	if w.MergeNodeResult != nil {
		return visitor.VisitMergeNodeResult(w.MergeNodeResult)
	}
	if w.SubworkflowNodeResult != nil {
		return visitor.VisitSubworkflowNodeResult(w.SubworkflowNodeResult)
	}
	if w.MetricNodeResult != nil {
		return visitor.VisitMetricNodeResult(w.MetricNodeResult)
	}
	if w.MapNodeResult != nil {
		return visitor.VisitMapNodeResult(w.MapNodeResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodeResultEvent struct {
	InitiatedWorkflowNodeResultEvent *InitiatedWorkflowNodeResultEvent
	StreamingWorkflowNodeResultEvent *StreamingWorkflowNodeResultEvent
	FulfilledWorkflowNodeResultEvent *FulfilledWorkflowNodeResultEvent
	RejectedWorkflowNodeResultEvent  *RejectedWorkflowNodeResultEvent
}

func (w *WorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	valueInitiatedWorkflowNodeResultEvent := new(InitiatedWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueInitiatedWorkflowNodeResultEvent); err == nil {
		w.InitiatedWorkflowNodeResultEvent = valueInitiatedWorkflowNodeResultEvent
		return nil
	}
	valueStreamingWorkflowNodeResultEvent := new(StreamingWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueStreamingWorkflowNodeResultEvent); err == nil {
		w.StreamingWorkflowNodeResultEvent = valueStreamingWorkflowNodeResultEvent
		return nil
	}
	valueFulfilledWorkflowNodeResultEvent := new(FulfilledWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueFulfilledWorkflowNodeResultEvent); err == nil {
		w.FulfilledWorkflowNodeResultEvent = valueFulfilledWorkflowNodeResultEvent
		return nil
	}
	valueRejectedWorkflowNodeResultEvent := new(RejectedWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueRejectedWorkflowNodeResultEvent); err == nil {
		w.RejectedWorkflowNodeResultEvent = valueRejectedWorkflowNodeResultEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	if w.InitiatedWorkflowNodeResultEvent != nil {
		return json.Marshal(w.InitiatedWorkflowNodeResultEvent)
	}
	if w.StreamingWorkflowNodeResultEvent != nil {
		return json.Marshal(w.StreamingWorkflowNodeResultEvent)
	}
	if w.FulfilledWorkflowNodeResultEvent != nil {
		return json.Marshal(w.FulfilledWorkflowNodeResultEvent)
	}
	if w.RejectedWorkflowNodeResultEvent != nil {
		return json.Marshal(w.RejectedWorkflowNodeResultEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodeResultEventVisitor interface {
	VisitInitiatedWorkflowNodeResultEvent(*InitiatedWorkflowNodeResultEvent) error
	VisitStreamingWorkflowNodeResultEvent(*StreamingWorkflowNodeResultEvent) error
	VisitFulfilledWorkflowNodeResultEvent(*FulfilledWorkflowNodeResultEvent) error
	VisitRejectedWorkflowNodeResultEvent(*RejectedWorkflowNodeResultEvent) error
}

func (w *WorkflowNodeResultEvent) Accept(visitor WorkflowNodeResultEventVisitor) error {
	if w.InitiatedWorkflowNodeResultEvent != nil {
		return visitor.VisitInitiatedWorkflowNodeResultEvent(w.InitiatedWorkflowNodeResultEvent)
	}
	if w.StreamingWorkflowNodeResultEvent != nil {
		return visitor.VisitStreamingWorkflowNodeResultEvent(w.StreamingWorkflowNodeResultEvent)
	}
	if w.FulfilledWorkflowNodeResultEvent != nil {
		return visitor.VisitFulfilledWorkflowNodeResultEvent(w.FulfilledWorkflowNodeResultEvent)
	}
	if w.RejectedWorkflowNodeResultEvent != nil {
		return visitor.VisitRejectedWorkflowNodeResultEvent(w.RejectedWorkflowNodeResultEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// * `INITIATED` - INITIATED
// * `STREAMING` - STREAMING
// * `FULFILLED` - FULFILLED
// * `REJECTED` - REJECTED
type WorkflowNodeResultEventState string

const (
	WorkflowNodeResultEventStateInitiated WorkflowNodeResultEventState = "INITIATED"
	WorkflowNodeResultEventStateStreaming WorkflowNodeResultEventState = "STREAMING"
	WorkflowNodeResultEventStateFulfilled WorkflowNodeResultEventState = "FULFILLED"
	WorkflowNodeResultEventStateRejected  WorkflowNodeResultEventState = "REJECTED"
)

func NewWorkflowNodeResultEventStateFromString(s string) (WorkflowNodeResultEventState, error) {
	switch s {
	case "INITIATED":
		return WorkflowNodeResultEventStateInitiated, nil
	case "STREAMING":
		return WorkflowNodeResultEventStateStreaming, nil
	case "FULFILLED":
		return WorkflowNodeResultEventStateFulfilled, nil
	case "REJECTED":
		return WorkflowNodeResultEventStateRejected, nil
	}
	var t WorkflowNodeResultEventState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowNodeResultEventState) Ptr() *WorkflowNodeResultEventState {
	return &w
}

type WorkflowOutput struct {
	WorkflowOutputString        *WorkflowOutputString
	WorkflowOutputNumber        *WorkflowOutputNumber
	WorkflowOutputJson          *WorkflowOutputJson
	WorkflowOutputChatHistory   *WorkflowOutputChatHistory
	WorkflowOutputSearchResults *WorkflowOutputSearchResults
	WorkflowOutputArray         *WorkflowOutputArray
	WorkflowOutputError         *WorkflowOutputError
	WorkflowOutputFunctionCall  *WorkflowOutputFunctionCall
	WorkflowOutputImage         *WorkflowOutputImage
}

func (w *WorkflowOutput) UnmarshalJSON(data []byte) error {
	valueWorkflowOutputString := new(WorkflowOutputString)
	if err := json.Unmarshal(data, &valueWorkflowOutputString); err == nil {
		w.WorkflowOutputString = valueWorkflowOutputString
		return nil
	}
	valueWorkflowOutputNumber := new(WorkflowOutputNumber)
	if err := json.Unmarshal(data, &valueWorkflowOutputNumber); err == nil {
		w.WorkflowOutputNumber = valueWorkflowOutputNumber
		return nil
	}
	valueWorkflowOutputJson := new(WorkflowOutputJson)
	if err := json.Unmarshal(data, &valueWorkflowOutputJson); err == nil {
		w.WorkflowOutputJson = valueWorkflowOutputJson
		return nil
	}
	valueWorkflowOutputChatHistory := new(WorkflowOutputChatHistory)
	if err := json.Unmarshal(data, &valueWorkflowOutputChatHistory); err == nil {
		w.WorkflowOutputChatHistory = valueWorkflowOutputChatHistory
		return nil
	}
	valueWorkflowOutputSearchResults := new(WorkflowOutputSearchResults)
	if err := json.Unmarshal(data, &valueWorkflowOutputSearchResults); err == nil {
		w.WorkflowOutputSearchResults = valueWorkflowOutputSearchResults
		return nil
	}
	valueWorkflowOutputArray := new(WorkflowOutputArray)
	if err := json.Unmarshal(data, &valueWorkflowOutputArray); err == nil {
		w.WorkflowOutputArray = valueWorkflowOutputArray
		return nil
	}
	valueWorkflowOutputError := new(WorkflowOutputError)
	if err := json.Unmarshal(data, &valueWorkflowOutputError); err == nil {
		w.WorkflowOutputError = valueWorkflowOutputError
		return nil
	}
	valueWorkflowOutputFunctionCall := new(WorkflowOutputFunctionCall)
	if err := json.Unmarshal(data, &valueWorkflowOutputFunctionCall); err == nil {
		w.WorkflowOutputFunctionCall = valueWorkflowOutputFunctionCall
		return nil
	}
	valueWorkflowOutputImage := new(WorkflowOutputImage)
	if err := json.Unmarshal(data, &valueWorkflowOutputImage); err == nil {
		w.WorkflowOutputImage = valueWorkflowOutputImage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowOutput) MarshalJSON() ([]byte, error) {
	if w.WorkflowOutputString != nil {
		return json.Marshal(w.WorkflowOutputString)
	}
	if w.WorkflowOutputNumber != nil {
		return json.Marshal(w.WorkflowOutputNumber)
	}
	if w.WorkflowOutputJson != nil {
		return json.Marshal(w.WorkflowOutputJson)
	}
	if w.WorkflowOutputChatHistory != nil {
		return json.Marshal(w.WorkflowOutputChatHistory)
	}
	if w.WorkflowOutputSearchResults != nil {
		return json.Marshal(w.WorkflowOutputSearchResults)
	}
	if w.WorkflowOutputArray != nil {
		return json.Marshal(w.WorkflowOutputArray)
	}
	if w.WorkflowOutputError != nil {
		return json.Marshal(w.WorkflowOutputError)
	}
	if w.WorkflowOutputFunctionCall != nil {
		return json.Marshal(w.WorkflowOutputFunctionCall)
	}
	if w.WorkflowOutputImage != nil {
		return json.Marshal(w.WorkflowOutputImage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowOutputVisitor interface {
	VisitWorkflowOutputString(*WorkflowOutputString) error
	VisitWorkflowOutputNumber(*WorkflowOutputNumber) error
	VisitWorkflowOutputJson(*WorkflowOutputJson) error
	VisitWorkflowOutputChatHistory(*WorkflowOutputChatHistory) error
	VisitWorkflowOutputSearchResults(*WorkflowOutputSearchResults) error
	VisitWorkflowOutputArray(*WorkflowOutputArray) error
	VisitWorkflowOutputError(*WorkflowOutputError) error
	VisitWorkflowOutputFunctionCall(*WorkflowOutputFunctionCall) error
	VisitWorkflowOutputImage(*WorkflowOutputImage) error
}

func (w *WorkflowOutput) Accept(visitor WorkflowOutputVisitor) error {
	if w.WorkflowOutputString != nil {
		return visitor.VisitWorkflowOutputString(w.WorkflowOutputString)
	}
	if w.WorkflowOutputNumber != nil {
		return visitor.VisitWorkflowOutputNumber(w.WorkflowOutputNumber)
	}
	if w.WorkflowOutputJson != nil {
		return visitor.VisitWorkflowOutputJson(w.WorkflowOutputJson)
	}
	if w.WorkflowOutputChatHistory != nil {
		return visitor.VisitWorkflowOutputChatHistory(w.WorkflowOutputChatHistory)
	}
	if w.WorkflowOutputSearchResults != nil {
		return visitor.VisitWorkflowOutputSearchResults(w.WorkflowOutputSearchResults)
	}
	if w.WorkflowOutputArray != nil {
		return visitor.VisitWorkflowOutputArray(w.WorkflowOutputArray)
	}
	if w.WorkflowOutputError != nil {
		return visitor.VisitWorkflowOutputError(w.WorkflowOutputError)
	}
	if w.WorkflowOutputFunctionCall != nil {
		return visitor.VisitWorkflowOutputFunctionCall(w.WorkflowOutputFunctionCall)
	}
	if w.WorkflowOutputImage != nil {
		return visitor.VisitWorkflowOutputImage(w.WorkflowOutputImage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// An array output from a Workflow execution.
type WorkflowOutputArray struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string         `json:"name" url:"name"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputArray) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputArray) Type() string {
	return w.type_
}

func (w *WorkflowOutputArray) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputArray
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputArray(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ARRAY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputArray) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputArray
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A chat history output from a Workflow execution.
type WorkflowOutputChatHistory struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputChatHistory) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputChatHistory) Type() string {
	return w.type_
}

func (w *WorkflowOutputChatHistory) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputChatHistory
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputChatHistory(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputChatHistory) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputChatHistory
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An error output from a Workflow execution.
type WorkflowOutputError struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputError) Type() string {
	return w.type_
}

func (w *WorkflowOutputError) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputError
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputError(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ERROR", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputError) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputError
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A function call output from a Workflow execution.
type WorkflowOutputFunctionCall struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputFunctionCall) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputFunctionCall) Type() string {
	return w.type_
}

func (w *WorkflowOutputFunctionCall) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputFunctionCall
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputFunctionCall(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "FUNCTION_CALL", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputFunctionCall) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputFunctionCall
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An image output from a Workflow execution.
type WorkflowOutputImage struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputImage) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputImage) Type() string {
	return w.type_
}

func (w *WorkflowOutputImage) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputImage
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputImage(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "IMAGE", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputImage) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputImage
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputImage) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output from a Workflow execution.
type WorkflowOutputJson struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputJson) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputJson) Type() string {
	return w.type_
}

func (w *WorkflowOutputJson) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputJson
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputJson(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputJson) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputJson
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output from a Workflow execution.
type WorkflowOutputNumber struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputNumber) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputNumber) Type() string {
	return w.type_
}

func (w *WorkflowOutputNumber) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputNumber
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputNumber(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NUMBER", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputNumber) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputNumber
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A search results output from a Workflow execution.
type WorkflowOutputSearchResults struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputSearchResults) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputSearchResults) Type() string {
	return w.type_
}

func (w *WorkflowOutputSearchResults) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputSearchResults
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputSearchResults(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "SEARCH_RESULTS", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputSearchResults) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputSearchResults
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output from a Workflow execution.
type WorkflowOutputString struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputString) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputString) Type() string {
	return w.type_
}

func (w *WorkflowOutputString) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputString
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputString(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputString) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputString
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowParentContext struct {
	Parent             *ParentContext                `json:"parent,omitempty" url:"parent,omitempty"`
	Links              []*SpanLink                   `json:"links,omitempty" url:"links,omitempty"`
	WorkflowDefinition *VellumCodeResourceDefinition `json:"workflow_definition" url:"workflow_definition"`
	SpanId             string                        `json:"span_id" url:"span_id"`
	type_              string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowParentContext) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowParentContext) Type() string {
	return w.type_
}

func (w *WorkflowParentContext) UnmarshalJSON(data []byte) error {
	type embed WorkflowParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowParentContext) MarshalJSON() ([]byte, error) {
	type embed WorkflowParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowParentContext) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for an audio variable in a Workflow.
type WorkflowRequestAudioInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string              `json:"name" url:"name"`
	Value *VellumAudioRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestAudioInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestAudioInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestAudioInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestAudioInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestAudioInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "AUDIO", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestAudioInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestAudioInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestAudioInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a chat history variable in a Workflow.
type WorkflowRequestChatHistoryInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestChatHistoryInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestChatHistoryInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestChatHistoryInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestChatHistoryInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestChatHistoryInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestChatHistoryInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestChatHistoryInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a document variable in a Workflow.
type WorkflowRequestDocumentInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                 `json:"name" url:"name"`
	Value *VellumDocumentRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestDocumentInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestDocumentInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestDocumentInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestDocumentInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestDocumentInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "DOCUMENT", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestDocumentInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestDocumentInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "DOCUMENT",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestDocumentInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for an image variable in a Workflow.
type WorkflowRequestImageInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string              `json:"name" url:"name"`
	Value *VellumImageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestImageInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestImageInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestImageInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestImageInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestImageInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "IMAGE", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestImageInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestImageInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestImageInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowRequestInputRequest struct {
	WorkflowRequestStringInputRequest      *WorkflowRequestStringInputRequest
	WorkflowRequestJsonInputRequest        *WorkflowRequestJsonInputRequest
	WorkflowRequestChatHistoryInputRequest *WorkflowRequestChatHistoryInputRequest
	WorkflowRequestNumberInputRequest      *WorkflowRequestNumberInputRequest
	WorkflowRequestAudioInputRequest       *WorkflowRequestAudioInputRequest
	WorkflowRequestVideoInputRequest       *WorkflowRequestVideoInputRequest
	WorkflowRequestImageInputRequest       *WorkflowRequestImageInputRequest
	WorkflowRequestDocumentInputRequest    *WorkflowRequestDocumentInputRequest
}

func (w *WorkflowRequestInputRequest) UnmarshalJSON(data []byte) error {
	valueWorkflowRequestStringInputRequest := new(WorkflowRequestStringInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestStringInputRequest); err == nil {
		w.WorkflowRequestStringInputRequest = valueWorkflowRequestStringInputRequest
		return nil
	}
	valueWorkflowRequestJsonInputRequest := new(WorkflowRequestJsonInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestJsonInputRequest); err == nil {
		w.WorkflowRequestJsonInputRequest = valueWorkflowRequestJsonInputRequest
		return nil
	}
	valueWorkflowRequestChatHistoryInputRequest := new(WorkflowRequestChatHistoryInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestChatHistoryInputRequest); err == nil {
		w.WorkflowRequestChatHistoryInputRequest = valueWorkflowRequestChatHistoryInputRequest
		return nil
	}
	valueWorkflowRequestNumberInputRequest := new(WorkflowRequestNumberInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestNumberInputRequest); err == nil {
		w.WorkflowRequestNumberInputRequest = valueWorkflowRequestNumberInputRequest
		return nil
	}
	valueWorkflowRequestAudioInputRequest := new(WorkflowRequestAudioInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestAudioInputRequest); err == nil {
		w.WorkflowRequestAudioInputRequest = valueWorkflowRequestAudioInputRequest
		return nil
	}
	valueWorkflowRequestVideoInputRequest := new(WorkflowRequestVideoInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestVideoInputRequest); err == nil {
		w.WorkflowRequestVideoInputRequest = valueWorkflowRequestVideoInputRequest
		return nil
	}
	valueWorkflowRequestImageInputRequest := new(WorkflowRequestImageInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestImageInputRequest); err == nil {
		w.WorkflowRequestImageInputRequest = valueWorkflowRequestImageInputRequest
		return nil
	}
	valueWorkflowRequestDocumentInputRequest := new(WorkflowRequestDocumentInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestDocumentInputRequest); err == nil {
		w.WorkflowRequestDocumentInputRequest = valueWorkflowRequestDocumentInputRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowRequestInputRequest) MarshalJSON() ([]byte, error) {
	if w.WorkflowRequestStringInputRequest != nil {
		return json.Marshal(w.WorkflowRequestStringInputRequest)
	}
	if w.WorkflowRequestJsonInputRequest != nil {
		return json.Marshal(w.WorkflowRequestJsonInputRequest)
	}
	if w.WorkflowRequestChatHistoryInputRequest != nil {
		return json.Marshal(w.WorkflowRequestChatHistoryInputRequest)
	}
	if w.WorkflowRequestNumberInputRequest != nil {
		return json.Marshal(w.WorkflowRequestNumberInputRequest)
	}
	if w.WorkflowRequestAudioInputRequest != nil {
		return json.Marshal(w.WorkflowRequestAudioInputRequest)
	}
	if w.WorkflowRequestVideoInputRequest != nil {
		return json.Marshal(w.WorkflowRequestVideoInputRequest)
	}
	if w.WorkflowRequestImageInputRequest != nil {
		return json.Marshal(w.WorkflowRequestImageInputRequest)
	}
	if w.WorkflowRequestDocumentInputRequest != nil {
		return json.Marshal(w.WorkflowRequestDocumentInputRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowRequestInputRequestVisitor interface {
	VisitWorkflowRequestStringInputRequest(*WorkflowRequestStringInputRequest) error
	VisitWorkflowRequestJsonInputRequest(*WorkflowRequestJsonInputRequest) error
	VisitWorkflowRequestChatHistoryInputRequest(*WorkflowRequestChatHistoryInputRequest) error
	VisitWorkflowRequestNumberInputRequest(*WorkflowRequestNumberInputRequest) error
	VisitWorkflowRequestAudioInputRequest(*WorkflowRequestAudioInputRequest) error
	VisitWorkflowRequestVideoInputRequest(*WorkflowRequestVideoInputRequest) error
	VisitWorkflowRequestImageInputRequest(*WorkflowRequestImageInputRequest) error
	VisitWorkflowRequestDocumentInputRequest(*WorkflowRequestDocumentInputRequest) error
}

func (w *WorkflowRequestInputRequest) Accept(visitor WorkflowRequestInputRequestVisitor) error {
	if w.WorkflowRequestStringInputRequest != nil {
		return visitor.VisitWorkflowRequestStringInputRequest(w.WorkflowRequestStringInputRequest)
	}
	if w.WorkflowRequestJsonInputRequest != nil {
		return visitor.VisitWorkflowRequestJsonInputRequest(w.WorkflowRequestJsonInputRequest)
	}
	if w.WorkflowRequestChatHistoryInputRequest != nil {
		return visitor.VisitWorkflowRequestChatHistoryInputRequest(w.WorkflowRequestChatHistoryInputRequest)
	}
	if w.WorkflowRequestNumberInputRequest != nil {
		return visitor.VisitWorkflowRequestNumberInputRequest(w.WorkflowRequestNumberInputRequest)
	}
	if w.WorkflowRequestAudioInputRequest != nil {
		return visitor.VisitWorkflowRequestAudioInputRequest(w.WorkflowRequestAudioInputRequest)
	}
	if w.WorkflowRequestVideoInputRequest != nil {
		return visitor.VisitWorkflowRequestVideoInputRequest(w.WorkflowRequestVideoInputRequest)
	}
	if w.WorkflowRequestImageInputRequest != nil {
		return visitor.VisitWorkflowRequestImageInputRequest(w.WorkflowRequestImageInputRequest)
	}
	if w.WorkflowRequestDocumentInputRequest != nil {
		return visitor.VisitWorkflowRequestDocumentInputRequest(w.WorkflowRequestDocumentInputRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// The input for a JSON variable in a Workflow.
type WorkflowRequestJsonInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestJsonInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestJsonInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestJsonInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestJsonInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestJsonInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestJsonInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestJsonInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestJsonInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a number variable in a Workflow.
type WorkflowRequestNumberInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string  `json:"name" url:"name"`
	Value float64 `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestNumberInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestNumberInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestNumberInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestNumberInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestNumberInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NUMBER", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestNumberInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestNumberInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestNumberInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a string variable in a Workflow.
type WorkflowRequestStringInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestStringInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestStringInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestStringInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestStringInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestStringInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestStringInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestStringInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestStringInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a video variable in a Workflow.
type WorkflowRequestVideoInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string              `json:"name" url:"name"`
	Value *VellumVideoRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestVideoInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestVideoInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestVideoInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestVideoInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestVideoInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "VIDEO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "VIDEO", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestVideoInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestVideoInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "VIDEO",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestVideoInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEvent struct {
	Id      string                         `json:"id" url:"id"`
	State   WorkflowNodeResultEventState   `json:"state" url:"state"`
	Ts      time.Time                      `json:"ts" url:"ts"`
	Output  *WorkflowResultEventOutputData `json:"output,omitempty" url:"output,omitempty"`
	Error   *WorkflowEventError            `json:"error,omitempty" url:"error,omitempty"`
	Outputs []*WorkflowOutput              `json:"outputs,omitempty" url:"outputs,omitempty"`
	Inputs  []*ExecutionVellumValue        `json:"inputs,omitempty" url:"inputs,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEvent(unmarshaler.embed)
	w.Ts = unmarshaler.Ts.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
		Ts:    core.NewDateTime(w.Ts),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputData struct {
	WorkflowResultEventOutputDataString        *WorkflowResultEventOutputDataString
	WorkflowResultEventOutputDataNumber        *WorkflowResultEventOutputDataNumber
	WorkflowResultEventOutputDataJson          *WorkflowResultEventOutputDataJson
	WorkflowResultEventOutputDataChatHistory   *WorkflowResultEventOutputDataChatHistory
	WorkflowResultEventOutputDataSearchResults *WorkflowResultEventOutputDataSearchResults
	WorkflowResultEventOutputDataArray         *WorkflowResultEventOutputDataArray
	WorkflowResultEventOutputDataFunctionCall  *WorkflowResultEventOutputDataFunctionCall
	WorkflowResultEventOutputDataError         *WorkflowResultEventOutputDataError
}

func (w *WorkflowResultEventOutputData) UnmarshalJSON(data []byte) error {
	valueWorkflowResultEventOutputDataString := new(WorkflowResultEventOutputDataString)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataString); err == nil {
		w.WorkflowResultEventOutputDataString = valueWorkflowResultEventOutputDataString
		return nil
	}
	valueWorkflowResultEventOutputDataNumber := new(WorkflowResultEventOutputDataNumber)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataNumber); err == nil {
		w.WorkflowResultEventOutputDataNumber = valueWorkflowResultEventOutputDataNumber
		return nil
	}
	valueWorkflowResultEventOutputDataJson := new(WorkflowResultEventOutputDataJson)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataJson); err == nil {
		w.WorkflowResultEventOutputDataJson = valueWorkflowResultEventOutputDataJson
		return nil
	}
	valueWorkflowResultEventOutputDataChatHistory := new(WorkflowResultEventOutputDataChatHistory)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataChatHistory); err == nil {
		w.WorkflowResultEventOutputDataChatHistory = valueWorkflowResultEventOutputDataChatHistory
		return nil
	}
	valueWorkflowResultEventOutputDataSearchResults := new(WorkflowResultEventOutputDataSearchResults)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataSearchResults); err == nil {
		w.WorkflowResultEventOutputDataSearchResults = valueWorkflowResultEventOutputDataSearchResults
		return nil
	}
	valueWorkflowResultEventOutputDataArray := new(WorkflowResultEventOutputDataArray)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataArray); err == nil {
		w.WorkflowResultEventOutputDataArray = valueWorkflowResultEventOutputDataArray
		return nil
	}
	valueWorkflowResultEventOutputDataFunctionCall := new(WorkflowResultEventOutputDataFunctionCall)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataFunctionCall); err == nil {
		w.WorkflowResultEventOutputDataFunctionCall = valueWorkflowResultEventOutputDataFunctionCall
		return nil
	}
	valueWorkflowResultEventOutputDataError := new(WorkflowResultEventOutputDataError)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataError); err == nil {
		w.WorkflowResultEventOutputDataError = valueWorkflowResultEventOutputDataError
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowResultEventOutputData) MarshalJSON() ([]byte, error) {
	if w.WorkflowResultEventOutputDataString != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataString)
	}
	if w.WorkflowResultEventOutputDataNumber != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataNumber)
	}
	if w.WorkflowResultEventOutputDataJson != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataJson)
	}
	if w.WorkflowResultEventOutputDataChatHistory != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataChatHistory)
	}
	if w.WorkflowResultEventOutputDataSearchResults != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataSearchResults)
	}
	if w.WorkflowResultEventOutputDataArray != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataArray)
	}
	if w.WorkflowResultEventOutputDataFunctionCall != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataFunctionCall)
	}
	if w.WorkflowResultEventOutputDataError != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataError)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowResultEventOutputDataVisitor interface {
	VisitWorkflowResultEventOutputDataString(*WorkflowResultEventOutputDataString) error
	VisitWorkflowResultEventOutputDataNumber(*WorkflowResultEventOutputDataNumber) error
	VisitWorkflowResultEventOutputDataJson(*WorkflowResultEventOutputDataJson) error
	VisitWorkflowResultEventOutputDataChatHistory(*WorkflowResultEventOutputDataChatHistory) error
	VisitWorkflowResultEventOutputDataSearchResults(*WorkflowResultEventOutputDataSearchResults) error
	VisitWorkflowResultEventOutputDataArray(*WorkflowResultEventOutputDataArray) error
	VisitWorkflowResultEventOutputDataFunctionCall(*WorkflowResultEventOutputDataFunctionCall) error
	VisitWorkflowResultEventOutputDataError(*WorkflowResultEventOutputDataError) error
}

func (w *WorkflowResultEventOutputData) Accept(visitor WorkflowResultEventOutputDataVisitor) error {
	if w.WorkflowResultEventOutputDataString != nil {
		return visitor.VisitWorkflowResultEventOutputDataString(w.WorkflowResultEventOutputDataString)
	}
	if w.WorkflowResultEventOutputDataNumber != nil {
		return visitor.VisitWorkflowResultEventOutputDataNumber(w.WorkflowResultEventOutputDataNumber)
	}
	if w.WorkflowResultEventOutputDataJson != nil {
		return visitor.VisitWorkflowResultEventOutputDataJson(w.WorkflowResultEventOutputDataJson)
	}
	if w.WorkflowResultEventOutputDataChatHistory != nil {
		return visitor.VisitWorkflowResultEventOutputDataChatHistory(w.WorkflowResultEventOutputDataChatHistory)
	}
	if w.WorkflowResultEventOutputDataSearchResults != nil {
		return visitor.VisitWorkflowResultEventOutputDataSearchResults(w.WorkflowResultEventOutputDataSearchResults)
	}
	if w.WorkflowResultEventOutputDataArray != nil {
		return visitor.VisitWorkflowResultEventOutputDataArray(w.WorkflowResultEventOutputDataArray)
	}
	if w.WorkflowResultEventOutputDataFunctionCall != nil {
		return visitor.VisitWorkflowResultEventOutputDataFunctionCall(w.WorkflowResultEventOutputDataFunctionCall)
	}
	if w.WorkflowResultEventOutputDataError != nil {
		return visitor.VisitWorkflowResultEventOutputDataError(w.WorkflowResultEventOutputDataError)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// An Array output returned from a Workflow execution.
type WorkflowResultEventOutputDataArray struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string        `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataArray) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataArray) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataArray) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataArray
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataArray(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ARRAY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataArray) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataArray
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Chat History output streamed from a Workflow execution.
type WorkflowResultEventOutputDataChatHistory struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string        `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataChatHistory) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataChatHistory) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataChatHistory) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataChatHistory
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataChatHistory(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataChatHistory) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataChatHistory
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An Error output streamed from a Workflow execution.
type WorkflowResultEventOutputDataError struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string      `json:"delta,omitempty" url:"delta,omitempty"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataError) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataError) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataError
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataError(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ERROR", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataError) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataError
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Function Call output returned from a Workflow execution.
type WorkflowResultEventOutputDataFunctionCall struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string       `json:"delta,omitempty" url:"delta,omitempty"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataFunctionCall) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataFunctionCall) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataFunctionCall) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataFunctionCall
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataFunctionCall(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "FUNCTION_CALL", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataFunctionCall) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataFunctionCall
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output streamed from a Workflow execution.
type WorkflowResultEventOutputDataJson struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string     `json:"delta,omitempty" url:"delta,omitempty"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataJson) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataJson) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataJson) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataJson
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataJson(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataJson) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataJson
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output streamed from a Workflow execution.
type WorkflowResultEventOutputDataNumber struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string  `json:"delta,omitempty" url:"delta,omitempty"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataNumber) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataNumber) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataNumber) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataNumber
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataNumber(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NUMBER", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataNumber) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataNumber
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Search Results output streamed from a Workflow execution.
type WorkflowResultEventOutputDataSearchResults struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string         `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataSearchResults) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataSearchResults) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataSearchResults) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataSearchResults
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataSearchResults(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "SEARCH_RESULTS", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataSearchResults) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataSearchResults
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output streamed from a Workflow execution.
type WorkflowResultEventOutputDataString struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING.
	Delta *string `json:"delta,omitempty" url:"delta,omitempty"`
	// The entire string value. Will be non-null for events of state FULFILLED.
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataString) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataString) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataString) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataString
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataString(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataString) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataString
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowSandboxParentContext struct {
	Parent               *ParentContext `json:"parent,omitempty" url:"parent,omitempty"`
	Links                []*SpanLink    `json:"links,omitempty" url:"links,omitempty"`
	SpanId               string         `json:"span_id" url:"span_id"`
	SandboxId            string         `json:"sandbox_id" url:"sandbox_id"`
	SandboxHistoryItemId string         `json:"sandbox_history_item_id" url:"sandbox_history_item_id"`
	ScenarioId           string         `json:"scenario_id" url:"scenario_id"`
	type_                string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowSandboxParentContext) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowSandboxParentContext) Type() string {
	return w.type_
}

func (w *WorkflowSandboxParentContext) UnmarshalJSON(data []byte) error {
	type embed WorkflowSandboxParentContext
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowSandboxParentContext(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_SANDBOX" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW_SANDBOX", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowSandboxParentContext) MarshalJSON() ([]byte, error) {
	type embed WorkflowSandboxParentContext
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW_SANDBOX",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowSandboxParentContext) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowStreamEvent struct {
	WorkflowExecutionWorkflowResultEvent *WorkflowExecutionWorkflowResultEvent
	WorkflowExecutionNodeResultEvent     *WorkflowExecutionNodeResultEvent
}

func (w *WorkflowStreamEvent) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionWorkflowResultEvent := new(WorkflowExecutionWorkflowResultEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionWorkflowResultEvent); err == nil {
		w.WorkflowExecutionWorkflowResultEvent = valueWorkflowExecutionWorkflowResultEvent
		return nil
	}
	valueWorkflowExecutionNodeResultEvent := new(WorkflowExecutionNodeResultEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionNodeResultEvent); err == nil {
		w.WorkflowExecutionNodeResultEvent = valueWorkflowExecutionNodeResultEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowStreamEvent) MarshalJSON() ([]byte, error) {
	if w.WorkflowExecutionWorkflowResultEvent != nil {
		return json.Marshal(w.WorkflowExecutionWorkflowResultEvent)
	}
	if w.WorkflowExecutionNodeResultEvent != nil {
		return json.Marshal(w.WorkflowExecutionNodeResultEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowStreamEventVisitor interface {
	VisitWorkflowExecutionWorkflowResultEvent(*WorkflowExecutionWorkflowResultEvent) error
	VisitWorkflowExecutionNodeResultEvent(*WorkflowExecutionNodeResultEvent) error
}

func (w *WorkflowStreamEvent) Accept(visitor WorkflowStreamEventVisitor) error {
	if w.WorkflowExecutionWorkflowResultEvent != nil {
		return visitor.VisitWorkflowExecutionWorkflowResultEvent(w.WorkflowExecutionWorkflowResultEvent)
	}
	if w.WorkflowExecutionNodeResultEvent != nil {
		return visitor.VisitWorkflowExecutionNodeResultEvent(w.WorkflowExecutionNodeResultEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}
