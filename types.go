// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type ExecuteWorkflowStreamRequest struct {
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty"`
	// The list of inputs defined in the Workflow's deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty"`
	// Optionally include a unique identifier for tracking purposes.
	ExternalId *string `json:"external_id,omitempty"`
	// Optionally specify which events you want to receive. Defaults to only WORKFLOW events. Note that the schema of non-WORKFLOW events is unstable and should be used with caution.
	EventTypes []WorkflowExecutionEventType `json:"event_types,omitempty"`
}

type GenerateBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty"`
}

type GenerateStreamBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty"`
}

type SearchRequestBodyRequest struct {
	// The ID of the index to search against. Must provide either this or index_name.
	IndexId *string `json:"index_id,omitempty"`
	// The name of the index to search against. Must provide either this or index_id.
	IndexName *string `json:"index_name,omitempty"`
	// The query to search for.
	Query string `json:"query"`
	// Configuration options for the search.
	Options *SearchRequestOptionsRequest `json:"options,omitempty"`
}

type SubmitCompletionActualsRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty"`
	// Feedback regarding the quality of previously generated completions
	Actuals []*SubmitCompletionActualRequest `json:"actuals,omitempty"`
}

type SubmitWorkflowExecutionActualsRequest struct {
	// Feedback regarding the quality of an output on a previously executed workflow.
	Actuals []*SubmitWorkflowExecutionActualRequest `json:"actuals,omitempty"`
	// The Vellum-generated ID of a previously executed workflow. Must provide either this or external_id.
	ExecutionId *string `json:"execution_id,omitempty"`
	// The external ID that was originally provided by when executing the workflow, if applicable, that you'd now like to submit actuals for. Must provide either this or execution_id.
	ExternalId *string `json:"external_id,omitempty"`
}

type ApiNodeResult struct {
	Data *ApiNodeResultData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ApiNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiNodeResultData struct {
	TextOutputId       string                 `json:"text_output_id"`
	Text               *string                `json:"text,omitempty"`
	JsonOutputId       string                 `json:"json_output_id"`
	Json               map[string]interface{} `json:"json,omitempty"`
	StatusCodeOutputId string                 `json:"status_code_output_id"`
	StatusCode         int                    `json:"status_code"`

	_rawJSON json.RawMessage
}

func (a *ApiNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResultData(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResultData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// * `CHAT_MESSAGE` - CHAT_MESSAGE
// * `CHAT_HISTORY` - CHAT_HISTORY
// * `JINJA` - JINJA
// * `FUNCTION_DEFINITION` - FUNCTION_DEFINITION
type BlockTypeEnum string

const (
	BlockTypeEnumChatMessage        BlockTypeEnum = "CHAT_MESSAGE"
	BlockTypeEnumChatHistory        BlockTypeEnum = "CHAT_HISTORY"
	BlockTypeEnumJinja              BlockTypeEnum = "JINJA"
	BlockTypeEnumFunctionDefinition BlockTypeEnum = "FUNCTION_DEFINITION"
)

func NewBlockTypeEnumFromString(s string) (BlockTypeEnum, error) {
	switch s {
	case "CHAT_MESSAGE":
		return BlockTypeEnumChatMessage, nil
	case "CHAT_HISTORY":
		return BlockTypeEnumChatHistory, nil
	case "JINJA":
		return BlockTypeEnumJinja, nil
	case "FUNCTION_DEFINITION":
		return BlockTypeEnumFunctionDefinition, nil
	}
	var t BlockTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BlockTypeEnum) Ptr() *BlockTypeEnum {
	return &b
}

type ChatHistoryInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                `json:"name"`
	Value []*ChatMessageRequest `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatHistoryInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatHistoryInputRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryInputRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessage struct {
	Text string          `json:"text"`
	Role ChatMessageRole `json:"role,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessage(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessage) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessageRequest struct {
	Text string          `json:"text"`
	Role ChatMessageRole `json:"role,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatMessageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessageRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessageRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// * `SYSTEM` - System
// * `ASSISTANT` - Assistant
// * `USER` - User
// * `FUNCTION` - Function
type ChatMessageRole string

const (
	ChatMessageRoleSystem    ChatMessageRole = "SYSTEM"
	ChatMessageRoleAssistant ChatMessageRole = "ASSISTANT"
	ChatMessageRoleUser      ChatMessageRole = "USER"
	ChatMessageRoleFunction  ChatMessageRole = "FUNCTION"
)

func NewChatMessageRoleFromString(s string) (ChatMessageRole, error) {
	switch s {
	case "SYSTEM":
		return ChatMessageRoleSystem, nil
	case "ASSISTANT":
		return ChatMessageRoleAssistant, nil
	case "USER":
		return ChatMessageRoleUser, nil
	case "FUNCTION":
		return ChatMessageRoleFunction, nil
	}
	var t ChatMessageRole
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChatMessageRole) Ptr() *ChatMessageRole {
	return &c
}

type ConditionalNodeResult struct {
	Data *ConditionalNodeResultData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConditionalNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConditionalNodeResultData struct {
	SourceHandleId *string `json:"source_handle_id,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConditionalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResultData(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeploymentProviderPayloadResponse struct {
	Payload map[string]interface{} `json:"payload,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeploymentProviderPayloadResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeploymentProviderPayloadResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeploymentProviderPayloadResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentProviderPayloadResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentRead struct {
	Id      string    `json:"id"`
	Created time.Time `json:"created"`
	// A human-readable label for the deployment
	Label string `json:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name"`
	// The current status of the deployment
	//
	// * `ACTIVE` - Active
	// * `INACTIVE` - Inactive
	// * `ARCHIVED` - Archived
	Status *DeploymentStatus `json:"status,omitempty"`
	// The environment this deployment is used in
	//
	// * `DEVELOPMENT` - Development
	// * `STAGING` - Staging
	// * `PRODUCTION` - Production
	Environment *EnvironmentEnum `json:"environment,omitempty"`
	// Deprecated. The Prompt execution endpoints return a `prompt_version_id` that could be used instead.
	ActiveModelVersionIds []string          `json:"active_model_version_ids,omitempty"`
	LastDeployedOn        time.Time         `json:"last_deployed_on"`
	InputVariables        []*VellumVariable `json:"input_variables,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeploymentRead) UnmarshalJSON(data []byte) error {
	type unmarshaler DeploymentRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeploymentRead(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// * `ACTIVE` - Active
// * `INACTIVE` - Inactive
// * `ARCHIVED` - Archived
type DeploymentStatus string

const (
	DeploymentStatusActive   DeploymentStatus = "ACTIVE"
	DeploymentStatusInactive DeploymentStatus = "INACTIVE"
	DeploymentStatusArchived DeploymentStatus = "ARCHIVED"
)

func NewDeploymentStatusFromString(s string) (DeploymentStatus, error) {
	switch s {
	case "ACTIVE":
		return DeploymentStatusActive, nil
	case "INACTIVE":
		return DeploymentStatusInactive, nil
	case "ARCHIVED":
		return DeploymentStatusArchived, nil
	}
	var t DeploymentStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeploymentStatus) Ptr() *DeploymentStatus {
	return &d
}

type DocumentDocumentToDocumentIndex struct {
	// Vellum-generated ID that uniquely identifies this link.
	Id string `json:"id"`
	// Vellum-generated ID that uniquely identifies the index this document is included in.
	DocumentIndexId string `json:"document_index_id"`
	// An enum value representing where this document is along its indexing lifecycle for this index.
	//
	// * `AWAITING_PROCESSING` - Awaiting Processing
	// * `QUEUED` - Queued
	// * `INDEXING` - Indexing
	// * `INDEXED` - Indexed
	// * `FAILED` - Failed
	IndexingState *IndexingStateEnum `json:"indexing_state,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentDocumentToDocumentIndex) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentDocumentToDocumentIndex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentDocumentToDocumentIndex(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentDocumentToDocumentIndex) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexRead struct {
	Id      string    `json:"id"`
	Created time.Time `json:"created"`
	// A human-readable label for the document index
	Label string `json:"label"`
	// A name that uniquely identifies this index within its workspace
	Name string `json:"name"`
	// The current status of the document index
	//
	// * `ACTIVE` - Active
	// * `ARCHIVED` - Archived
	Status *DocumentIndexStatus `json:"status,omitempty"`
	// The environment this document index is used in
	//
	// * `DEVELOPMENT` - Development
	// * `STAGING` - Staging
	// * `PRODUCTION` - Production
	Environment *EnvironmentEnum `json:"environment,omitempty"`
	// Configuration representing how documents should be indexed
	IndexingConfig map[string]interface{} `json:"indexing_config,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentIndexRead) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentIndexRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentIndexRead(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// * `ACTIVE` - Active
// * `ARCHIVED` - Archived
type DocumentIndexStatus string

const (
	DocumentIndexStatusActive   DocumentIndexStatus = "ACTIVE"
	DocumentIndexStatusArchived DocumentIndexStatus = "ARCHIVED"
)

func NewDocumentIndexStatusFromString(s string) (DocumentIndexStatus, error) {
	switch s {
	case "ACTIVE":
		return DocumentIndexStatusActive, nil
	case "ARCHIVED":
		return DocumentIndexStatusArchived, nil
	}
	var t DocumentIndexStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DocumentIndexStatus) Ptr() *DocumentIndexStatus {
	return &d
}

type DocumentRead struct {
	Id string `json:"id"`
	// The unique id of this document as it exists in the user's system.
	ExternalId     *string   `json:"external_id,omitempty"`
	LastUploadedAt time.Time `json:"last_uploaded_at"`
	// A human-readable label for the document. Defaults to the originally uploaded file's file name.
	Label string `json:"label"`
	// The current processing state of the document
	//
	// * `QUEUED` - Queued
	// * `PROCESSING` - Processing
	// * `PROCESSED` - Processed
	// * `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty"`
	// The current status of the document
	//
	// * `ACTIVE` - Active
	Status                    *DocumentStatus                    `json:"status,omitempty"`
	OriginalFileUrl           *string                            `json:"original_file_url,omitempty"`
	ProcessedFileUrl          *string                            `json:"processed_file_url,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentRead) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentRead(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentStatus = string

type EnrichedNormalizedCompletion struct {
	// The Vellum-generated ID of the completion.
	Id string `json:"id"`
	// The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.
	ExternalId *string `json:"external_id,omitempty"`
	// The text generated by the LLM.
	Text string `json:"text"`
	// The reason the generation finished.
	//
	// * `LENGTH` - LENGTH
	// * `STOP` - STOP
	// * `UNKNOWN` - UNKNOWN
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty"`
	// The logprobs of the completion. Only present if specified in the original request options.
	Logprobs *NormalizedLogProbs `json:"logprobs,omitempty"`
	// The ID of the model version used to generate this completion.
	ModelVersionId       string              `json:"model_version_id"`
	PromptVersionId      string              `json:"prompt_version_id"`
	Type                 *VellumVariableType `json:"type,omitempty"`
	DeploymentReleaseTag string              `json:"deployment_release_tag"`
	ModelName            string              `json:"model_name"`

	_rawJSON json.RawMessage
}

func (e *EnrichedNormalizedCompletion) UnmarshalJSON(data []byte) error {
	type unmarshaler EnrichedNormalizedCompletion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnrichedNormalizedCompletion(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnrichedNormalizedCompletion) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// * `DEVELOPMENT` - Development
// * `STAGING` - Staging
// * `PRODUCTION` - Production
type EnvironmentEnum string

const (
	EnvironmentEnumDevelopment EnvironmentEnum = "DEVELOPMENT"
	EnvironmentEnumStaging     EnvironmentEnum = "STAGING"
	EnvironmentEnumProduction  EnvironmentEnum = "PRODUCTION"
)

func NewEnvironmentEnumFromString(s string) (EnvironmentEnum, error) {
	switch s {
	case "DEVELOPMENT":
		return EnvironmentEnumDevelopment, nil
	case "STAGING":
		return EnvironmentEnumStaging, nil
	case "PRODUCTION":
		return EnvironmentEnumProduction, nil
	}
	var t EnvironmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnvironmentEnum) Ptr() *EnvironmentEnum {
	return &e
}

type ErrorExecutePromptResponse struct {
	ExecutionId string       `json:"execution_id"`
	Value       *VellumError `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ErrorExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorExecutePromptResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorExecutePromptResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EvaluationParams struct {
	// The target value to compare the LLM output against. Typically what you expect or desire the LLM output to be.
	Target *string `json:"target,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EvaluationParams) UnmarshalJSON(data []byte) error {
	type unmarshaler EvaluationParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EvaluationParams(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EvaluationParams) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EvaluationParamsRequest struct {
	// The target value to compare the LLM output against. Typically what you expect or desire the LLM output to be.
	Target *string `json:"target,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EvaluationParamsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EvaluationParamsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EvaluationParamsRequest(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EvaluationParamsRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutePromptApiErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail"`

	_rawJSON json.RawMessage
}

func (e *ExecutePromptApiErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutePromptApiErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutePromptApiErrorResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutePromptApiErrorResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutePromptRequest struct {
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty"`
	// The name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty"`
	ExternalId *string `json:"external_id,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutePromptRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutePromptRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutePromptRequest(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutePromptRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutePromptResponse struct {
	Type   string
	Error  *ErrorExecutePromptResponse
	Json   *JsonExecutePromptResponse
	String *StringExecutePromptResponse
}

func NewExecutePromptResponseFromError(value *ErrorExecutePromptResponse) *ExecutePromptResponse {
	return &ExecutePromptResponse{Type: "ERROR", Error: value}
}

func NewExecutePromptResponseFromJson(value *JsonExecutePromptResponse) *ExecutePromptResponse {
	return &ExecutePromptResponse{Type: "JSON", Json: value}
}

func NewExecutePromptResponseFromString(value *StringExecutePromptResponse) *ExecutePromptResponse {
	return &ExecutePromptResponse{Type: "STRING", String: value}
}

func (e *ExecutePromptResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "ERROR":
		value := new(ErrorExecutePromptResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Error = value
	case "JSON":
		value := new(JsonExecutePromptResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Json = value
	case "STRING":
		value := new(StringExecutePromptResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.String = value
	}
	return nil
}

func (e ExecutePromptResponse) MarshalJSON() ([]byte, error) {
	switch e.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*ErrorExecutePromptResponse
		}{
			Type:                       e.Type,
			ErrorExecutePromptResponse: e.Error,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*JsonExecutePromptResponse
		}{
			Type:                      e.Type,
			JsonExecutePromptResponse: e.Json,
		}
		return json.Marshal(marshaler)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*StringExecutePromptResponse
		}{
			Type:                        e.Type,
			StringExecutePromptResponse: e.String,
		}
		return json.Marshal(marshaler)
	}
}

type ExecutePromptResponseVisitor interface {
	VisitError(*ErrorExecutePromptResponse) error
	VisitJson(*JsonExecutePromptResponse) error
	VisitString(*StringExecutePromptResponse) error
}

func (e *ExecutePromptResponse) Accept(visitor ExecutePromptResponseVisitor) error {
	switch e.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "ERROR":
		return visitor.VisitError(e.Error)
	case "JSON":
		return visitor.VisitJson(e.Json)
	case "STRING":
		return visitor.VisitString(e.String)
	}
}

type ExecutePromptStreamingResponse struct {
	State     string
	Initiated *InitiatedExecutePromptStreamingResponse
	Streaming *StreamingExecutePromptStreamingResponse
	Fulfilled *FulfilledExecutePromptStreamingResponse
	Rejected  *RejectedExecutePromptStreamingResponse
}

func NewExecutePromptStreamingResponseFromInitiated(value *InitiatedExecutePromptStreamingResponse) *ExecutePromptStreamingResponse {
	return &ExecutePromptStreamingResponse{State: "INITIATED", Initiated: value}
}

func NewExecutePromptStreamingResponseFromStreaming(value *StreamingExecutePromptStreamingResponse) *ExecutePromptStreamingResponse {
	return &ExecutePromptStreamingResponse{State: "STREAMING", Streaming: value}
}

func NewExecutePromptStreamingResponseFromFulfilled(value *FulfilledExecutePromptStreamingResponse) *ExecutePromptStreamingResponse {
	return &ExecutePromptStreamingResponse{State: "FULFILLED", Fulfilled: value}
}

func NewExecutePromptStreamingResponseFromRejected(value *RejectedExecutePromptStreamingResponse) *ExecutePromptStreamingResponse {
	return &ExecutePromptStreamingResponse{State: "REJECTED", Rejected: value}
}

func (e *ExecutePromptStreamingResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.State = unmarshaler.State
	switch unmarshaler.State {
	case "INITIATED":
		value := new(InitiatedExecutePromptStreamingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Initiated = value
	case "STREAMING":
		value := new(StreamingExecutePromptStreamingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Streaming = value
	case "FULFILLED":
		value := new(FulfilledExecutePromptStreamingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Fulfilled = value
	case "REJECTED":
		value := new(RejectedExecutePromptStreamingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rejected = value
	}
	return nil
}

func (e ExecutePromptStreamingResponse) MarshalJSON() ([]byte, error) {
	switch e.State {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.State, e)
	case "INITIATED":
		var marshaler = struct {
			State string `json:"state"`
			*InitiatedExecutePromptStreamingResponse
		}{
			State:                                   e.State,
			InitiatedExecutePromptStreamingResponse: e.Initiated,
		}
		return json.Marshal(marshaler)
	case "STREAMING":
		var marshaler = struct {
			State string `json:"state"`
			*StreamingExecutePromptStreamingResponse
		}{
			State:                                   e.State,
			StreamingExecutePromptStreamingResponse: e.Streaming,
		}
		return json.Marshal(marshaler)
	case "FULFILLED":
		var marshaler = struct {
			State string `json:"state"`
			*FulfilledExecutePromptStreamingResponse
		}{
			State:                                   e.State,
			FulfilledExecutePromptStreamingResponse: e.Fulfilled,
		}
		return json.Marshal(marshaler)
	case "REJECTED":
		var marshaler = struct {
			State string `json:"state"`
			*RejectedExecutePromptStreamingResponse
		}{
			State:                                  e.State,
			RejectedExecutePromptStreamingResponse: e.Rejected,
		}
		return json.Marshal(marshaler)
	}
}

type ExecutePromptStreamingResponseVisitor interface {
	VisitInitiated(*InitiatedExecutePromptStreamingResponse) error
	VisitStreaming(*StreamingExecutePromptStreamingResponse) error
	VisitFulfilled(*FulfilledExecutePromptStreamingResponse) error
	VisitRejected(*RejectedExecutePromptStreamingResponse) error
}

func (e *ExecutePromptStreamingResponse) Accept(visitor ExecutePromptStreamingResponseVisitor) error {
	switch e.State {
	default:
		return fmt.Errorf("invalid type %s in %T", e.State, e)
	case "INITIATED":
		return visitor.VisitInitiated(e.Initiated)
	case "STREAMING":
		return visitor.VisitStreaming(e.Streaming)
	case "FULFILLED":
		return visitor.VisitFulfilled(e.Fulfilled)
	case "REJECTED":
		return visitor.VisitRejected(e.Rejected)
	}
}

type ExecuteWorkflowStreamErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail"`

	_rawJSON json.RawMessage
}

func (e *ExecuteWorkflowStreamErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteWorkflowStreamErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteWorkflowStreamErrorResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteWorkflowStreamErrorResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// * `LENGTH` - LENGTH
// * `STOP` - STOP
// * `UNKNOWN` - UNKNOWN
type FinishReasonEnum string

const (
	FinishReasonEnumLength  FinishReasonEnum = "LENGTH"
	FinishReasonEnumStop    FinishReasonEnum = "STOP"
	FinishReasonEnumUnknown FinishReasonEnum = "UNKNOWN"
)

func NewFinishReasonEnumFromString(s string) (FinishReasonEnum, error) {
	switch s {
	case "LENGTH":
		return FinishReasonEnumLength, nil
	case "STOP":
		return FinishReasonEnumStop, nil
	case "UNKNOWN":
		return FinishReasonEnumUnknown, nil
	}
	var t FinishReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FinishReasonEnum) Ptr() *FinishReasonEnum {
	return &f
}

type FulfilledExecutePromptStreamingResponse struct {
	Data *ExecutePromptResponse `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FulfilledExecutePromptStreamingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledExecutePromptStreamingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledExecutePromptStreamingResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptStreamingResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GenerateErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail"`

	_rawJSON json.RawMessage
}

func (g *GenerateErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateErrorResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateErrorResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateOptionsRequest struct {
	// Which logprobs to include, if any. Defaults to NONE.
	//
	// * `ALL` - ALL
	// * `NONE` - NONE
	Logprobs *LogprobsEnum `json:"logprobs,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateOptionsRequest(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateOptionsRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateRequest struct {
	// Key/value pairs for each template variable defined in the deployment's prompt.
	InputValues map[string]interface{} `json:"input_values,omitempty"`
	// Optionally provide a list of chat messages that'll be used in place of the special {$chat_history} variable, if included in the prompt.
	ChatHistory []*ChatMessageRequest `json:"chat_history,omitempty"`
	// Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.
	ExternalIds []string `json:"external_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateRequest(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResponse struct {
	// The results of each generation request.
	Results []*GenerateResult `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResult struct {
	// An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.
	Data *GenerateResultData `json:"data,omitempty"`
	// An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.
	Error *GenerateResultError `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResult(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultData struct {
	// The generated completions. This will generally be a list of length one.
	Completions []*EnrichedNormalizedCompletion `json:"completions,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultData(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultError struct {
	// The error message returned by the LLM provider.
	Message string `json:"message"`

	_rawJSON json.RawMessage
}

func (g *GenerateResultError) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultError(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultError) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResponse struct {
	Delta *GenerateStreamResult `json:"delta,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateStreamResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResult struct {
	RequestIndex int                       `json:"request_index"`
	Data         *GenerateStreamResultData `json:"data,omitempty"`
	Error        *GenerateResultError      `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateStreamResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResult(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResultData struct {
	CompletionIndex int                           `json:"completion_index"`
	Completion      *EnrichedNormalizedCompletion `json:"completion,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateStreamResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResultData(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// * `AWAITING_PROCESSING` - Awaiting Processing
// * `QUEUED` - Queued
// * `INDEXING` - Indexing
// * `INDEXED` - Indexed
// * `FAILED` - Failed
type IndexingStateEnum string

const (
	IndexingStateEnumAwaitingProcessing IndexingStateEnum = "AWAITING_PROCESSING"
	IndexingStateEnumQueued             IndexingStateEnum = "QUEUED"
	IndexingStateEnumIndexing           IndexingStateEnum = "INDEXING"
	IndexingStateEnumIndexed            IndexingStateEnum = "INDEXED"
	IndexingStateEnumFailed             IndexingStateEnum = "FAILED"
)

func NewIndexingStateEnumFromString(s string) (IndexingStateEnum, error) {
	switch s {
	case "AWAITING_PROCESSING":
		return IndexingStateEnumAwaitingProcessing, nil
	case "QUEUED":
		return IndexingStateEnumQueued, nil
	case "INDEXING":
		return IndexingStateEnumIndexing, nil
	case "INDEXED":
		return IndexingStateEnumIndexed, nil
	case "FAILED":
		return IndexingStateEnumFailed, nil
	}
	var t IndexingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IndexingStateEnum) Ptr() *IndexingStateEnum {
	return &i
}

type InitiatedExecutePromptResponse struct {
	Type        VellumVariableType `json:"type,omitempty"`
	ExecutionId string             `json:"execution_id"`

	_rawJSON json.RawMessage
}

func (i *InitiatedExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedExecutePromptResponse(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedExecutePromptResponse) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InitiatedExecutePromptStreamingResponse struct {
	Data *InitiatedExecutePromptResponse `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (i *InitiatedExecutePromptStreamingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedExecutePromptStreamingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedExecutePromptStreamingResponse(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedExecutePromptStreamingResponse) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type JsonExecutePromptResponse struct {
	ExecutionId string                 `json:"execution_id"`
	Value       map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (j *JsonExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonExecutePromptResponse(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonExecutePromptResponse) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JsonInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                 `json:"name"`
	Value map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (j *JsonInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonInputRequest(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonInputRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// * `=` - EQUALS
// * `!=` - DOES_NOT_EQUAL
// * `<` - LESS_THAN
// * `>` - GREATER_THAN
// * `<=` - LESS_THAN_OR_EQUAL_TO
// * `>=` - GREATER_THAN_OR_EQUAL_TO
// * `contains` - CONTAINS
// * `beginsWith` - BEGINS_WITH
// * `endsWith` - ENDS_WITH
// * `doesNotContain` - DOES_NOT_CONTAIN
// * `doesNotBeginWith` - DOES_NOT_BEGIN_WITH
// * `doesNotEndWith` - DOES_NOT_END_WITH
// * `null` - NULL
// * `notNull` - NOT_NULL
// * `in` - IN
// * `notIn` - NOT_IN
// * `between` - BETWEEN
// * `notBetween` - NOT_BETWEEN
type LogicalOperator string

const (
	// Equals
	LogicalOperatorEquals LogicalOperator = "="
	// Does not equal
	LogicalOperatorDoesNotEqual LogicalOperator = "!="
	// Less than
	LogicalOperatorLessThan LogicalOperator = "<"
	// Greater than
	LogicalOperatorGreaterThan LogicalOperator = ">"
	// Less than or equal to
	LogicalOperatorLessThanOrEqualTo LogicalOperator = "<="
	// Greater than or equal to
	LogicalOperatorGreaterThanOrEqualTo LogicalOperator = ">="
	// Contains
	LogicalOperatorContains LogicalOperator = "contains"
	// Begins with
	LogicalOperatorBeginsWith LogicalOperator = "beginsWith"
	// Ends with
	LogicalOperatorEndsWith LogicalOperator = "endsWith"
	// Does not contain
	LogicalOperatorDoesNotContain LogicalOperator = "doesNotContain"
	// Does not begin with
	LogicalOperatorDoesNotBeginWith LogicalOperator = "doesNotBeginWith"
	// Does not end with
	LogicalOperatorDoesNotEndWith LogicalOperator = "doesNotEndWith"
	// Null
	LogicalOperatorNull LogicalOperator = "null"
	// Not null
	LogicalOperatorNotNull LogicalOperator = "notNull"
	// In
	LogicalOperatorIn LogicalOperator = "in"
	// Not in
	LogicalOperatorNotIn LogicalOperator = "notIn"
	// Between
	LogicalOperatorBetween LogicalOperator = "between"
	// Not between
	LogicalOperatorNotBetween LogicalOperator = "notBetween"
)

func NewLogicalOperatorFromString(s string) (LogicalOperator, error) {
	switch s {
	case "=":
		return LogicalOperatorEquals, nil
	case "!=":
		return LogicalOperatorDoesNotEqual, nil
	case "<":
		return LogicalOperatorLessThan, nil
	case ">":
		return LogicalOperatorGreaterThan, nil
	case "<=":
		return LogicalOperatorLessThanOrEqualTo, nil
	case ">=":
		return LogicalOperatorGreaterThanOrEqualTo, nil
	case "contains":
		return LogicalOperatorContains, nil
	case "beginsWith":
		return LogicalOperatorBeginsWith, nil
	case "endsWith":
		return LogicalOperatorEndsWith, nil
	case "doesNotContain":
		return LogicalOperatorDoesNotContain, nil
	case "doesNotBeginWith":
		return LogicalOperatorDoesNotBeginWith, nil
	case "doesNotEndWith":
		return LogicalOperatorDoesNotEndWith, nil
	case "null":
		return LogicalOperatorNull, nil
	case "notNull":
		return LogicalOperatorNotNull, nil
	case "in":
		return LogicalOperatorIn, nil
	case "notIn":
		return LogicalOperatorNotIn, nil
	case "between":
		return LogicalOperatorBetween, nil
	case "notBetween":
		return LogicalOperatorNotBetween, nil
	}
	var t LogicalOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogicalOperator) Ptr() *LogicalOperator {
	return &l
}

// * `ALL` - ALL
// * `NONE` - NONE
type LogprobsEnum string

const (
	LogprobsEnumAll  LogprobsEnum = "ALL"
	LogprobsEnumNone LogprobsEnum = "NONE"
)

func NewLogprobsEnumFromString(s string) (LogprobsEnum, error) {
	switch s {
	case "ALL":
		return LogprobsEnumAll, nil
	case "NONE":
		return LogprobsEnumNone, nil
	}
	var t LogprobsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogprobsEnum) Ptr() *LogprobsEnum {
	return &l
}

type MetadataFilterConfigRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MetadataFilterConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// * `and` - AND
// * `or` - OR
type MetadataFilterRuleCombinator string

const (
	MetadataFilterRuleCombinatorAnd MetadataFilterRuleCombinator = "and"
	MetadataFilterRuleCombinatorOr  MetadataFilterRuleCombinator = "or"
)

func NewMetadataFilterRuleCombinatorFromString(s string) (MetadataFilterRuleCombinator, error) {
	switch s {
	case "and":
		return MetadataFilterRuleCombinatorAnd, nil
	case "or":
		return MetadataFilterRuleCombinatorOr, nil
	}
	var t MetadataFilterRuleCombinator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetadataFilterRuleCombinator) Ptr() *MetadataFilterRuleCombinator {
	return &m
}

type MetadataFilterRuleRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MetadataFilterRuleRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterRuleRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterRuleRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterRuleRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelVersionBuildConfig struct {
	// The name of the base model used to create this model version, as identified by the LLM provider.
	BaseModel string `json:"base_model"`
	// Information about the sandbox snapshot that was used to create this model version, if applicable.
	SandboxSnapshot *ModelVersionSandboxSnapshot `json:"sandbox_snapshot,omitempty"`
	PromptVersionId *string                      `json:"prompt_version_id,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionBuildConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionBuildConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionBuildConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionBuildConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelVersionExecConfig struct {
	// The generation parameters that are passed to the LLM provider at runtime.
	Parameters *ModelVersionExecConfigParameters `json:"parameters,omitempty"`
	// Input variables specified in the prompt template.
	InputVariables []*VellumVariable `json:"input_variables,omitempty"`
	// The template used to generate prompts for this model version.
	PromptTemplate      *string                  `json:"prompt_template,omitempty"`
	PromptBlockData     *PromptTemplateBlockData `json:"prompt_block_data,omitempty"`
	PromptSyntaxVersion *int                     `json:"prompt_syntax_version,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionExecConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionExecConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelVersionExecConfigParameters struct {
	Temperature      *float64            `json:"temperature,omitempty"`
	MaxTokens        *int                `json:"max_tokens,omitempty"`
	TopP             float64             `json:"top_p"`
	FrequencyPenalty float64             `json:"frequency_penalty"`
	PresencePenalty  float64             `json:"presence_penalty"`
	LogitBias        map[string]*float64 `json:"logit_bias,omitempty"`
	Stop             []string            `json:"stop,omitempty"`
	TopK             *float64            `json:"top_k,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionExecConfigParameters) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionExecConfigParameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionExecConfigParameters(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionExecConfigParameters) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// * `CREATING` - Creating
// * `READY` - Ready
// * `CREATION_FAILED` - Creation Failed
// * `DISABLED` - Disabled
type ModelVersionReadStatusEnum string

const (
	ModelVersionReadStatusEnumCreating       ModelVersionReadStatusEnum = "CREATING"
	ModelVersionReadStatusEnumReady          ModelVersionReadStatusEnum = "READY"
	ModelVersionReadStatusEnumCreationFailed ModelVersionReadStatusEnum = "CREATION_FAILED"
	ModelVersionReadStatusEnumDisabled       ModelVersionReadStatusEnum = "DISABLED"
)

func NewModelVersionReadStatusEnumFromString(s string) (ModelVersionReadStatusEnum, error) {
	switch s {
	case "CREATING":
		return ModelVersionReadStatusEnumCreating, nil
	case "READY":
		return ModelVersionReadStatusEnumReady, nil
	case "CREATION_FAILED":
		return ModelVersionReadStatusEnumCreationFailed, nil
	case "DISABLED":
		return ModelVersionReadStatusEnumDisabled, nil
	}
	var t ModelVersionReadStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m ModelVersionReadStatusEnum) Ptr() *ModelVersionReadStatusEnum {
	return &m
}

type ModelVersionSandboxSnapshot struct {
	// The ID of the sandbox snapshot.
	Id string `json:"id"`
	// The index of the prompt in the sandbox snapshot.
	PromptIndex *int `json:"prompt_index,omitempty"`
	// The id of the prompt in the sandbox snapshot.
	PromptId  *string `json:"prompt_id,omitempty"`
	SandboxId *string `json:"sandbox_id,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionSandboxSnapshot) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionSandboxSnapshot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionSandboxSnapshot(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionSandboxSnapshot) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type NodeInputCompiledChatHistoryValue struct {
	NodeInputId string         `json:"node_input_id"`
	Key         string         `json:"key"`
	Value       []*ChatMessage `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledChatHistoryValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledChatHistoryValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledErrorValue struct {
	NodeInputId string       `json:"node_input_id"`
	Key         string       `json:"key"`
	Value       *VellumError `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledErrorValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledErrorValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledJsonValue struct {
	NodeInputId string                 `json:"node_input_id"`
	Key         string                 `json:"key"`
	Value       map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledJsonValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledJsonValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledNumberValue struct {
	NodeInputId string   `json:"node_input_id"`
	Key         string   `json:"key"`
	Value       *float64 `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledNumberValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledNumberValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledSearchResultsValue struct {
	NodeInputId string          `json:"node_input_id"`
	Key         string          `json:"key"`
	Value       []*SearchResult `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledSearchResultsValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledSearchResultsValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledStringValue struct {
	NodeInputId string  `json:"node_input_id"`
	Key         string  `json:"key"`
	Value       *string `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledStringValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledStringValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputVariableCompiledValue struct {
	Type          string
	String        *NodeInputCompiledStringValue
	Number        *NodeInputCompiledNumberValue
	Json          *NodeInputCompiledJsonValue
	ChatHistory   *NodeInputCompiledChatHistoryValue
	SearchResults *NodeInputCompiledSearchResultsValue
	Error         *NodeInputCompiledErrorValue
}

func NewNodeInputVariableCompiledValueFromString(value *NodeInputCompiledStringValue) *NodeInputVariableCompiledValue {
	return &NodeInputVariableCompiledValue{Type: "STRING", String: value}
}

func NewNodeInputVariableCompiledValueFromNumber(value *NodeInputCompiledNumberValue) *NodeInputVariableCompiledValue {
	return &NodeInputVariableCompiledValue{Type: "NUMBER", Number: value}
}

func NewNodeInputVariableCompiledValueFromJson(value *NodeInputCompiledJsonValue) *NodeInputVariableCompiledValue {
	return &NodeInputVariableCompiledValue{Type: "JSON", Json: value}
}

func NewNodeInputVariableCompiledValueFromChatHistory(value *NodeInputCompiledChatHistoryValue) *NodeInputVariableCompiledValue {
	return &NodeInputVariableCompiledValue{Type: "CHAT_HISTORY", ChatHistory: value}
}

func NewNodeInputVariableCompiledValueFromSearchResults(value *NodeInputCompiledSearchResultsValue) *NodeInputVariableCompiledValue {
	return &NodeInputVariableCompiledValue{Type: "SEARCH_RESULTS", SearchResults: value}
}

func NewNodeInputVariableCompiledValueFromError(value *NodeInputCompiledErrorValue) *NodeInputVariableCompiledValue {
	return &NodeInputVariableCompiledValue{Type: "ERROR", Error: value}
}

func (n *NodeInputVariableCompiledValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NodeInputCompiledStringValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NodeInputCompiledNumberValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NodeInputCompiledJsonValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NodeInputCompiledChatHistoryValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NodeInputCompiledSearchResultsValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NodeInputCompiledErrorValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	}
	return nil
}

func (n NodeInputVariableCompiledValue) MarshalJSON() ([]byte, error) {
	switch n.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.Type, n)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledStringValue
		}{
			Type:                         n.Type,
			NodeInputCompiledStringValue: n.String,
		}
		return json.Marshal(marshaler)
	case "NUMBER":
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledNumberValue
		}{
			Type:                         n.Type,
			NodeInputCompiledNumberValue: n.Number,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledJsonValue
		}{
			Type:                       n.Type,
			NodeInputCompiledJsonValue: n.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledChatHistoryValue
		}{
			Type:                              n.Type,
			NodeInputCompiledChatHistoryValue: n.ChatHistory,
		}
		return json.Marshal(marshaler)
	case "SEARCH_RESULTS":
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledSearchResultsValue
		}{
			Type:                                n.Type,
			NodeInputCompiledSearchResultsValue: n.SearchResults,
		}
		return json.Marshal(marshaler)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledErrorValue
		}{
			Type:                        n.Type,
			NodeInputCompiledErrorValue: n.Error,
		}
		return json.Marshal(marshaler)
	}
}

type NodeInputVariableCompiledValueVisitor interface {
	VisitString(*NodeInputCompiledStringValue) error
	VisitNumber(*NodeInputCompiledNumberValue) error
	VisitJson(*NodeInputCompiledJsonValue) error
	VisitChatHistory(*NodeInputCompiledChatHistoryValue) error
	VisitSearchResults(*NodeInputCompiledSearchResultsValue) error
	VisitError(*NodeInputCompiledErrorValue) error
}

func (n *NodeInputVariableCompiledValue) Accept(visitor NodeInputVariableCompiledValueVisitor) error {
	switch n.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", n.Type, n)
	case "STRING":
		return visitor.VisitString(n.String)
	case "NUMBER":
		return visitor.VisitNumber(n.Number)
	case "JSON":
		return visitor.VisitJson(n.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(n.ChatHistory)
	case "SEARCH_RESULTS":
		return visitor.VisitSearchResults(n.SearchResults)
	case "ERROR":
		return visitor.VisitError(n.Error)
	}
}

type NormalizedLogProbs struct {
	Tokens     []*NormalizedTokenLogProbs `json:"tokens,omitempty"`
	Likelihood *float64                   `json:"likelihood,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NormalizedLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedLogProbs(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NormalizedTokenLogProbs struct {
	Token       string              `json:"token"`
	Logprob     *float64            `json:"logprob,omitempty"`
	TopLogprobs map[string]*float64 `json:"top_logprobs,omitempty"`
	TextOffset  int                 `json:"text_offset"`

	_rawJSON json.RawMessage
}

func (n *NormalizedTokenLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedTokenLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedTokenLogProbs(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedTokenLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type PaginatedSlimDocumentList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next,omitempty"`
	Previous *string         `json:"previous,omitempty"`
	Results  []*SlimDocument `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedSlimDocumentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimDocumentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimDocumentList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimDocumentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// * `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
// * `INVALID_FILE` - Invalid File
type ProcessingFailureReasonEnum string

const (
	ProcessingFailureReasonEnumExceededCharacterLimit ProcessingFailureReasonEnum = "EXCEEDED_CHARACTER_LIMIT"
	ProcessingFailureReasonEnumInvalidFile            ProcessingFailureReasonEnum = "INVALID_FILE"
)

func NewProcessingFailureReasonEnumFromString(s string) (ProcessingFailureReasonEnum, error) {
	switch s {
	case "EXCEEDED_CHARACTER_LIMIT":
		return ProcessingFailureReasonEnumExceededCharacterLimit, nil
	case "INVALID_FILE":
		return ProcessingFailureReasonEnumInvalidFile, nil
	}
	var t ProcessingFailureReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingFailureReasonEnum) Ptr() *ProcessingFailureReasonEnum {
	return &p
}

// * `QUEUED` - Queued
// * `PROCESSING` - Processing
// * `PROCESSED` - Processed
// * `FAILED` - Failed
type ProcessingStateEnum string

const (
	ProcessingStateEnumQueued     ProcessingStateEnum = "QUEUED"
	ProcessingStateEnumProcessing ProcessingStateEnum = "PROCESSING"
	ProcessingStateEnumProcessed  ProcessingStateEnum = "PROCESSED"
	ProcessingStateEnumFailed     ProcessingStateEnum = "FAILED"
)

func NewProcessingStateEnumFromString(s string) (ProcessingStateEnum, error) {
	switch s {
	case "QUEUED":
		return ProcessingStateEnumQueued, nil
	case "PROCESSING":
		return ProcessingStateEnumProcessing, nil
	case "PROCESSED":
		return ProcessingStateEnumProcessed, nil
	case "FAILED":
		return ProcessingStateEnumFailed, nil
	}
	var t ProcessingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingStateEnum) Ptr() *ProcessingStateEnum {
	return &p
}

type PromptDeploymentInputRequest struct {
	Type        string
	String      *StringInputRequest
	Json        *JsonInputRequest
	ChatHistory *ChatHistoryInputRequest
}

func NewPromptDeploymentInputRequestFromString(value *StringInputRequest) *PromptDeploymentInputRequest {
	return &PromptDeploymentInputRequest{Type: "STRING", String: value}
}

func NewPromptDeploymentInputRequestFromJson(value *JsonInputRequest) *PromptDeploymentInputRequest {
	return &PromptDeploymentInputRequest{Type: "JSON", Json: value}
}

func NewPromptDeploymentInputRequestFromChatHistory(value *ChatHistoryInputRequest) *PromptDeploymentInputRequest {
	return &PromptDeploymentInputRequest{Type: "CHAT_HISTORY", ChatHistory: value}
}

func (p *PromptDeploymentInputRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.String = value
	case "JSON":
		value := new(JsonInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Json = value
	case "CHAT_HISTORY":
		value := new(ChatHistoryInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.ChatHistory = value
	}
	return nil
}

func (p PromptDeploymentInputRequest) MarshalJSON() ([]byte, error) {
	switch p.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*StringInputRequest
		}{
			Type:               p.Type,
			StringInputRequest: p.String,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*JsonInputRequest
		}{
			Type:             p.Type,
			JsonInputRequest: p.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*ChatHistoryInputRequest
		}{
			Type:                    p.Type,
			ChatHistoryInputRequest: p.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
}

type PromptDeploymentInputRequestVisitor interface {
	VisitString(*StringInputRequest) error
	VisitJson(*JsonInputRequest) error
	VisitChatHistory(*ChatHistoryInputRequest) error
}

func (p *PromptDeploymentInputRequest) Accept(visitor PromptDeploymentInputRequestVisitor) error {
	switch p.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "STRING":
		return visitor.VisitString(p.String)
	case "JSON":
		return visitor.VisitJson(p.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(p.ChatHistory)
	}
}

type PromptNodeResult struct {
	Data *PromptNodeResultData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResult(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResult) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptNodeResultData struct {
	OutputId string  `json:"output_id"`
	Text     *string `json:"text,omitempty"`
	Delta    *string `json:"delta,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResultData(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResultData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlock struct {
	Id         string                         `json:"id"`
	BlockType  BlockTypeEnum                  `json:"block_type,omitempty"`
	Properties *PromptTemplateBlockProperties `json:"properties,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlock) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlock
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlock(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlock) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockData struct {
	Version int                    `json:"version"`
	Blocks  []*PromptTemplateBlock `json:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockData) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockData(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockDataRequest struct {
	Version int                           `json:"version"`
	Blocks  []*PromptTemplateBlockRequest `json:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockDataRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockDataRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockProperties struct {
	ChatRole                *ChatMessageRole       `json:"chat_role,omitempty"`
	ChatMessageUnterminated *bool                  `json:"chat_message_unterminated,omitempty"`
	Template                *string                `json:"template,omitempty"`
	TemplateType            *VellumVariableType    `json:"template_type,omitempty"`
	FunctionName            *string                `json:"function_name,omitempty"`
	FunctionDescription     *string                `json:"function_description,omitempty"`
	FunctionParameters      map[string]interface{} `json:"function_parameters,omitempty"`
	FunctionForced          *bool                  `json:"function_forced,omitempty"`
	Blocks                  []*PromptTemplateBlock `json:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockProperties(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockProperties) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockPropertiesRequest struct {
	ChatRole                *ChatMessageRole              `json:"chat_role,omitempty"`
	ChatMessageUnterminated *bool                         `json:"chat_message_unterminated,omitempty"`
	Template                *string                       `json:"template,omitempty"`
	TemplateType            *VellumVariableType           `json:"template_type,omitempty"`
	FunctionName            *string                       `json:"function_name,omitempty"`
	FunctionDescription     *string                       `json:"function_description,omitempty"`
	FunctionParameters      map[string]interface{}        `json:"function_parameters,omitempty"`
	FunctionForced          *bool                         `json:"function_forced,omitempty"`
	Blocks                  []*PromptTemplateBlockRequest `json:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockPropertiesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockPropertiesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockPropertiesRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockPropertiesRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockRequest struct {
	Id         string                                `json:"id"`
	BlockType  BlockTypeEnum                         `json:"block_type,omitempty"`
	Properties *PromptTemplateBlockPropertiesRequest `json:"properties,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RegisterPromptErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail"`

	_rawJSON json.RawMessage
}

func (r *RegisterPromptErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisterPromptErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisterPromptErrorResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisterPromptErrorResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisterPromptPrompt struct {
	// The ID of the generated prompt.
	Id string `json:"id"`
	// A human-friendly label for the generated prompt.
	Label string `json:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisterPromptPrompt) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisterPromptPrompt
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisterPromptPrompt(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisterPromptPrompt) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptDeployment struct {
	// The ID of the generated deployment.
	Id string `json:"id"`
	// A uniquely-identifying name for generated deployment.
	Name string `json:"name"`
	// A human-friendly label for the generated deployment.
	Label string `json:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptDeployment) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptDeployment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptDeployment(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptDeployment) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptInputVariableRequest struct {
	Key  string              `json:"key"`
	Id   *string             `json:"id,omitempty"`
	Type *VellumVariableType `json:"type,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptInputVariableRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptInputVariableRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptInputVariableRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptInputVariableRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptModelVersion struct {
	// The ID of the generated model version.
	Id string `json:"id"`
	// A human-friendly label for the generated model version.
	Label string `json:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptModelVersion) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptModelVersion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptModelVersion(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptModelVersion) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptSandbox struct {
	// The ID of the generated sandbox.
	Id string `json:"id"`
	// A human-friendly label for the generated sandbox.
	Label string `json:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptSandbox) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptSandbox
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptSandbox(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptSandbox) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptSandboxSnapshot struct {
	// The ID of the generated sandbox snapshot.
	Id string `json:"id"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptSandboxSnapshot) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptSandboxSnapshot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptSandboxSnapshot(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptSandboxSnapshot) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RejectedExecutePromptResponse struct {
	Type        string       `json:"type"`
	Value       *VellumError `json:"value,omitempty"`
	ExecutionId string       `json:"execution_id"`

	_rawJSON json.RawMessage
}

func (r *RejectedExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedExecutePromptResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RejectedExecutePromptStreamingResponse struct {
	Data *RejectedExecutePromptResponse `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RejectedExecutePromptStreamingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedExecutePromptStreamingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedExecutePromptStreamingResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptStreamingResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SandboxMetricInputParams struct {
	Params *EvaluationParams `json:"params,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SandboxMetricInputParams) UnmarshalJSON(data []byte) error {
	type unmarshaler SandboxMetricInputParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SandboxMetricInputParams(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SandboxMetricInputParams) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ScenarioInput struct {
	Key         string                 `json:"key"`
	Type        *ScenarioInputTypeEnum `json:"type,omitempty"`
	Value       *string                `json:"value,omitempty"`
	ChatHistory []*ChatMessage         `json:"chat_history,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScenarioInput) UnmarshalJSON(data []byte) error {
	type unmarshaler ScenarioInput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScenarioInput(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInput) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// * `TEXT` - Text
// * `CHAT_HISTORY` - Chat History
type ScenarioInputTypeEnum string

const (
	ScenarioInputTypeEnumText        ScenarioInputTypeEnum = "TEXT"
	ScenarioInputTypeEnumChatHistory ScenarioInputTypeEnum = "CHAT_HISTORY"
)

func NewScenarioInputTypeEnumFromString(s string) (ScenarioInputTypeEnum, error) {
	switch s {
	case "TEXT":
		return ScenarioInputTypeEnumText, nil
	case "CHAT_HISTORY":
		return ScenarioInputTypeEnumChatHistory, nil
	}
	var t ScenarioInputTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScenarioInputTypeEnum) Ptr() *ScenarioInputTypeEnum {
	return &s
}

type SearchErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail"`

	_rawJSON json.RawMessage
}

func (s *SearchErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchErrorResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchErrorResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchFiltersRequest struct {
	// The document external IDs to filter by
	ExternalIds []string `json:"external_ids,omitempty"`
	// The metadata filters to apply to the search
	Metadata *MetadataFilterConfigRequest `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchFiltersRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchFiltersRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchFiltersRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchFiltersRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchNodeResult struct {
	Data *SearchNodeResultData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResult(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchNodeResultData struct {
	ResultsOutputId string `json:"results_output_id"`
	// The results of the search. Each result represents a chunk that matches the search query.
	Results      []*SearchResult `json:"results,omitempty"`
	TextOutputId string          `json:"text_output_id"`
	Text         *string         `json:"text,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResultData(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchRequestOptionsRequest struct {
	// The maximum number of results to return.
	Limit *int `json:"limit,omitempty"`
	// The weights to use for the search. Must add up to 1.0.
	Weights *SearchWeightsRequest `json:"weights,omitempty"`
	// The configuration for merging results.
	ResultMerging *SearchResultMergingRequest `json:"result_merging,omitempty"`
	// The filters to apply to the search.
	Filters *SearchFiltersRequest `json:"filters,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchRequestOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchRequestOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchRequestOptionsRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchRequestOptionsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResponse struct {
	// The results of the search. Each result represents a chunk that matches the search query.
	Results []*SearchResult `json:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResult struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score"`
	Keywords []string `json:"keywords,omitempty"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocument `json:"document,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResult(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocument struct {
	// The ID of the document.
	Id string `json:"id"`
	// The human-readable name for the document.
	Label string `json:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocument(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocumentRequest struct {
	// The human-readable name for the document.
	Label string `json:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocumentRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocumentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMergingRequest struct {
	// Whether to enable merging results
	Enabled *bool `json:"enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultMergingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMergingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMergingRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMergingRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultRequest struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score"`
	Keywords []string `json:"keywords,omitempty"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocumentRequest `json:"document,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchWeightsRequest struct {
	// The relative weight to give to semantic similarity
	SemanticSimilarity *float64 `json:"semantic_similarity,omitempty"`
	// The relative weight to give to keywords
	Keywords *float64 `json:"keywords,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchWeightsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchWeightsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchWeightsRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchWeightsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimDocument struct {
	// Vellum-generated ID that uniquely identifies this document.
	Id string `json:"id"`
	// The external ID that was originally provided when uploading the document.
	ExternalId *string `json:"external_id,omitempty"`
	// A timestamp representing when this document was most recently uploaded.
	LastUploadedAt time.Time `json:"last_uploaded_at"`
	// Human-friendly name for this document.
	Label string `json:"label"`
	// An enum value representing where this document is along its processing lifecycle. Note that this is different than its indexing lifecycle.
	//
	// * `QUEUED` - Queued
	// * `PROCESSING` - Processing
	// * `PROCESSED` - Processed
	// * `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty"`
	// An enum value representing why the document could not be processed. Is null unless processing_state is FAILED.
	//
	// * `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
	// * `INVALID_FILE` - Invalid File
	ProcessingFailureReason *ProcessingFailureReasonEnum `json:"processing_failure_reason,omitempty"`
	// The document's current status.
	//
	// * `ACTIVE` - Active
	Status *DocumentStatus `json:"status,omitempty"`
	// A list of keywords associated with this document. Originally provided when uploading the document.
	Keywords []string `json:"keywords,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata                  map[string]interface{}             `json:"metadata,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SlimDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler SlimDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SlimDocument(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StreamingExecutePromptStreamingResponse struct {
	Data *ExecutePromptResponse `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *StreamingExecutePromptStreamingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamingExecutePromptStreamingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamingExecutePromptStreamingResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingExecutePromptStreamingResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringExecutePromptResponse struct {
	ExecutionId string `json:"execution_id"`
	Value       string `json:"value"`

	_rawJSON json.RawMessage
}

func (s *StringExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StringExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringExecutePromptResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringExecutePromptResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string `json:"name"`
	Value string `json:"value"`

	_rawJSON json.RawMessage
}

func (s *StringInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler StringInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringInputRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitCompletionActualRequest struct {
	// The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.
	Id *string `json:"id,omitempty"`
	// The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.
	ExternalId *string `json:"external_id,omitempty"`
	// Text representing what the completion _should_ have been.
	Text *string `json:"text,omitempty"`
	// A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SubmitCompletionActualRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmitCompletionActualRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmitCompletionActualRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitCompletionActualRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitCompletionActualsErrorResponse struct {
	Detail string `json:"detail"`

	_rawJSON json.RawMessage
}

func (s *SubmitCompletionActualsErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmitCompletionActualsErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmitCompletionActualsErrorResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitCompletionActualsErrorResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitWorkflowExecutionActualRequest struct {
	OutputType  string
	String      *WorkflowExecutionActualStringRequest
	Json        *WorkflowExecutionActualJsonRequest
	ChatHistory *WorkflowExecutionActualChatHistoryRequest
}

func NewSubmitWorkflowExecutionActualRequestFromString(value *WorkflowExecutionActualStringRequest) *SubmitWorkflowExecutionActualRequest {
	return &SubmitWorkflowExecutionActualRequest{OutputType: "STRING", String: value}
}

func NewSubmitWorkflowExecutionActualRequestFromJson(value *WorkflowExecutionActualJsonRequest) *SubmitWorkflowExecutionActualRequest {
	return &SubmitWorkflowExecutionActualRequest{OutputType: "JSON", Json: value}
}

func NewSubmitWorkflowExecutionActualRequestFromChatHistory(value *WorkflowExecutionActualChatHistoryRequest) *SubmitWorkflowExecutionActualRequest {
	return &SubmitWorkflowExecutionActualRequest{OutputType: "CHAT_HISTORY", ChatHistory: value}
}

func (s *SubmitWorkflowExecutionActualRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		OutputType string `json:"output_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.OutputType = unmarshaler.OutputType
	switch unmarshaler.OutputType {
	case "STRING":
		value := new(WorkflowExecutionActualStringRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.String = value
	case "JSON":
		value := new(WorkflowExecutionActualJsonRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowExecutionActualChatHistoryRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ChatHistory = value
	}
	return nil
}

func (s SubmitWorkflowExecutionActualRequest) MarshalJSON() ([]byte, error) {
	switch s.OutputType {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.OutputType, s)
	case "STRING":
		var marshaler = struct {
			OutputType string `json:"output_type"`
			*WorkflowExecutionActualStringRequest
		}{
			OutputType:                           s.OutputType,
			WorkflowExecutionActualStringRequest: s.String,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			OutputType string `json:"output_type"`
			*WorkflowExecutionActualJsonRequest
		}{
			OutputType:                         s.OutputType,
			WorkflowExecutionActualJsonRequest: s.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			OutputType string `json:"output_type"`
			*WorkflowExecutionActualChatHistoryRequest
		}{
			OutputType: s.OutputType,
			WorkflowExecutionActualChatHistoryRequest: s.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
}

type SubmitWorkflowExecutionActualRequestVisitor interface {
	VisitString(*WorkflowExecutionActualStringRequest) error
	VisitJson(*WorkflowExecutionActualJsonRequest) error
	VisitChatHistory(*WorkflowExecutionActualChatHistoryRequest) error
}

func (s *SubmitWorkflowExecutionActualRequest) Accept(visitor SubmitWorkflowExecutionActualRequestVisitor) error {
	switch s.OutputType {
	default:
		return fmt.Errorf("invalid type %s in %T", s.OutputType, s)
	case "STRING":
		return visitor.VisitString(s.String)
	case "JSON":
		return visitor.VisitJson(s.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(s.ChatHistory)
	}
}

type TemplatingNodeChatHistoryResult struct {
	Id    string         `json:"id"`
	Value []*ChatMessage `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeChatHistoryResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeErrorResult struct {
	Id    string       `json:"id"`
	Value *VellumError `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeErrorResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeJsonResult struct {
	Id    string                 `json:"id"`
	Value map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeJsonResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeNumberResult struct {
	Id    string   `json:"id"`
	Value *float64 `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeNumberResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResult struct {
	Data *TemplatingNodeResultData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultData struct {
	Output *TemplatingNodeResultOutput `json:"output,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResultData(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultOutput struct {
	Type          string
	String        *TemplatingNodeStringResult
	Number        *TemplatingNodeNumberResult
	Json          *TemplatingNodeJsonResult
	ChatHistory   *TemplatingNodeChatHistoryResult
	SearchResults *TemplatingNodeSearchResultsResult
	Error         *TemplatingNodeErrorResult
}

func NewTemplatingNodeResultOutputFromString(value *TemplatingNodeStringResult) *TemplatingNodeResultOutput {
	return &TemplatingNodeResultOutput{Type: "STRING", String: value}
}

func NewTemplatingNodeResultOutputFromNumber(value *TemplatingNodeNumberResult) *TemplatingNodeResultOutput {
	return &TemplatingNodeResultOutput{Type: "NUMBER", Number: value}
}

func NewTemplatingNodeResultOutputFromJson(value *TemplatingNodeJsonResult) *TemplatingNodeResultOutput {
	return &TemplatingNodeResultOutput{Type: "JSON", Json: value}
}

func NewTemplatingNodeResultOutputFromChatHistory(value *TemplatingNodeChatHistoryResult) *TemplatingNodeResultOutput {
	return &TemplatingNodeResultOutput{Type: "CHAT_HISTORY", ChatHistory: value}
}

func NewTemplatingNodeResultOutputFromSearchResults(value *TemplatingNodeSearchResultsResult) *TemplatingNodeResultOutput {
	return &TemplatingNodeResultOutput{Type: "SEARCH_RESULTS", SearchResults: value}
}

func NewTemplatingNodeResultOutputFromError(value *TemplatingNodeErrorResult) *TemplatingNodeResultOutput {
	return &TemplatingNodeResultOutput{Type: "ERROR", Error: value}
}

func (t *TemplatingNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TemplatingNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TemplatingNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TemplatingNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TemplatingNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TemplatingNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TemplatingNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TemplatingNodeResultOutput) MarshalJSON() ([]byte, error) {
	switch t.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeStringResult
		}{
			Type:                       t.Type,
			TemplatingNodeStringResult: t.String,
		}
		return json.Marshal(marshaler)
	case "NUMBER":
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeNumberResult
		}{
			Type:                       t.Type,
			TemplatingNodeNumberResult: t.Number,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeJsonResult
		}{
			Type:                     t.Type,
			TemplatingNodeJsonResult: t.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeChatHistoryResult
		}{
			Type:                            t.Type,
			TemplatingNodeChatHistoryResult: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	case "SEARCH_RESULTS":
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeSearchResultsResult
		}{
			Type:                              t.Type,
			TemplatingNodeSearchResultsResult: t.SearchResults,
		}
		return json.Marshal(marshaler)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeErrorResult
		}{
			Type:                      t.Type,
			TemplatingNodeErrorResult: t.Error,
		}
		return json.Marshal(marshaler)
	}
}

type TemplatingNodeResultOutputVisitor interface {
	VisitString(*TemplatingNodeStringResult) error
	VisitNumber(*TemplatingNodeNumberResult) error
	VisitJson(*TemplatingNodeJsonResult) error
	VisitChatHistory(*TemplatingNodeChatHistoryResult) error
	VisitSearchResults(*TemplatingNodeSearchResultsResult) error
	VisitError(*TemplatingNodeErrorResult) error
}

func (t *TemplatingNodeResultOutput) Accept(visitor TemplatingNodeResultOutputVisitor) error {
	switch t.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		return visitor.VisitString(t.String)
	case "NUMBER":
		return visitor.VisitNumber(t.Number)
	case "JSON":
		return visitor.VisitJson(t.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(t.ChatHistory)
	case "SEARCH_RESULTS":
		return visitor.VisitSearchResults(t.SearchResults)
	case "ERROR":
		return visitor.VisitError(t.Error)
	}
}

type TemplatingNodeSearchResultsResult struct {
	Id    string          `json:"id"`
	Value []*SearchResult `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeSearchResultsResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeStringResult struct {
	Id    string  `json:"id"`
	Value *string `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeStringResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeChatHistoryResult struct {
	Id *string `json:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string         `json:"name"`
	Value []*ChatMessage `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeChatHistoryResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeErrorResult struct {
	Id *string `json:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string       `json:"name"`
	Value *VellumError `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeErrorResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeJsonResult struct {
	Id *string `json:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string                 `json:"name"`
	Value map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeJsonResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeNumberResult struct {
	Id *string `json:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string   `json:"name"`
	Value *float64 `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeNumberResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResult struct {
	Data *TerminalNodeResultData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultData struct {
	Output *TerminalNodeResultOutput `json:"output,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResultData(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultOutput struct {
	Type          string
	String        *TerminalNodeStringResult
	Number        *TerminalNodeNumberResult
	Json          *TerminalNodeJsonResult
	ChatHistory   *TerminalNodeChatHistoryResult
	SearchResults *TerminalNodeSearchResultsResult
	Error         *TerminalNodeErrorResult
}

func NewTerminalNodeResultOutputFromString(value *TerminalNodeStringResult) *TerminalNodeResultOutput {
	return &TerminalNodeResultOutput{Type: "STRING", String: value}
}

func NewTerminalNodeResultOutputFromNumber(value *TerminalNodeNumberResult) *TerminalNodeResultOutput {
	return &TerminalNodeResultOutput{Type: "NUMBER", Number: value}
}

func NewTerminalNodeResultOutputFromJson(value *TerminalNodeJsonResult) *TerminalNodeResultOutput {
	return &TerminalNodeResultOutput{Type: "JSON", Json: value}
}

func NewTerminalNodeResultOutputFromChatHistory(value *TerminalNodeChatHistoryResult) *TerminalNodeResultOutput {
	return &TerminalNodeResultOutput{Type: "CHAT_HISTORY", ChatHistory: value}
}

func NewTerminalNodeResultOutputFromSearchResults(value *TerminalNodeSearchResultsResult) *TerminalNodeResultOutput {
	return &TerminalNodeResultOutput{Type: "SEARCH_RESULTS", SearchResults: value}
}

func NewTerminalNodeResultOutputFromError(value *TerminalNodeErrorResult) *TerminalNodeResultOutput {
	return &TerminalNodeResultOutput{Type: "ERROR", Error: value}
}

func (t *TerminalNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TerminalNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TerminalNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TerminalNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TerminalNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TerminalNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TerminalNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TerminalNodeResultOutput) MarshalJSON() ([]byte, error) {
	switch t.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeStringResult
		}{
			Type:                     t.Type,
			TerminalNodeStringResult: t.String,
		}
		return json.Marshal(marshaler)
	case "NUMBER":
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeNumberResult
		}{
			Type:                     t.Type,
			TerminalNodeNumberResult: t.Number,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeJsonResult
		}{
			Type:                   t.Type,
			TerminalNodeJsonResult: t.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeChatHistoryResult
		}{
			Type:                          t.Type,
			TerminalNodeChatHistoryResult: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	case "SEARCH_RESULTS":
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeSearchResultsResult
		}{
			Type:                            t.Type,
			TerminalNodeSearchResultsResult: t.SearchResults,
		}
		return json.Marshal(marshaler)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeErrorResult
		}{
			Type:                    t.Type,
			TerminalNodeErrorResult: t.Error,
		}
		return json.Marshal(marshaler)
	}
}

type TerminalNodeResultOutputVisitor interface {
	VisitString(*TerminalNodeStringResult) error
	VisitNumber(*TerminalNodeNumberResult) error
	VisitJson(*TerminalNodeJsonResult) error
	VisitChatHistory(*TerminalNodeChatHistoryResult) error
	VisitSearchResults(*TerminalNodeSearchResultsResult) error
	VisitError(*TerminalNodeErrorResult) error
}

func (t *TerminalNodeResultOutput) Accept(visitor TerminalNodeResultOutputVisitor) error {
	switch t.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		return visitor.VisitString(t.String)
	case "NUMBER":
		return visitor.VisitNumber(t.Number)
	case "JSON":
		return visitor.VisitJson(t.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(t.ChatHistory)
	case "SEARCH_RESULTS":
		return visitor.VisitSearchResults(t.SearchResults)
	case "ERROR":
		return visitor.VisitError(t.Error)
	}
}

type TerminalNodeSearchResultsResult struct {
	Id *string `json:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string          `json:"name"`
	Value []*SearchResult `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeSearchResultsResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeStringResult struct {
	Id *string `json:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string  `json:"name"`
	Value *string `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeStringResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseChatHistoryVariableValue struct {
	VariableId string         `json:"variable_id"`
	Value      []*ChatMessage `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseChatHistoryVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseChatHistoryVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseChatHistoryVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseChatHistoryVariableValueRequest struct {
	VariableId string                `json:"variable_id"`
	Value      []*ChatMessageRequest `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseChatHistoryVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseChatHistoryVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseChatHistoryVariableValueRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseChatHistoryVariableValueRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseErrorVariableValue struct {
	VariableId string       `json:"variable_id"`
	Value      *VellumError `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseErrorVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseErrorVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseErrorVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseErrorVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseErrorVariableValueRequest struct {
	VariableId string              `json:"variable_id"`
	Value      *VellumErrorRequest `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseErrorVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseErrorVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseErrorVariableValueRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseErrorVariableValueRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseJsonVariableValue struct {
	VariableId string                 `json:"variable_id"`
	Value      map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseJsonVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseJsonVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseJsonVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseJsonVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseJsonVariableValueRequest struct {
	VariableId string                 `json:"variable_id"`
	Value      map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseJsonVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseJsonVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseJsonVariableValueRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseJsonVariableValueRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseNumberVariableValue struct {
	VariableId string   `json:"variable_id"`
	Value      *float64 `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseNumberVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseNumberVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseNumberVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseNumberVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseNumberVariableValueRequest struct {
	VariableId string   `json:"variable_id"`
	Value      *float64 `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseNumberVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseNumberVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseNumberVariableValueRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseNumberVariableValueRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseSearchResultsVariableValue struct {
	VariableId string          `json:"variable_id"`
	Value      []*SearchResult `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseSearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseSearchResultsVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseSearchResultsVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseSearchResultsVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseSearchResultsVariableValueRequest struct {
	VariableId string                 `json:"variable_id"`
	Value      []*SearchResultRequest `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseSearchResultsVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseSearchResultsVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseSearchResultsVariableValueRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseSearchResultsVariableValueRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseStringVariableValue struct {
	VariableId string  `json:"variable_id"`
	Value      *string `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseStringVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseStringVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseStringVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseStringVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseStringVariableValueRequest struct {
	VariableId string  `json:"variable_id"`
	Value      *string `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseStringVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseStringVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseStringVariableValueRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseStringVariableValueRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseVariableValue struct {
	Type          string
	String        *TestCaseStringVariableValue
	Number        *TestCaseNumberVariableValue
	Json          *TestCaseJsonVariableValue
	ChatHistory   *TestCaseChatHistoryVariableValue
	SearchResults *TestCaseSearchResultsVariableValue
	Error         *TestCaseErrorVariableValue
}

func NewTestCaseVariableValueFromString(value *TestCaseStringVariableValue) *TestCaseVariableValue {
	return &TestCaseVariableValue{Type: "STRING", String: value}
}

func NewTestCaseVariableValueFromNumber(value *TestCaseNumberVariableValue) *TestCaseVariableValue {
	return &TestCaseVariableValue{Type: "NUMBER", Number: value}
}

func NewTestCaseVariableValueFromJson(value *TestCaseJsonVariableValue) *TestCaseVariableValue {
	return &TestCaseVariableValue{Type: "JSON", Json: value}
}

func NewTestCaseVariableValueFromChatHistory(value *TestCaseChatHistoryVariableValue) *TestCaseVariableValue {
	return &TestCaseVariableValue{Type: "CHAT_HISTORY", ChatHistory: value}
}

func NewTestCaseVariableValueFromSearchResults(value *TestCaseSearchResultsVariableValue) *TestCaseVariableValue {
	return &TestCaseVariableValue{Type: "SEARCH_RESULTS", SearchResults: value}
}

func NewTestCaseVariableValueFromError(value *TestCaseErrorVariableValue) *TestCaseVariableValue {
	return &TestCaseVariableValue{Type: "ERROR", Error: value}
}

func (t *TestCaseVariableValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TestCaseStringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TestCaseNumberVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TestCaseJsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TestCaseChatHistoryVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TestCaseSearchResultsVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TestCaseErrorVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TestCaseVariableValue) MarshalJSON() ([]byte, error) {
	switch t.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseStringVariableValue
		}{
			Type:                        t.Type,
			TestCaseStringVariableValue: t.String,
		}
		return json.Marshal(marshaler)
	case "NUMBER":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseNumberVariableValue
		}{
			Type:                        t.Type,
			TestCaseNumberVariableValue: t.Number,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseJsonVariableValue
		}{
			Type:                      t.Type,
			TestCaseJsonVariableValue: t.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseChatHistoryVariableValue
		}{
			Type:                             t.Type,
			TestCaseChatHistoryVariableValue: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	case "SEARCH_RESULTS":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseSearchResultsVariableValue
		}{
			Type:                               t.Type,
			TestCaseSearchResultsVariableValue: t.SearchResults,
		}
		return json.Marshal(marshaler)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseErrorVariableValue
		}{
			Type:                       t.Type,
			TestCaseErrorVariableValue: t.Error,
		}
		return json.Marshal(marshaler)
	}
}

type TestCaseVariableValueVisitor interface {
	VisitString(*TestCaseStringVariableValue) error
	VisitNumber(*TestCaseNumberVariableValue) error
	VisitJson(*TestCaseJsonVariableValue) error
	VisitChatHistory(*TestCaseChatHistoryVariableValue) error
	VisitSearchResults(*TestCaseSearchResultsVariableValue) error
	VisitError(*TestCaseErrorVariableValue) error
}

func (t *TestCaseVariableValue) Accept(visitor TestCaseVariableValueVisitor) error {
	switch t.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "STRING":
		return visitor.VisitString(t.String)
	case "NUMBER":
		return visitor.VisitNumber(t.Number)
	case "JSON":
		return visitor.VisitJson(t.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(t.ChatHistory)
	case "SEARCH_RESULTS":
		return visitor.VisitSearchResults(t.SearchResults)
	case "ERROR":
		return visitor.VisitError(t.Error)
	}
}

type UploadDocumentErrorResponse struct {
	Detail string `json:"detail"`

	_rawJSON json.RawMessage
}

func (u *UploadDocumentErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UploadDocumentErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UploadDocumentErrorResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UploadDocumentErrorResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UploadDocumentResponse struct {
	// The ID of the newly created document.
	DocumentId string `json:"document_id"`

	_rawJSON json.RawMessage
}

func (u *UploadDocumentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UploadDocumentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UploadDocumentResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UploadDocumentResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type VellumError struct {
	Message string              `json:"message"`
	Code    VellumErrorCodeEnum `json:"code,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumError) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumError(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// * `INVALID_REQUEST` - INVALID_REQUEST
// * `PROVIDER_ERROR` - PROVIDER_ERROR
// * `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
type VellumErrorCodeEnum string

const (
	VellumErrorCodeEnumInvalidRequest      VellumErrorCodeEnum = "INVALID_REQUEST"
	VellumErrorCodeEnumProviderError       VellumErrorCodeEnum = "PROVIDER_ERROR"
	VellumErrorCodeEnumInternalServerError VellumErrorCodeEnum = "INTERNAL_SERVER_ERROR"
)

func NewVellumErrorCodeEnumFromString(s string) (VellumErrorCodeEnum, error) {
	switch s {
	case "INVALID_REQUEST":
		return VellumErrorCodeEnumInvalidRequest, nil
	case "PROVIDER_ERROR":
		return VellumErrorCodeEnumProviderError, nil
	case "INTERNAL_SERVER_ERROR":
		return VellumErrorCodeEnumInternalServerError, nil
	}
	var t VellumErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumErrorCodeEnum) Ptr() *VellumErrorCodeEnum {
	return &v
}

type VellumErrorRequest struct {
	Message string              `json:"message"`
	Code    VellumErrorCodeEnum `json:"code,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumErrorRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumErrorRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumErrorRequest(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumErrorRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumVariable struct {
	Id   string             `json:"id"`
	Key  string             `json:"key"`
	Type VellumVariableType `json:"type,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumVariable) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVariable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVariable(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVariable) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// * `STRING` - STRING
// * `NUMBER` - NUMBER
// * `JSON` - JSON
// * `CHAT_HISTORY` - CHAT_HISTORY
// * `SEARCH_RESULTS` - SEARCH_RESULTS
// * `ERROR` - ERROR
type VellumVariableType string

const (
	VellumVariableTypeString        VellumVariableType = "STRING"
	VellumVariableTypeNumber        VellumVariableType = "NUMBER"
	VellumVariableTypeJson          VellumVariableType = "JSON"
	VellumVariableTypeChatHistory   VellumVariableType = "CHAT_HISTORY"
	VellumVariableTypeSearchResults VellumVariableType = "SEARCH_RESULTS"
	VellumVariableTypeError         VellumVariableType = "ERROR"
)

func NewVellumVariableTypeFromString(s string) (VellumVariableType, error) {
	switch s {
	case "STRING":
		return VellumVariableTypeString, nil
	case "NUMBER":
		return VellumVariableTypeNumber, nil
	case "JSON":
		return VellumVariableTypeJson, nil
	case "CHAT_HISTORY":
		return VellumVariableTypeChatHistory, nil
	case "SEARCH_RESULTS":
		return VellumVariableTypeSearchResults, nil
	case "ERROR":
		return VellumVariableTypeError, nil
	}
	var t VellumVariableType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumVariableType) Ptr() *VellumVariableType {
	return &v
}

type WorkflowEventError struct {
	Message string                          `json:"message"`
	Code    WorkflowExecutionEventErrorCode `json:"code,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowEventError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowEventError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowEventError(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowEventError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualChatHistoryRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue []*ChatMessageRequest `json:"desired_output_value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionActualChatHistoryRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualChatHistoryRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualChatHistoryRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualChatHistoryRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualJsonRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue map[string]interface{} `json:"desired_output_value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionActualJsonRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualJsonRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualJsonRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualJsonRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualStringRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue *string `json:"desired_output_value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionActualStringRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualStringRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualStringRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualStringRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// * `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION
// * `NODE_EXECUTION_COUNT_LIMIT_REACHED` - NODE_EXECUTION_COUNT_LIMIT_REACHED
// * `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// * `NODE_EXECUTION` - NODE_EXECUTION
// * `LLM_PROVIDER` - LLM_PROVIDER
// * `INVALID_TEMPLATE` - INVALID_TEMPLATE
type WorkflowExecutionEventErrorCode string

const (
	WorkflowExecutionEventErrorCodeWorkflowInitialization         WorkflowExecutionEventErrorCode = "WORKFLOW_INITIALIZATION"
	WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached WorkflowExecutionEventErrorCode = "NODE_EXECUTION_COUNT_LIMIT_REACHED"
	WorkflowExecutionEventErrorCodeInternalServerError            WorkflowExecutionEventErrorCode = "INTERNAL_SERVER_ERROR"
	WorkflowExecutionEventErrorCodeNodeExecution                  WorkflowExecutionEventErrorCode = "NODE_EXECUTION"
	WorkflowExecutionEventErrorCodeLlmProvider                    WorkflowExecutionEventErrorCode = "LLM_PROVIDER"
	WorkflowExecutionEventErrorCodeInvalidTemplate                WorkflowExecutionEventErrorCode = "INVALID_TEMPLATE"
)

func NewWorkflowExecutionEventErrorCodeFromString(s string) (WorkflowExecutionEventErrorCode, error) {
	switch s {
	case "WORKFLOW_INITIALIZATION":
		return WorkflowExecutionEventErrorCodeWorkflowInitialization, nil
	case "NODE_EXECUTION_COUNT_LIMIT_REACHED":
		return WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached, nil
	case "INTERNAL_SERVER_ERROR":
		return WorkflowExecutionEventErrorCodeInternalServerError, nil
	case "NODE_EXECUTION":
		return WorkflowExecutionEventErrorCodeNodeExecution, nil
	case "LLM_PROVIDER":
		return WorkflowExecutionEventErrorCodeLlmProvider, nil
	case "INVALID_TEMPLATE":
		return WorkflowExecutionEventErrorCodeInvalidTemplate, nil
	}
	var t WorkflowExecutionEventErrorCode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventErrorCode) Ptr() *WorkflowExecutionEventErrorCode {
	return &w
}

// * `NODE` - Node
// * `WORKFLOW` - Workflow
type WorkflowExecutionEventType string

const (
	WorkflowExecutionEventTypeNode     WorkflowExecutionEventType = "NODE"
	WorkflowExecutionEventTypeWorkflow WorkflowExecutionEventType = "WORKFLOW"
)

func NewWorkflowExecutionEventTypeFromString(s string) (WorkflowExecutionEventType, error) {
	switch s {
	case "NODE":
		return WorkflowExecutionEventTypeNode, nil
	case "WORKFLOW":
		return WorkflowExecutionEventTypeWorkflow, nil
	}
	var t WorkflowExecutionEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventType) Ptr() *WorkflowExecutionEventType {
	return &w
}

type WorkflowExecutionNodeResultEvent struct {
	ExecutionId string                   `json:"execution_id"`
	RunId       *string                  `json:"run_id,omitempty"`
	ExternalId  *string                  `json:"external_id,omitempty"`
	Data        *WorkflowNodeResultEvent `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionNodeResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionNodeResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionNodeResultEvent(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionNodeResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionWorkflowResultEvent struct {
	ExecutionId string               `json:"execution_id"`
	RunId       *string              `json:"run_id,omitempty"`
	ExternalId  *string              `json:"external_id,omitempty"`
	Data        *WorkflowResultEvent `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionWorkflowResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionWorkflowResultEvent(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionWorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowNodeResultData struct {
	Type        string
	Prompt      *PromptNodeResult
	Search      *SearchNodeResult
	Templating  *TemplatingNodeResult
	Conditional *ConditionalNodeResult
	Api         *ApiNodeResult
	Terminal    *TerminalNodeResult
}

func NewWorkflowNodeResultDataFromPrompt(value *PromptNodeResult) *WorkflowNodeResultData {
	return &WorkflowNodeResultData{Type: "PROMPT", Prompt: value}
}

func NewWorkflowNodeResultDataFromSearch(value *SearchNodeResult) *WorkflowNodeResultData {
	return &WorkflowNodeResultData{Type: "SEARCH", Search: value}
}

func NewWorkflowNodeResultDataFromTemplating(value *TemplatingNodeResult) *WorkflowNodeResultData {
	return &WorkflowNodeResultData{Type: "TEMPLATING", Templating: value}
}

func NewWorkflowNodeResultDataFromConditional(value *ConditionalNodeResult) *WorkflowNodeResultData {
	return &WorkflowNodeResultData{Type: "CONDITIONAL", Conditional: value}
}

func NewWorkflowNodeResultDataFromApi(value *ApiNodeResult) *WorkflowNodeResultData {
	return &WorkflowNodeResultData{Type: "API", Api: value}
}

func NewWorkflowNodeResultDataFromTerminal(value *TerminalNodeResult) *WorkflowNodeResultData {
	return &WorkflowNodeResultData{Type: "TERMINAL", Terminal: value}
}

func (w *WorkflowNodeResultData) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "PROMPT":
		value := new(PromptNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Prompt = value
	case "SEARCH":
		value := new(SearchNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Search = value
	case "TEMPLATING":
		value := new(TemplatingNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Templating = value
	case "CONDITIONAL":
		value := new(ConditionalNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Conditional = value
	case "API":
		value := new(ApiNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Api = value
	case "TERMINAL":
		value := new(TerminalNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Terminal = value
	}
	return nil
}

func (w WorkflowNodeResultData) MarshalJSON() ([]byte, error) {
	switch w.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "PROMPT":
		var marshaler = struct {
			Type string `json:"type"`
			*PromptNodeResult
		}{
			Type:             w.Type,
			PromptNodeResult: w.Prompt,
		}
		return json.Marshal(marshaler)
	case "SEARCH":
		var marshaler = struct {
			Type string `json:"type"`
			*SearchNodeResult
		}{
			Type:             w.Type,
			SearchNodeResult: w.Search,
		}
		return json.Marshal(marshaler)
	case "TEMPLATING":
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeResult
		}{
			Type:                 w.Type,
			TemplatingNodeResult: w.Templating,
		}
		return json.Marshal(marshaler)
	case "CONDITIONAL":
		var marshaler = struct {
			Type string `json:"type"`
			*ConditionalNodeResult
		}{
			Type:                  w.Type,
			ConditionalNodeResult: w.Conditional,
		}
		return json.Marshal(marshaler)
	case "API":
		var marshaler = struct {
			Type string `json:"type"`
			*ApiNodeResult
		}{
			Type:          w.Type,
			ApiNodeResult: w.Api,
		}
		return json.Marshal(marshaler)
	case "TERMINAL":
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeResult
		}{
			Type:               w.Type,
			TerminalNodeResult: w.Terminal,
		}
		return json.Marshal(marshaler)
	}
}

type WorkflowNodeResultDataVisitor interface {
	VisitPrompt(*PromptNodeResult) error
	VisitSearch(*SearchNodeResult) error
	VisitTemplating(*TemplatingNodeResult) error
	VisitConditional(*ConditionalNodeResult) error
	VisitApi(*ApiNodeResult) error
	VisitTerminal(*TerminalNodeResult) error
}

func (w *WorkflowNodeResultData) Accept(visitor WorkflowNodeResultDataVisitor) error {
	switch w.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "PROMPT":
		return visitor.VisitPrompt(w.Prompt)
	case "SEARCH":
		return visitor.VisitSearch(w.Search)
	case "TEMPLATING":
		return visitor.VisitTemplating(w.Templating)
	case "CONDITIONAL":
		return visitor.VisitConditional(w.Conditional)
	case "API":
		return visitor.VisitApi(w.Api)
	case "TERMINAL":
		return visitor.VisitTerminal(w.Terminal)
	}
}

type WorkflowNodeResultEvent struct {
	Id           string                            `json:"id"`
	NodeId       string                            `json:"node_id"`
	NodeResultId string                            `json:"node_result_id"`
	State        WorkflowNodeResultEventState      `json:"state,omitempty"`
	Ts           *time.Time                        `json:"ts,omitempty"`
	Data         *WorkflowNodeResultData           `json:"data,omitempty"`
	Error        *WorkflowEventError               `json:"error,omitempty"`
	InputValues  []*NodeInputVariableCompiledValue `json:"input_values,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowNodeResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowNodeResultEvent(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowNodeResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// * `INITIATED` - INITIATED
// * `STREAMING` - STREAMING
// * `FULFILLED` - FULFILLED
// * `REJECTED` - REJECTED
type WorkflowNodeResultEventState string

const (
	WorkflowNodeResultEventStateInitiated WorkflowNodeResultEventState = "INITIATED"
	WorkflowNodeResultEventStateStreaming WorkflowNodeResultEventState = "STREAMING"
	WorkflowNodeResultEventStateFulfilled WorkflowNodeResultEventState = "FULFILLED"
	WorkflowNodeResultEventStateRejected  WorkflowNodeResultEventState = "REJECTED"
)

func NewWorkflowNodeResultEventStateFromString(s string) (WorkflowNodeResultEventState, error) {
	switch s {
	case "INITIATED":
		return WorkflowNodeResultEventStateInitiated, nil
	case "STREAMING":
		return WorkflowNodeResultEventStateStreaming, nil
	case "FULFILLED":
		return WorkflowNodeResultEventStateFulfilled, nil
	case "REJECTED":
		return WorkflowNodeResultEventStateRejected, nil
	}
	var t WorkflowNodeResultEventState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowNodeResultEventState) Ptr() *WorkflowNodeResultEventState {
	return &w
}

type WorkflowRequestChatHistoryInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                `json:"name"`
	Value []*ChatMessageRequest `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowRequestChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestChatHistoryInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestChatHistoryInputRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestChatHistoryInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowRequestInputRequest struct {
	Type        string
	String      *WorkflowRequestStringInputRequest
	Json        *WorkflowRequestJsonInputRequest
	ChatHistory *WorkflowRequestChatHistoryInputRequest
}

func NewWorkflowRequestInputRequestFromString(value *WorkflowRequestStringInputRequest) *WorkflowRequestInputRequest {
	return &WorkflowRequestInputRequest{Type: "STRING", String: value}
}

func NewWorkflowRequestInputRequestFromJson(value *WorkflowRequestJsonInputRequest) *WorkflowRequestInputRequest {
	return &WorkflowRequestInputRequest{Type: "JSON", Json: value}
}

func NewWorkflowRequestInputRequestFromChatHistory(value *WorkflowRequestChatHistoryInputRequest) *WorkflowRequestInputRequest {
	return &WorkflowRequestInputRequest{Type: "CHAT_HISTORY", ChatHistory: value}
}

func (w *WorkflowRequestInputRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowRequestStringInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "JSON":
		value := new(WorkflowRequestJsonInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowRequestChatHistoryInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	}
	return nil
}

func (w WorkflowRequestInputRequest) MarshalJSON() ([]byte, error) {
	switch w.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowRequestStringInputRequest
		}{
			Type:                              w.Type,
			WorkflowRequestStringInputRequest: w.String,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowRequestJsonInputRequest
		}{
			Type:                            w.Type,
			WorkflowRequestJsonInputRequest: w.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowRequestChatHistoryInputRequest
		}{
			Type:                                   w.Type,
			WorkflowRequestChatHistoryInputRequest: w.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
}

type WorkflowRequestInputRequestVisitor interface {
	VisitString(*WorkflowRequestStringInputRequest) error
	VisitJson(*WorkflowRequestJsonInputRequest) error
	VisitChatHistory(*WorkflowRequestChatHistoryInputRequest) error
}

func (w *WorkflowRequestInputRequest) Accept(visitor WorkflowRequestInputRequestVisitor) error {
	switch w.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "STRING":
		return visitor.VisitString(w.String)
	case "JSON":
		return visitor.VisitJson(w.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(w.ChatHistory)
	}
}

type WorkflowRequestJsonInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                 `json:"name"`
	Value map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowRequestJsonInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestJsonInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestJsonInputRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestJsonInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowRequestStringInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string `json:"name"`
	Value string `json:"value"`

	_rawJSON json.RawMessage
}

func (w *WorkflowRequestStringInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestStringInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestStringInputRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestStringInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEvent struct {
	Id     string                         `json:"id"`
	State  WorkflowNodeResultEventState   `json:"state,omitempty"`
	Ts     time.Time                      `json:"ts"`
	Output *WorkflowResultEventOutputData `json:"output,omitempty"`
	Error  *WorkflowEventError            `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEvent(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputData struct {
	Type          string
	String        *WorkflowResultEventOutputDataString
	Number        *WorkflowResultEventOutputDataNumber
	Json          *WorkflowResultEventOutputDataJson
	ChatHistory   *WorkflowResultEventOutputDataChatHistory
	SearchResults *WorkflowResultEventOutputDataSearchResults
	Error         *WorkflowResultEventOutputDataError
}

func NewWorkflowResultEventOutputDataFromString(value *WorkflowResultEventOutputDataString) *WorkflowResultEventOutputData {
	return &WorkflowResultEventOutputData{Type: "STRING", String: value}
}

func NewWorkflowResultEventOutputDataFromNumber(value *WorkflowResultEventOutputDataNumber) *WorkflowResultEventOutputData {
	return &WorkflowResultEventOutputData{Type: "NUMBER", Number: value}
}

func NewWorkflowResultEventOutputDataFromJson(value *WorkflowResultEventOutputDataJson) *WorkflowResultEventOutputData {
	return &WorkflowResultEventOutputData{Type: "JSON", Json: value}
}

func NewWorkflowResultEventOutputDataFromChatHistory(value *WorkflowResultEventOutputDataChatHistory) *WorkflowResultEventOutputData {
	return &WorkflowResultEventOutputData{Type: "CHAT_HISTORY", ChatHistory: value}
}

func NewWorkflowResultEventOutputDataFromSearchResults(value *WorkflowResultEventOutputDataSearchResults) *WorkflowResultEventOutputData {
	return &WorkflowResultEventOutputData{Type: "SEARCH_RESULTS", SearchResults: value}
}

func NewWorkflowResultEventOutputDataFromError(value *WorkflowResultEventOutputDataError) *WorkflowResultEventOutputData {
	return &WorkflowResultEventOutputData{Type: "ERROR", Error: value}
}

func (w *WorkflowResultEventOutputData) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowResultEventOutputDataString)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "NUMBER":
		value := new(WorkflowResultEventOutputDataNumber)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Number = value
	case "JSON":
		value := new(WorkflowResultEventOutputDataJson)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowResultEventOutputDataChatHistory)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(WorkflowResultEventOutputDataSearchResults)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.SearchResults = value
	case "ERROR":
		value := new(WorkflowResultEventOutputDataError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Error = value
	}
	return nil
}

func (w WorkflowResultEventOutputData) MarshalJSON() ([]byte, error) {
	switch w.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataString
		}{
			Type:                                w.Type,
			WorkflowResultEventOutputDataString: w.String,
		}
		return json.Marshal(marshaler)
	case "NUMBER":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataNumber
		}{
			Type:                                w.Type,
			WorkflowResultEventOutputDataNumber: w.Number,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataJson
		}{
			Type:                              w.Type,
			WorkflowResultEventOutputDataJson: w.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataChatHistory
		}{
			Type:                                     w.Type,
			WorkflowResultEventOutputDataChatHistory: w.ChatHistory,
		}
		return json.Marshal(marshaler)
	case "SEARCH_RESULTS":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataSearchResults
		}{
			Type: w.Type,
			WorkflowResultEventOutputDataSearchResults: w.SearchResults,
		}
		return json.Marshal(marshaler)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataError
		}{
			Type:                               w.Type,
			WorkflowResultEventOutputDataError: w.Error,
		}
		return json.Marshal(marshaler)
	}
}

type WorkflowResultEventOutputDataVisitor interface {
	VisitString(*WorkflowResultEventOutputDataString) error
	VisitNumber(*WorkflowResultEventOutputDataNumber) error
	VisitJson(*WorkflowResultEventOutputDataJson) error
	VisitChatHistory(*WorkflowResultEventOutputDataChatHistory) error
	VisitSearchResults(*WorkflowResultEventOutputDataSearchResults) error
	VisitError(*WorkflowResultEventOutputDataError) error
}

func (w *WorkflowResultEventOutputData) Accept(visitor WorkflowResultEventOutputDataVisitor) error {
	switch w.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "STRING":
		return visitor.VisitString(w.String)
	case "NUMBER":
		return visitor.VisitNumber(w.Number)
	case "JSON":
		return visitor.VisitJson(w.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(w.ChatHistory)
	case "SEARCH_RESULTS":
		return visitor.VisitSearchResults(w.SearchResults)
	case "ERROR":
		return visitor.VisitError(w.Error)
	}
}

type WorkflowResultEventOutputDataChatHistory struct {
	Id     *string                      `json:"id,omitempty"`
	Name   string                       `json:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty"`
	NodeId string                       `json:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string        `json:"delta,omitempty"`
	Value []*ChatMessage `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataChatHistory) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataChatHistory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataChatHistory(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputDataError struct {
	Id     *string                      `json:"id,omitempty"`
	Name   string                       `json:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty"`
	NodeId string                       `json:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string      `json:"delta,omitempty"`
	Value *VellumError `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataError(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputDataJson struct {
	Id     *string                      `json:"id,omitempty"`
	Name   string                       `json:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty"`
	NodeId string                       `json:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string                `json:"delta,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataJson) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataJson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataJson(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputDataNumber struct {
	Id     *string                      `json:"id,omitempty"`
	Name   string                       `json:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty"`
	NodeId string                       `json:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string  `json:"delta,omitempty"`
	Value *float64 `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataNumber(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputDataSearchResults struct {
	Id     *string                      `json:"id,omitempty"`
	Name   string                       `json:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty"`
	NodeId string                       `json:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string         `json:"delta,omitempty"`
	Value []*SearchResult `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataSearchResults(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputDataString struct {
	Id     *string                      `json:"id,omitempty"`
	Name   string                       `json:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty"`
	NodeId string                       `json:"node_id"`
	// The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING.
	Delta *string `json:"delta,omitempty"`
	// The entire string value. Will be non-null for events of state FULFILLED.
	Value *string `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataString) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataString
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataString(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowStreamEvent struct {
	Type     string
	Workflow *WorkflowExecutionWorkflowResultEvent
	Node     *WorkflowExecutionNodeResultEvent
}

func NewWorkflowStreamEventFromWorkflow(value *WorkflowExecutionWorkflowResultEvent) *WorkflowStreamEvent {
	return &WorkflowStreamEvent{Type: "WORKFLOW", Workflow: value}
}

func NewWorkflowStreamEventFromNode(value *WorkflowExecutionNodeResultEvent) *WorkflowStreamEvent {
	return &WorkflowStreamEvent{Type: "NODE", Node: value}
}

func (w *WorkflowStreamEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "WORKFLOW":
		value := new(WorkflowExecutionWorkflowResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Workflow = value
	case "NODE":
		value := new(WorkflowExecutionNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Node = value
	}
	return nil
}

func (w WorkflowStreamEvent) MarshalJSON() ([]byte, error) {
	switch w.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "WORKFLOW":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowExecutionWorkflowResultEvent
		}{
			Type:                                 w.Type,
			WorkflowExecutionWorkflowResultEvent: w.Workflow,
		}
		return json.Marshal(marshaler)
	case "NODE":
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowExecutionNodeResultEvent
		}{
			Type:                             w.Type,
			WorkflowExecutionNodeResultEvent: w.Node,
		}
		return json.Marshal(marshaler)
	}
}

type WorkflowStreamEventVisitor interface {
	VisitWorkflow(*WorkflowExecutionWorkflowResultEvent) error
	VisitNode(*WorkflowExecutionNodeResultEvent) error
}

func (w *WorkflowStreamEvent) Accept(visitor WorkflowStreamEventVisitor) error {
	switch w.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", w.Type, w)
	case "WORKFLOW":
		return visitor.VisitWorkflow(w.Workflow)
	case "NODE":
		return visitor.VisitNode(w.Node)
	}
}
