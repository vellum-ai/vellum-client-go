// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type CodeExecutorRequest struct {
	Code        string                         `json:"code" url:"-"`
	Runtime     CodeExecutionRuntime           `json:"runtime" url:"-"`
	InputValues []*CodeExecutorInputRequest    `json:"input_values,omitempty" url:"-"`
	Packages    []*CodeExecutionPackageRequest `json:"packages,omitempty" url:"-"`
	OutputType  VellumVariableType             `json:"output_type" url:"-"`
}

type ExecutePromptRequest struct {
	// A list consisting of the Prompt Deployment's input variables and their values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"-"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"-"`
	// The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.
	ExpandMeta *PromptDeploymentExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.
	RawOverrides *RawPromptExecutionOverridesRequest `json:"raw_overrides,omitempty" url:"-"`
	// A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.
	ExpandRaw []string `json:"expand_raw,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type ExecutePromptStreamRequest struct {
	// A list consisting of the Prompt Deployment's input variables and their values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"-"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"-"`
	// The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.
	ExpandMeta *PromptDeploymentExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.
	RawOverrides *RawPromptExecutionOverridesRequest `json:"raw_overrides,omitempty" url:"-"`
	// A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.
	ExpandRaw []string `json:"expand_raw,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type ExecuteWorkflowRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.
	ExpandMeta *WorkflowExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"-"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type ExecuteWorkflowStreamRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.
	ExpandMeta *WorkflowExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"-"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// Optionally specify which events you want to receive. Defaults to only WORKFLOW events. Note that the schema of non-WORKFLOW events is unstable and should be used with caution.
	EventTypes []WorkflowExecutionEventType `json:"event_types,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type GenerateBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"-"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"-"`
}

type GenerateStreamBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"-"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"-"`
}

type SearchRequestBodyRequest struct {
	// The ID of the index to search against. Must provide either this or index_name.
	IndexId *string `json:"index_id,omitempty" url:"-"`
	// The name of the index to search against. Must provide either this or index_id.
	IndexName *string `json:"index_name,omitempty" url:"-"`
	// The query to search for.
	Query string `json:"query" url:"-"`
	// Configuration options for the search.
	Options *SearchRequestOptionsRequest `json:"options,omitempty" url:"-"`
}

type SubmitCompletionActualsRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// Feedback regarding the quality of previously generated completions
	Actuals []*SubmitCompletionActualRequest `json:"actuals,omitempty" url:"-"`
}

type SubmitWorkflowExecutionActualsRequest struct {
	// Feedback regarding the quality of an output on a previously executed workflow.
	Actuals []*SubmitWorkflowExecutionActualRequest `json:"actuals,omitempty" url:"-"`
	// The Vellum-generated ID of a previously executed workflow. Must provide either this or external_id.
	ExecutionId *string `json:"execution_id,omitempty" url:"-"`
	// The external ID that was originally provided by when executing the workflow, if applicable, that you'd now like to submit actuals for. Must provide either this or execution_id.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
}

type AdHocExecutePromptEvent struct {
	InitiatedAdHocExecutePromptEvent *InitiatedAdHocExecutePromptEvent
	StreamingAdHocExecutePromptEvent *StreamingAdHocExecutePromptEvent
	FulfilledAdHocExecutePromptEvent *FulfilledAdHocExecutePromptEvent
	RejectedAdHocExecutePromptEvent  *RejectedAdHocExecutePromptEvent
}

func (a *AdHocExecutePromptEvent) UnmarshalJSON(data []byte) error {
	valueInitiatedAdHocExecutePromptEvent := new(InitiatedAdHocExecutePromptEvent)
	if err := json.Unmarshal(data, &valueInitiatedAdHocExecutePromptEvent); err == nil {
		a.InitiatedAdHocExecutePromptEvent = valueInitiatedAdHocExecutePromptEvent
		return nil
	}
	valueStreamingAdHocExecutePromptEvent := new(StreamingAdHocExecutePromptEvent)
	if err := json.Unmarshal(data, &valueStreamingAdHocExecutePromptEvent); err == nil {
		a.StreamingAdHocExecutePromptEvent = valueStreamingAdHocExecutePromptEvent
		return nil
	}
	valueFulfilledAdHocExecutePromptEvent := new(FulfilledAdHocExecutePromptEvent)
	if err := json.Unmarshal(data, &valueFulfilledAdHocExecutePromptEvent); err == nil {
		a.FulfilledAdHocExecutePromptEvent = valueFulfilledAdHocExecutePromptEvent
		return nil
	}
	valueRejectedAdHocExecutePromptEvent := new(RejectedAdHocExecutePromptEvent)
	if err := json.Unmarshal(data, &valueRejectedAdHocExecutePromptEvent); err == nil {
		a.RejectedAdHocExecutePromptEvent = valueRejectedAdHocExecutePromptEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AdHocExecutePromptEvent) MarshalJSON() ([]byte, error) {
	if a.InitiatedAdHocExecutePromptEvent != nil {
		return json.Marshal(a.InitiatedAdHocExecutePromptEvent)
	}
	if a.StreamingAdHocExecutePromptEvent != nil {
		return json.Marshal(a.StreamingAdHocExecutePromptEvent)
	}
	if a.FulfilledAdHocExecutePromptEvent != nil {
		return json.Marshal(a.FulfilledAdHocExecutePromptEvent)
	}
	if a.RejectedAdHocExecutePromptEvent != nil {
		return json.Marshal(a.RejectedAdHocExecutePromptEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AdHocExecutePromptEventVisitor interface {
	VisitInitiatedAdHocExecutePromptEvent(*InitiatedAdHocExecutePromptEvent) error
	VisitStreamingAdHocExecutePromptEvent(*StreamingAdHocExecutePromptEvent) error
	VisitFulfilledAdHocExecutePromptEvent(*FulfilledAdHocExecutePromptEvent) error
	VisitRejectedAdHocExecutePromptEvent(*RejectedAdHocExecutePromptEvent) error
}

func (a *AdHocExecutePromptEvent) Accept(visitor AdHocExecutePromptEventVisitor) error {
	if a.InitiatedAdHocExecutePromptEvent != nil {
		return visitor.VisitInitiatedAdHocExecutePromptEvent(a.InitiatedAdHocExecutePromptEvent)
	}
	if a.StreamingAdHocExecutePromptEvent != nil {
		return visitor.VisitStreamingAdHocExecutePromptEvent(a.StreamingAdHocExecutePromptEvent)
	}
	if a.FulfilledAdHocExecutePromptEvent != nil {
		return visitor.VisitFulfilledAdHocExecutePromptEvent(a.FulfilledAdHocExecutePromptEvent)
	}
	if a.RejectedAdHocExecutePromptEvent != nil {
		return visitor.VisitRejectedAdHocExecutePromptEvent(a.RejectedAdHocExecutePromptEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AdHocExpandMeta struct {
	// If enabled, the response will include model host cost tracking. This may increase latency for some model hosts.
	Cost *bool `json:"cost,omitempty" url:"cost,omitempty"`
	// If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`
	// If enabled, the response will include model host usage tracking. This may increase latency for some model hosts.
	Usage *bool `json:"usage,omitempty" url:"usage,omitempty"`
	// If enabled, the response will include the reason provided by the model for why the execution finished.
	FinishReason *bool `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdHocExpandMeta) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdHocExpandMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler AdHocExpandMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdHocExpandMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdHocExpandMeta) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type AdHocFulfilledPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	Usage        *MlModelUsage     `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdHocFulfilledPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdHocFulfilledPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler AdHocFulfilledPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdHocFulfilledPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdHocFulfilledPromptExecutionMeta) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type AdHocInitiatedPromptExecutionMeta struct {
	ModelName *string `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency   *int    `json:"latency,omitempty" url:"latency,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdHocInitiatedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdHocInitiatedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler AdHocInitiatedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdHocInitiatedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdHocInitiatedPromptExecutionMeta) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type AdHocRejectedPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdHocRejectedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdHocRejectedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler AdHocRejectedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdHocRejectedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdHocRejectedPromptExecutionMeta) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type AdHocStreamingPromptExecutionMeta struct {
	Latency *int `json:"latency,omitempty" url:"latency,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdHocStreamingPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdHocStreamingPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler AdHocStreamingPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdHocStreamingPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdHocStreamingPromptExecutionMeta) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// - `True` - True
type AddOpenaiApiKeyEnum = bool

// A Node Result Event emitted from an API Node.
type ApiNodeResult struct {
	Data  *ApiNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiNodeResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiNodeResult) Type() string {
	return a.type_
}

func (a *ApiNodeResult) UnmarshalJSON(data []byte) error {
	type embed ApiNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ApiNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "API" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "API", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResult) MarshalJSON() ([]byte, error) {
	type embed ApiNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "API",
	}
	return json.Marshal(marshaler)
}

func (a *ApiNodeResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiNodeResultData struct {
	Json               map[string]interface{} `json:"json,omitempty" url:"json,omitempty"`
	TextOutputId       string                 `json:"text_output_id" url:"text_output_id"`
	Text               *string                `json:"text,omitempty" url:"text,omitempty"`
	JsonOutputId       string                 `json:"json_output_id" url:"json_output_id"`
	StatusCodeOutputId string                 `json:"status_code_output_id" url:"status_code_output_id"`
	StatusCode         int                    `json:"status_code" url:"status_code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiNodeResultData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResultData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A list of chat message content items.
type ArrayChatMessageContent struct {
	Value []*ArrayChatMessageContentItem `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayChatMessageContent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayChatMessageContent) Type() string {
	return a.type_
}

func (a *ArrayChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed ArrayChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed ArrayChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayChatMessageContent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayChatMessageContentItem struct {
	StringChatMessageContent       *StringChatMessageContent
	FunctionCallChatMessageContent *FunctionCallChatMessageContent
	ImageChatMessageContent        *ImageChatMessageContent
	AudioChatMessageContent        *AudioChatMessageContent
}

func (a *ArrayChatMessageContentItem) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContent := new(StringChatMessageContent)
	if err := json.Unmarshal(data, &valueStringChatMessageContent); err == nil {
		a.StringChatMessageContent = valueStringChatMessageContent
		return nil
	}
	valueFunctionCallChatMessageContent := new(FunctionCallChatMessageContent)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContent); err == nil {
		a.FunctionCallChatMessageContent = valueFunctionCallChatMessageContent
		return nil
	}
	valueImageChatMessageContent := new(ImageChatMessageContent)
	if err := json.Unmarshal(data, &valueImageChatMessageContent); err == nil {
		a.ImageChatMessageContent = valueImageChatMessageContent
		return nil
	}
	valueAudioChatMessageContent := new(AudioChatMessageContent)
	if err := json.Unmarshal(data, &valueAudioChatMessageContent); err == nil {
		a.AudioChatMessageContent = valueAudioChatMessageContent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ArrayChatMessageContentItem) MarshalJSON() ([]byte, error) {
	if a.StringChatMessageContent != nil {
		return json.Marshal(a.StringChatMessageContent)
	}
	if a.FunctionCallChatMessageContent != nil {
		return json.Marshal(a.FunctionCallChatMessageContent)
	}
	if a.ImageChatMessageContent != nil {
		return json.Marshal(a.ImageChatMessageContent)
	}
	if a.AudioChatMessageContent != nil {
		return json.Marshal(a.AudioChatMessageContent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ArrayChatMessageContentItemVisitor interface {
	VisitStringChatMessageContent(*StringChatMessageContent) error
	VisitFunctionCallChatMessageContent(*FunctionCallChatMessageContent) error
	VisitImageChatMessageContent(*ImageChatMessageContent) error
	VisitAudioChatMessageContent(*AudioChatMessageContent) error
}

func (a *ArrayChatMessageContentItem) Accept(visitor ArrayChatMessageContentItemVisitor) error {
	if a.StringChatMessageContent != nil {
		return visitor.VisitStringChatMessageContent(a.StringChatMessageContent)
	}
	if a.FunctionCallChatMessageContent != nil {
		return visitor.VisitFunctionCallChatMessageContent(a.FunctionCallChatMessageContent)
	}
	if a.ImageChatMessageContent != nil {
		return visitor.VisitImageChatMessageContent(a.ImageChatMessageContent)
	}
	if a.AudioChatMessageContent != nil {
		return visitor.VisitAudioChatMessageContent(a.AudioChatMessageContent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ArrayChatMessageContentItemRequest struct {
	StringChatMessageContentRequest       *StringChatMessageContentRequest
	FunctionCallChatMessageContentRequest *FunctionCallChatMessageContentRequest
	ImageChatMessageContentRequest        *ImageChatMessageContentRequest
	AudioChatMessageContentRequest        *AudioChatMessageContentRequest
}

func (a *ArrayChatMessageContentItemRequest) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContentRequest := new(StringChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueStringChatMessageContentRequest); err == nil {
		a.StringChatMessageContentRequest = valueStringChatMessageContentRequest
		return nil
	}
	valueFunctionCallChatMessageContentRequest := new(FunctionCallChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContentRequest); err == nil {
		a.FunctionCallChatMessageContentRequest = valueFunctionCallChatMessageContentRequest
		return nil
	}
	valueImageChatMessageContentRequest := new(ImageChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueImageChatMessageContentRequest); err == nil {
		a.ImageChatMessageContentRequest = valueImageChatMessageContentRequest
		return nil
	}
	valueAudioChatMessageContentRequest := new(AudioChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueAudioChatMessageContentRequest); err == nil {
		a.AudioChatMessageContentRequest = valueAudioChatMessageContentRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ArrayChatMessageContentItemRequest) MarshalJSON() ([]byte, error) {
	if a.StringChatMessageContentRequest != nil {
		return json.Marshal(a.StringChatMessageContentRequest)
	}
	if a.FunctionCallChatMessageContentRequest != nil {
		return json.Marshal(a.FunctionCallChatMessageContentRequest)
	}
	if a.ImageChatMessageContentRequest != nil {
		return json.Marshal(a.ImageChatMessageContentRequest)
	}
	if a.AudioChatMessageContentRequest != nil {
		return json.Marshal(a.AudioChatMessageContentRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ArrayChatMessageContentItemRequestVisitor interface {
	VisitStringChatMessageContentRequest(*StringChatMessageContentRequest) error
	VisitFunctionCallChatMessageContentRequest(*FunctionCallChatMessageContentRequest) error
	VisitImageChatMessageContentRequest(*ImageChatMessageContentRequest) error
	VisitAudioChatMessageContentRequest(*AudioChatMessageContentRequest) error
}

func (a *ArrayChatMessageContentItemRequest) Accept(visitor ArrayChatMessageContentItemRequestVisitor) error {
	if a.StringChatMessageContentRequest != nil {
		return visitor.VisitStringChatMessageContentRequest(a.StringChatMessageContentRequest)
	}
	if a.FunctionCallChatMessageContentRequest != nil {
		return visitor.VisitFunctionCallChatMessageContentRequest(a.FunctionCallChatMessageContentRequest)
	}
	if a.ImageChatMessageContentRequest != nil {
		return visitor.VisitImageChatMessageContentRequest(a.ImageChatMessageContentRequest)
	}
	if a.AudioChatMessageContentRequest != nil {
		return visitor.VisitAudioChatMessageContentRequest(a.AudioChatMessageContentRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// A list of chat message content items.
type ArrayChatMessageContentRequest struct {
	Value []*ArrayChatMessageContentItemRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayChatMessageContentRequest) Type() string {
	return a.type_
}

func (a *ArrayChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed ArrayChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed ArrayChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayChatMessageContentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A user input representing a Vellum Array value
type ArrayInputRequest struct {
	// The variable's name
	Name  string                `json:"name" url:"name"`
	Value []*VellumValueRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayInputRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayInputRequest) Type() string {
	return a.type_
}

func (a *ArrayInputRequest) UnmarshalJSON(data []byte) error {
	type embed ArrayInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayInputRequest) MarshalJSON() ([]byte, error) {
	type embed ArrayInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayInputRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayVariableValue struct {
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayVariableValue) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayVariableValue) Type() string {
	return a.type_
}

func (a *ArrayVariableValue) UnmarshalJSON(data []byte) error {
	type embed ArrayVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayVariableValue) MarshalJSON() ([]byte, error) {
	type embed ArrayVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayVariableValue) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayVariableValueItem struct {
	StringVariableValue        *StringVariableValue
	NumberVariableValue        *NumberVariableValue
	JsonVariableValue          *JsonVariableValue
	ErrorVariableValue         *ErrorVariableValue
	FunctionCallVariableValue  *FunctionCallVariableValue
	ImageVariableValue         *ImageVariableValue
	AudioVariableValue         *AudioVariableValue
	ChatHistoryVariableValue   *ChatHistoryVariableValue
	SearchResultsVariableValue *SearchResultsVariableValue
	ArrayVariableValue         *ArrayVariableValue
}

func (a *ArrayVariableValueItem) UnmarshalJSON(data []byte) error {
	valueStringVariableValue := new(StringVariableValue)
	if err := json.Unmarshal(data, &valueStringVariableValue); err == nil {
		a.StringVariableValue = valueStringVariableValue
		return nil
	}
	valueNumberVariableValue := new(NumberVariableValue)
	if err := json.Unmarshal(data, &valueNumberVariableValue); err == nil {
		a.NumberVariableValue = valueNumberVariableValue
		return nil
	}
	valueJsonVariableValue := new(JsonVariableValue)
	if err := json.Unmarshal(data, &valueJsonVariableValue); err == nil {
		a.JsonVariableValue = valueJsonVariableValue
		return nil
	}
	valueErrorVariableValue := new(ErrorVariableValue)
	if err := json.Unmarshal(data, &valueErrorVariableValue); err == nil {
		a.ErrorVariableValue = valueErrorVariableValue
		return nil
	}
	valueFunctionCallVariableValue := new(FunctionCallVariableValue)
	if err := json.Unmarshal(data, &valueFunctionCallVariableValue); err == nil {
		a.FunctionCallVariableValue = valueFunctionCallVariableValue
		return nil
	}
	valueImageVariableValue := new(ImageVariableValue)
	if err := json.Unmarshal(data, &valueImageVariableValue); err == nil {
		a.ImageVariableValue = valueImageVariableValue
		return nil
	}
	valueAudioVariableValue := new(AudioVariableValue)
	if err := json.Unmarshal(data, &valueAudioVariableValue); err == nil {
		a.AudioVariableValue = valueAudioVariableValue
		return nil
	}
	valueChatHistoryVariableValue := new(ChatHistoryVariableValue)
	if err := json.Unmarshal(data, &valueChatHistoryVariableValue); err == nil {
		a.ChatHistoryVariableValue = valueChatHistoryVariableValue
		return nil
	}
	valueSearchResultsVariableValue := new(SearchResultsVariableValue)
	if err := json.Unmarshal(data, &valueSearchResultsVariableValue); err == nil {
		a.SearchResultsVariableValue = valueSearchResultsVariableValue
		return nil
	}
	valueArrayVariableValue := new(ArrayVariableValue)
	if err := json.Unmarshal(data, &valueArrayVariableValue); err == nil {
		a.ArrayVariableValue = valueArrayVariableValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ArrayVariableValueItem) MarshalJSON() ([]byte, error) {
	if a.StringVariableValue != nil {
		return json.Marshal(a.StringVariableValue)
	}
	if a.NumberVariableValue != nil {
		return json.Marshal(a.NumberVariableValue)
	}
	if a.JsonVariableValue != nil {
		return json.Marshal(a.JsonVariableValue)
	}
	if a.ErrorVariableValue != nil {
		return json.Marshal(a.ErrorVariableValue)
	}
	if a.FunctionCallVariableValue != nil {
		return json.Marshal(a.FunctionCallVariableValue)
	}
	if a.ImageVariableValue != nil {
		return json.Marshal(a.ImageVariableValue)
	}
	if a.AudioVariableValue != nil {
		return json.Marshal(a.AudioVariableValue)
	}
	if a.ChatHistoryVariableValue != nil {
		return json.Marshal(a.ChatHistoryVariableValue)
	}
	if a.SearchResultsVariableValue != nil {
		return json.Marshal(a.SearchResultsVariableValue)
	}
	if a.ArrayVariableValue != nil {
		return json.Marshal(a.ArrayVariableValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type ArrayVariableValueItemVisitor interface {
	VisitStringVariableValue(*StringVariableValue) error
	VisitNumberVariableValue(*NumberVariableValue) error
	VisitJsonVariableValue(*JsonVariableValue) error
	VisitErrorVariableValue(*ErrorVariableValue) error
	VisitFunctionCallVariableValue(*FunctionCallVariableValue) error
	VisitImageVariableValue(*ImageVariableValue) error
	VisitAudioVariableValue(*AudioVariableValue) error
	VisitChatHistoryVariableValue(*ChatHistoryVariableValue) error
	VisitSearchResultsVariableValue(*SearchResultsVariableValue) error
	VisitArrayVariableValue(*ArrayVariableValue) error
}

func (a *ArrayVariableValueItem) Accept(visitor ArrayVariableValueItemVisitor) error {
	if a.StringVariableValue != nil {
		return visitor.VisitStringVariableValue(a.StringVariableValue)
	}
	if a.NumberVariableValue != nil {
		return visitor.VisitNumberVariableValue(a.NumberVariableValue)
	}
	if a.JsonVariableValue != nil {
		return visitor.VisitJsonVariableValue(a.JsonVariableValue)
	}
	if a.ErrorVariableValue != nil {
		return visitor.VisitErrorVariableValue(a.ErrorVariableValue)
	}
	if a.FunctionCallVariableValue != nil {
		return visitor.VisitFunctionCallVariableValue(a.FunctionCallVariableValue)
	}
	if a.ImageVariableValue != nil {
		return visitor.VisitImageVariableValue(a.ImageVariableValue)
	}
	if a.AudioVariableValue != nil {
		return visitor.VisitAudioVariableValue(a.AudioVariableValue)
	}
	if a.ChatHistoryVariableValue != nil {
		return visitor.VisitChatHistoryVariableValue(a.ChatHistoryVariableValue)
	}
	if a.SearchResultsVariableValue != nil {
		return visitor.VisitSearchResultsVariableValue(a.SearchResultsVariableValue)
	}
	if a.ArrayVariableValue != nil {
		return visitor.VisitArrayVariableValue(a.ArrayVariableValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// A value representing an array of Vellum variable values.
type ArrayVellumValue struct {
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayVellumValue) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayVellumValue) Type() string {
	return a.type_
}

func (a *ArrayVellumValue) UnmarshalJSON(data []byte) error {
	type embed ArrayVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayVellumValue) MarshalJSON() ([]byte, error) {
	type embed ArrayVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayVellumValue) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A value representing an array of Vellum variable values.
type ArrayVellumValueRequest struct {
	Value []*VellumValueRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayVellumValueRequest) Type() string {
	return a.type_
}

func (a *ArrayVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ArrayVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ArrayVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "ARRAY", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ArrayVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (a *ArrayVellumValueRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// An audio value that is used in a chat message.
type AudioChatMessageContent struct {
	Value *VellumAudio `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioChatMessageContent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioChatMessageContent) Type() string {
	return a.type_
}

func (a *AudioChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed AudioChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed AudioChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioChatMessageContent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// An audio value that is used in a chat message.
type AudioChatMessageContentRequest struct {
	Value *VellumAudioRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioChatMessageContentRequest) Type() string {
	return a.type_
}

func (a *AudioChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed AudioChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed AudioChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioChatMessageContentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A base Vellum primitive value representing audio.
type AudioVariableValue struct {
	Value *VellumAudio `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioVariableValue) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioVariableValue) Type() string {
	return a.type_
}

func (a *AudioVariableValue) UnmarshalJSON(data []byte) error {
	type embed AudioVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioVariableValue) MarshalJSON() ([]byte, error) {
	type embed AudioVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioVariableValue) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A base Vellum primitive value representing audio.
type AudioVellumValue struct {
	Value *VellumAudio `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioVellumValue) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioVellumValue) Type() string {
	return a.type_
}

func (a *AudioVellumValue) UnmarshalJSON(data []byte) error {
	type embed AudioVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioVellumValue) MarshalJSON() ([]byte, error) {
	type embed AudioVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioVellumValue) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A base Vellum primitive value representing audio.
type AudioVellumValueRequest struct {
	Value *VellumAudioRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioVellumValueRequest) Type() string {
	return a.type_
}

func (a *AudioVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed AudioVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AudioVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "AUDIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "AUDIO", unmarshaler.Type)
	}
	a.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *a, "type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed AudioVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*a),
		Type:  "AUDIO",
	}
	return json.Marshal(marshaler)
}

func (a *AudioVellumValueRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Basic vectorizer for intfloat/multilingual-e5-large.
type BasicVectorizerIntfloatMultilingualE5Large struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerIntfloatMultilingualE5Large
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerIntfloatMultilingualE5Large(unmarshaler.embed)
	if unmarshaler.ModelName != "intfloat/multilingual-e5-large" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "intfloat/multilingual-e5-large", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerIntfloatMultilingualE5Large
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "intfloat/multilingual-e5-large",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for intfloat/multilingual-e5-large.
type BasicVectorizerIntfloatMultilingualE5LargeRequest struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerIntfloatMultilingualE5LargeRequest
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerIntfloatMultilingualE5LargeRequest(unmarshaler.embed)
	if unmarshaler.ModelName != "intfloat/multilingual-e5-large" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "intfloat/multilingual-e5-large", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerIntfloatMultilingualE5LargeRequest
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "intfloat/multilingual-e5-large",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1(unmarshaler.embed)
	if unmarshaler.ModelName != "sentence-transformers/multi-qa-mpnet-base-cos-v1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "sentence-transformers/multi-qa-mpnet-base-cos-v1", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "sentence-transformers/multi-qa-mpnet-base-cos-v1",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request(unmarshaler.embed)
	if unmarshaler.ModelName != "sentence-transformers/multi-qa-mpnet-base-cos-v1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "sentence-transformers/multi-qa-mpnet-base-cos-v1", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "sentence-transformers/multi-qa-mpnet-base-cos-v1",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1(unmarshaler.embed)
	if unmarshaler.ModelName != "sentence-transformers/multi-qa-mpnet-base-dot-v1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "sentence-transformers/multi-qa-mpnet-base-dot-v1", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "sentence-transformers/multi-qa-mpnet-base-dot-v1",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request struct {
	Config    map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) ModelName() string {
	return b.modelName
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) UnmarshalJSON(data []byte) error {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request(unmarshaler.embed)
	if unmarshaler.ModelName != "sentence-transformers/multi-qa-mpnet-base-dot-v1" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "sentence-transformers/multi-qa-mpnet-base-dot-v1", unmarshaler.ModelName)
	}
	b.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *b, "model_name")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) MarshalJSON() ([]byte, error) {
	type embed BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*b),
		ModelName: "sentence-transformers/multi-qa-mpnet-base-dot-v1",
	}
	return json.Marshal(marshaler)
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// A user input representing a list of chat messages
type ChatHistoryInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryInputRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryInputRequest) Type() string {
	return c.type_
}

func (c *ChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryInputRequest) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryInputRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatHistoryVariableValue struct {
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryVariableValue) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryVariableValue) Type() string {
	return c.type_
}

func (c *ChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryVariableValue) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryVariableValue) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A value representing Chat History.
type ChatHistoryVellumValue struct {
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryVellumValue) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryVellumValue) Type() string {
	return c.type_
}

func (c *ChatHistoryVellumValue) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryVellumValue) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryVellumValue) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A value representing Chat History.
type ChatHistoryVellumValueRequest struct {
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryVellumValueRequest) Type() string {
	return c.type_
}

func (c *ChatHistoryVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ChatHistoryVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatHistoryVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ChatHistoryVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *ChatHistoryVellumValueRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessage struct {
	Text    *string             `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole     `json:"role" url:"role"`
	Content *ChatMessageContent `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessage) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessage) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessageContent struct {
	StringChatMessageContent       *StringChatMessageContent
	FunctionCallChatMessageContent *FunctionCallChatMessageContent
	ArrayChatMessageContent        *ArrayChatMessageContent
	ImageChatMessageContent        *ImageChatMessageContent
	AudioChatMessageContent        *AudioChatMessageContent
}

func (c *ChatMessageContent) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContent := new(StringChatMessageContent)
	if err := json.Unmarshal(data, &valueStringChatMessageContent); err == nil {
		c.StringChatMessageContent = valueStringChatMessageContent
		return nil
	}
	valueFunctionCallChatMessageContent := new(FunctionCallChatMessageContent)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContent); err == nil {
		c.FunctionCallChatMessageContent = valueFunctionCallChatMessageContent
		return nil
	}
	valueArrayChatMessageContent := new(ArrayChatMessageContent)
	if err := json.Unmarshal(data, &valueArrayChatMessageContent); err == nil {
		c.ArrayChatMessageContent = valueArrayChatMessageContent
		return nil
	}
	valueImageChatMessageContent := new(ImageChatMessageContent)
	if err := json.Unmarshal(data, &valueImageChatMessageContent); err == nil {
		c.ImageChatMessageContent = valueImageChatMessageContent
		return nil
	}
	valueAudioChatMessageContent := new(AudioChatMessageContent)
	if err := json.Unmarshal(data, &valueAudioChatMessageContent); err == nil {
		c.AudioChatMessageContent = valueAudioChatMessageContent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ChatMessageContent) MarshalJSON() ([]byte, error) {
	if c.StringChatMessageContent != nil {
		return json.Marshal(c.StringChatMessageContent)
	}
	if c.FunctionCallChatMessageContent != nil {
		return json.Marshal(c.FunctionCallChatMessageContent)
	}
	if c.ArrayChatMessageContent != nil {
		return json.Marshal(c.ArrayChatMessageContent)
	}
	if c.ImageChatMessageContent != nil {
		return json.Marshal(c.ImageChatMessageContent)
	}
	if c.AudioChatMessageContent != nil {
		return json.Marshal(c.AudioChatMessageContent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ChatMessageContentVisitor interface {
	VisitStringChatMessageContent(*StringChatMessageContent) error
	VisitFunctionCallChatMessageContent(*FunctionCallChatMessageContent) error
	VisitArrayChatMessageContent(*ArrayChatMessageContent) error
	VisitImageChatMessageContent(*ImageChatMessageContent) error
	VisitAudioChatMessageContent(*AudioChatMessageContent) error
}

func (c *ChatMessageContent) Accept(visitor ChatMessageContentVisitor) error {
	if c.StringChatMessageContent != nil {
		return visitor.VisitStringChatMessageContent(c.StringChatMessageContent)
	}
	if c.FunctionCallChatMessageContent != nil {
		return visitor.VisitFunctionCallChatMessageContent(c.FunctionCallChatMessageContent)
	}
	if c.ArrayChatMessageContent != nil {
		return visitor.VisitArrayChatMessageContent(c.ArrayChatMessageContent)
	}
	if c.ImageChatMessageContent != nil {
		return visitor.VisitImageChatMessageContent(c.ImageChatMessageContent)
	}
	if c.AudioChatMessageContent != nil {
		return visitor.VisitAudioChatMessageContent(c.AudioChatMessageContent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ChatMessageContentRequest struct {
	StringChatMessageContentRequest       *StringChatMessageContentRequest
	FunctionCallChatMessageContentRequest *FunctionCallChatMessageContentRequest
	ArrayChatMessageContentRequest        *ArrayChatMessageContentRequest
	ImageChatMessageContentRequest        *ImageChatMessageContentRequest
	AudioChatMessageContentRequest        *AudioChatMessageContentRequest
}

func (c *ChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	valueStringChatMessageContentRequest := new(StringChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueStringChatMessageContentRequest); err == nil {
		c.StringChatMessageContentRequest = valueStringChatMessageContentRequest
		return nil
	}
	valueFunctionCallChatMessageContentRequest := new(FunctionCallChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueFunctionCallChatMessageContentRequest); err == nil {
		c.FunctionCallChatMessageContentRequest = valueFunctionCallChatMessageContentRequest
		return nil
	}
	valueArrayChatMessageContentRequest := new(ArrayChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueArrayChatMessageContentRequest); err == nil {
		c.ArrayChatMessageContentRequest = valueArrayChatMessageContentRequest
		return nil
	}
	valueImageChatMessageContentRequest := new(ImageChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueImageChatMessageContentRequest); err == nil {
		c.ImageChatMessageContentRequest = valueImageChatMessageContentRequest
		return nil
	}
	valueAudioChatMessageContentRequest := new(AudioChatMessageContentRequest)
	if err := json.Unmarshal(data, &valueAudioChatMessageContentRequest); err == nil {
		c.AudioChatMessageContentRequest = valueAudioChatMessageContentRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	if c.StringChatMessageContentRequest != nil {
		return json.Marshal(c.StringChatMessageContentRequest)
	}
	if c.FunctionCallChatMessageContentRequest != nil {
		return json.Marshal(c.FunctionCallChatMessageContentRequest)
	}
	if c.ArrayChatMessageContentRequest != nil {
		return json.Marshal(c.ArrayChatMessageContentRequest)
	}
	if c.ImageChatMessageContentRequest != nil {
		return json.Marshal(c.ImageChatMessageContentRequest)
	}
	if c.AudioChatMessageContentRequest != nil {
		return json.Marshal(c.AudioChatMessageContentRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type ChatMessageContentRequestVisitor interface {
	VisitStringChatMessageContentRequest(*StringChatMessageContentRequest) error
	VisitFunctionCallChatMessageContentRequest(*FunctionCallChatMessageContentRequest) error
	VisitArrayChatMessageContentRequest(*ArrayChatMessageContentRequest) error
	VisitImageChatMessageContentRequest(*ImageChatMessageContentRequest) error
	VisitAudioChatMessageContentRequest(*AudioChatMessageContentRequest) error
}

func (c *ChatMessageContentRequest) Accept(visitor ChatMessageContentRequestVisitor) error {
	if c.StringChatMessageContentRequest != nil {
		return visitor.VisitStringChatMessageContentRequest(c.StringChatMessageContentRequest)
	}
	if c.FunctionCallChatMessageContentRequest != nil {
		return visitor.VisitFunctionCallChatMessageContentRequest(c.FunctionCallChatMessageContentRequest)
	}
	if c.ArrayChatMessageContentRequest != nil {
		return visitor.VisitArrayChatMessageContentRequest(c.ArrayChatMessageContentRequest)
	}
	if c.ImageChatMessageContentRequest != nil {
		return visitor.VisitImageChatMessageContentRequest(c.ImageChatMessageContentRequest)
	}
	if c.AudioChatMessageContentRequest != nil {
		return visitor.VisitAudioChatMessageContentRequest(c.AudioChatMessageContentRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

// A block that represents a chat message in a prompt template.
type ChatMessagePromptBlock struct {
	State       *PromptBlockState                 `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig       `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Properties  *ChatMessagePromptBlockProperties `json:"properties" url:"properties"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessagePromptBlock) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessagePromptBlock) BlockType() string {
	return c.blockType
}

func (c *ChatMessagePromptBlock) UnmarshalJSON(data []byte) error {
	type embed ChatMessagePromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChatMessagePromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "CHAT_MESSAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_MESSAGE", unmarshaler.BlockType)
	}
	c.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *c, "block_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessagePromptBlock) MarshalJSON() ([]byte, error) {
	type embed ChatMessagePromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*c),
		BlockType: "CHAT_MESSAGE",
	}
	return json.Marshal(marshaler)
}

func (c *ChatMessagePromptBlock) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The properties of a ChatMessagePromptTemplateBlock
type ChatMessagePromptBlockProperties struct {
	Blocks                  []*PromptBlock   `json:"blocks" url:"blocks"`
	ChatRole                *ChatMessageRole `json:"chat_role,omitempty" url:"chat_role,omitempty"`
	ChatSource              *string          `json:"chat_source,omitempty" url:"chat_source,omitempty"`
	ChatMessageUnterminated *bool            `json:"chat_message_unterminated,omitempty" url:"chat_message_unterminated,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessagePromptBlockProperties) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessagePromptBlockProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessagePromptBlockProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessagePromptBlockProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessagePromptBlockProperties) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessageRequest struct {
	Text    *string                    `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole            `json:"role" url:"role"`
	Content *ChatMessageContentRequest `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessageRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessageRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessageRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// - `SYSTEM` - System
// - `ASSISTANT` - Assistant
// - `USER` - User
// - `FUNCTION` - Function
type ChatMessageRole string

const (
	ChatMessageRoleSystem    ChatMessageRole = "SYSTEM"
	ChatMessageRoleAssistant ChatMessageRole = "ASSISTANT"
	ChatMessageRoleUser      ChatMessageRole = "USER"
	ChatMessageRoleFunction  ChatMessageRole = "FUNCTION"
)

func NewChatMessageRoleFromString(s string) (ChatMessageRole, error) {
	switch s {
	case "SYSTEM":
		return ChatMessageRoleSystem, nil
	case "ASSISTANT":
		return ChatMessageRoleAssistant, nil
	case "USER":
		return ChatMessageRoleUser, nil
	case "FUNCTION":
		return ChatMessageRoleFunction, nil
	}
	var t ChatMessageRole
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChatMessageRole) Ptr() *ChatMessageRole {
	return &c
}

type CodeExecutionNodeArrayResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeArrayResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeArrayResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeArrayResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeArrayResult(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "ARRAY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeArrayResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeArrayResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeArrayResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeChatHistoryResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeChatHistoryResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeChatHistoryResult(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CHAT_HISTORY", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeChatHistoryResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeChatHistoryResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeChatHistoryResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeErrorResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeErrorResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeErrorResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeErrorResult(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "ERROR", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeErrorResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeErrorResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeErrorResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeFunctionCallResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeFunctionCallResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeFunctionCallResult(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "FUNCTION_CALL", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeFunctionCallResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeFunctionCallResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeFunctionCallResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeJsonResult struct {
	Id    string      `json:"id" url:"id"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeJsonResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeJsonResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeJsonResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeJsonResult(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "JSON", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeJsonResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeJsonResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeJsonResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeNumberResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeNumberResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeNumberResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeNumberResult(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "NUMBER", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeNumberResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeNumberResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeNumberResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A Node Result Event emitted from a Code Execution Node.
type CodeExecutionNodeResult struct {
	Data  *CodeExecutionNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "CODE_EXECUTION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CODE_EXECUTION", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CODE_EXECUTION",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultData struct {
	Output      *CodeExecutionNodeResultOutput `json:"output" url:"output"`
	LogOutputId *string                        `json:"log_output_id,omitempty" url:"log_output_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeResultData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultOutput struct {
	CodeExecutionNodeStringResult        *CodeExecutionNodeStringResult
	CodeExecutionNodeNumberResult        *CodeExecutionNodeNumberResult
	CodeExecutionNodeJsonResult          *CodeExecutionNodeJsonResult
	CodeExecutionNodeChatHistoryResult   *CodeExecutionNodeChatHistoryResult
	CodeExecutionNodeSearchResultsResult *CodeExecutionNodeSearchResultsResult
	CodeExecutionNodeErrorResult         *CodeExecutionNodeErrorResult
	CodeExecutionNodeArrayResult         *CodeExecutionNodeArrayResult
	CodeExecutionNodeFunctionCallResult  *CodeExecutionNodeFunctionCallResult
}

func (c *CodeExecutionNodeResultOutput) UnmarshalJSON(data []byte) error {
	valueCodeExecutionNodeStringResult := new(CodeExecutionNodeStringResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeStringResult); err == nil {
		c.CodeExecutionNodeStringResult = valueCodeExecutionNodeStringResult
		return nil
	}
	valueCodeExecutionNodeNumberResult := new(CodeExecutionNodeNumberResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeNumberResult); err == nil {
		c.CodeExecutionNodeNumberResult = valueCodeExecutionNodeNumberResult
		return nil
	}
	valueCodeExecutionNodeJsonResult := new(CodeExecutionNodeJsonResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeJsonResult); err == nil {
		c.CodeExecutionNodeJsonResult = valueCodeExecutionNodeJsonResult
		return nil
	}
	valueCodeExecutionNodeChatHistoryResult := new(CodeExecutionNodeChatHistoryResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeChatHistoryResult); err == nil {
		c.CodeExecutionNodeChatHistoryResult = valueCodeExecutionNodeChatHistoryResult
		return nil
	}
	valueCodeExecutionNodeSearchResultsResult := new(CodeExecutionNodeSearchResultsResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeSearchResultsResult); err == nil {
		c.CodeExecutionNodeSearchResultsResult = valueCodeExecutionNodeSearchResultsResult
		return nil
	}
	valueCodeExecutionNodeErrorResult := new(CodeExecutionNodeErrorResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeErrorResult); err == nil {
		c.CodeExecutionNodeErrorResult = valueCodeExecutionNodeErrorResult
		return nil
	}
	valueCodeExecutionNodeArrayResult := new(CodeExecutionNodeArrayResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeArrayResult); err == nil {
		c.CodeExecutionNodeArrayResult = valueCodeExecutionNodeArrayResult
		return nil
	}
	valueCodeExecutionNodeFunctionCallResult := new(CodeExecutionNodeFunctionCallResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeFunctionCallResult); err == nil {
		c.CodeExecutionNodeFunctionCallResult = valueCodeExecutionNodeFunctionCallResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CodeExecutionNodeResultOutput) MarshalJSON() ([]byte, error) {
	if c.CodeExecutionNodeStringResult != nil {
		return json.Marshal(c.CodeExecutionNodeStringResult)
	}
	if c.CodeExecutionNodeNumberResult != nil {
		return json.Marshal(c.CodeExecutionNodeNumberResult)
	}
	if c.CodeExecutionNodeJsonResult != nil {
		return json.Marshal(c.CodeExecutionNodeJsonResult)
	}
	if c.CodeExecutionNodeChatHistoryResult != nil {
		return json.Marshal(c.CodeExecutionNodeChatHistoryResult)
	}
	if c.CodeExecutionNodeSearchResultsResult != nil {
		return json.Marshal(c.CodeExecutionNodeSearchResultsResult)
	}
	if c.CodeExecutionNodeErrorResult != nil {
		return json.Marshal(c.CodeExecutionNodeErrorResult)
	}
	if c.CodeExecutionNodeArrayResult != nil {
		return json.Marshal(c.CodeExecutionNodeArrayResult)
	}
	if c.CodeExecutionNodeFunctionCallResult != nil {
		return json.Marshal(c.CodeExecutionNodeFunctionCallResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutionNodeResultOutputVisitor interface {
	VisitCodeExecutionNodeStringResult(*CodeExecutionNodeStringResult) error
	VisitCodeExecutionNodeNumberResult(*CodeExecutionNodeNumberResult) error
	VisitCodeExecutionNodeJsonResult(*CodeExecutionNodeJsonResult) error
	VisitCodeExecutionNodeChatHistoryResult(*CodeExecutionNodeChatHistoryResult) error
	VisitCodeExecutionNodeSearchResultsResult(*CodeExecutionNodeSearchResultsResult) error
	VisitCodeExecutionNodeErrorResult(*CodeExecutionNodeErrorResult) error
	VisitCodeExecutionNodeArrayResult(*CodeExecutionNodeArrayResult) error
	VisitCodeExecutionNodeFunctionCallResult(*CodeExecutionNodeFunctionCallResult) error
}

func (c *CodeExecutionNodeResultOutput) Accept(visitor CodeExecutionNodeResultOutputVisitor) error {
	if c.CodeExecutionNodeStringResult != nil {
		return visitor.VisitCodeExecutionNodeStringResult(c.CodeExecutionNodeStringResult)
	}
	if c.CodeExecutionNodeNumberResult != nil {
		return visitor.VisitCodeExecutionNodeNumberResult(c.CodeExecutionNodeNumberResult)
	}
	if c.CodeExecutionNodeJsonResult != nil {
		return visitor.VisitCodeExecutionNodeJsonResult(c.CodeExecutionNodeJsonResult)
	}
	if c.CodeExecutionNodeChatHistoryResult != nil {
		return visitor.VisitCodeExecutionNodeChatHistoryResult(c.CodeExecutionNodeChatHistoryResult)
	}
	if c.CodeExecutionNodeSearchResultsResult != nil {
		return visitor.VisitCodeExecutionNodeSearchResultsResult(c.CodeExecutionNodeSearchResultsResult)
	}
	if c.CodeExecutionNodeErrorResult != nil {
		return visitor.VisitCodeExecutionNodeErrorResult(c.CodeExecutionNodeErrorResult)
	}
	if c.CodeExecutionNodeArrayResult != nil {
		return visitor.VisitCodeExecutionNodeArrayResult(c.CodeExecutionNodeArrayResult)
	}
	if c.CodeExecutionNodeFunctionCallResult != nil {
		return visitor.VisitCodeExecutionNodeFunctionCallResult(c.CodeExecutionNodeFunctionCallResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutionNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeSearchResultsResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeSearchResultsResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeSearchResultsResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "SEARCH_RESULTS", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeSearchResultsResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeSearchResultsResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeSearchResultsResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeStringResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeStringResult) Type() string {
	return c.type_
}

func (c *CodeExecutionNodeStringResult) UnmarshalJSON(data []byte) error {
	type embed CodeExecutionNodeStringResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutionNodeStringResult(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "STRING", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeStringResult) MarshalJSON() ([]byte, error) {
	type embed CodeExecutionNodeStringResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutionNodeStringResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionPackageRequest struct {
	Version string `json:"version" url:"version"`
	Name    string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionPackageRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionPackageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionPackageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionPackageRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionPackageRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// - `PYTHON_3_11_6` - PYTHON_3_11_6
// - `TYPESCRIPT_5_3_3` - TYPESCRIPT_5_3_3
type CodeExecutionRuntime string

const (
	CodeExecutionRuntimePython3116    CodeExecutionRuntime = "PYTHON_3_11_6"
	CodeExecutionRuntimeTypescript533 CodeExecutionRuntime = "TYPESCRIPT_5_3_3"
)

func NewCodeExecutionRuntimeFromString(s string) (CodeExecutionRuntime, error) {
	switch s {
	case "PYTHON_3_11_6":
		return CodeExecutionRuntimePython3116, nil
	case "TYPESCRIPT_5_3_3":
		return CodeExecutionRuntimeTypescript533, nil
	}
	var t CodeExecutionRuntime
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CodeExecutionRuntime) Ptr() *CodeExecutionRuntime {
	return &c
}

type CodeExecutorInputRequest struct {
	StringInputRequest             *StringInputRequest
	JsonInputRequest               *JsonInputRequest
	ChatHistoryInputRequest        *ChatHistoryInputRequest
	NumberInputRequest             *NumberInputRequest
	SearchResultsInputRequest      *SearchResultsInputRequest
	ErrorInputRequest              *ErrorInputRequest
	ArrayInputRequest              *ArrayInputRequest
	FunctionCallInputRequest       *FunctionCallInputRequest
	CodeExecutorSecretInputRequest *CodeExecutorSecretInputRequest
}

func (c *CodeExecutorInputRequest) UnmarshalJSON(data []byte) error {
	valueStringInputRequest := new(StringInputRequest)
	if err := json.Unmarshal(data, &valueStringInputRequest); err == nil {
		c.StringInputRequest = valueStringInputRequest
		return nil
	}
	valueJsonInputRequest := new(JsonInputRequest)
	if err := json.Unmarshal(data, &valueJsonInputRequest); err == nil {
		c.JsonInputRequest = valueJsonInputRequest
		return nil
	}
	valueChatHistoryInputRequest := new(ChatHistoryInputRequest)
	if err := json.Unmarshal(data, &valueChatHistoryInputRequest); err == nil {
		c.ChatHistoryInputRequest = valueChatHistoryInputRequest
		return nil
	}
	valueNumberInputRequest := new(NumberInputRequest)
	if err := json.Unmarshal(data, &valueNumberInputRequest); err == nil {
		c.NumberInputRequest = valueNumberInputRequest
		return nil
	}
	valueSearchResultsInputRequest := new(SearchResultsInputRequest)
	if err := json.Unmarshal(data, &valueSearchResultsInputRequest); err == nil {
		c.SearchResultsInputRequest = valueSearchResultsInputRequest
		return nil
	}
	valueErrorInputRequest := new(ErrorInputRequest)
	if err := json.Unmarshal(data, &valueErrorInputRequest); err == nil {
		c.ErrorInputRequest = valueErrorInputRequest
		return nil
	}
	valueArrayInputRequest := new(ArrayInputRequest)
	if err := json.Unmarshal(data, &valueArrayInputRequest); err == nil {
		c.ArrayInputRequest = valueArrayInputRequest
		return nil
	}
	valueFunctionCallInputRequest := new(FunctionCallInputRequest)
	if err := json.Unmarshal(data, &valueFunctionCallInputRequest); err == nil {
		c.FunctionCallInputRequest = valueFunctionCallInputRequest
		return nil
	}
	valueCodeExecutorSecretInputRequest := new(CodeExecutorSecretInputRequest)
	if err := json.Unmarshal(data, &valueCodeExecutorSecretInputRequest); err == nil {
		c.CodeExecutorSecretInputRequest = valueCodeExecutorSecretInputRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CodeExecutorInputRequest) MarshalJSON() ([]byte, error) {
	if c.StringInputRequest != nil {
		return json.Marshal(c.StringInputRequest)
	}
	if c.JsonInputRequest != nil {
		return json.Marshal(c.JsonInputRequest)
	}
	if c.ChatHistoryInputRequest != nil {
		return json.Marshal(c.ChatHistoryInputRequest)
	}
	if c.NumberInputRequest != nil {
		return json.Marshal(c.NumberInputRequest)
	}
	if c.SearchResultsInputRequest != nil {
		return json.Marshal(c.SearchResultsInputRequest)
	}
	if c.ErrorInputRequest != nil {
		return json.Marshal(c.ErrorInputRequest)
	}
	if c.ArrayInputRequest != nil {
		return json.Marshal(c.ArrayInputRequest)
	}
	if c.FunctionCallInputRequest != nil {
		return json.Marshal(c.FunctionCallInputRequest)
	}
	if c.CodeExecutorSecretInputRequest != nil {
		return json.Marshal(c.CodeExecutorSecretInputRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutorInputRequestVisitor interface {
	VisitStringInputRequest(*StringInputRequest) error
	VisitJsonInputRequest(*JsonInputRequest) error
	VisitChatHistoryInputRequest(*ChatHistoryInputRequest) error
	VisitNumberInputRequest(*NumberInputRequest) error
	VisitSearchResultsInputRequest(*SearchResultsInputRequest) error
	VisitErrorInputRequest(*ErrorInputRequest) error
	VisitArrayInputRequest(*ArrayInputRequest) error
	VisitFunctionCallInputRequest(*FunctionCallInputRequest) error
	VisitCodeExecutorSecretInputRequest(*CodeExecutorSecretInputRequest) error
}

func (c *CodeExecutorInputRequest) Accept(visitor CodeExecutorInputRequestVisitor) error {
	if c.StringInputRequest != nil {
		return visitor.VisitStringInputRequest(c.StringInputRequest)
	}
	if c.JsonInputRequest != nil {
		return visitor.VisitJsonInputRequest(c.JsonInputRequest)
	}
	if c.ChatHistoryInputRequest != nil {
		return visitor.VisitChatHistoryInputRequest(c.ChatHistoryInputRequest)
	}
	if c.NumberInputRequest != nil {
		return visitor.VisitNumberInputRequest(c.NumberInputRequest)
	}
	if c.SearchResultsInputRequest != nil {
		return visitor.VisitSearchResultsInputRequest(c.SearchResultsInputRequest)
	}
	if c.ErrorInputRequest != nil {
		return visitor.VisitErrorInputRequest(c.ErrorInputRequest)
	}
	if c.ArrayInputRequest != nil {
		return visitor.VisitArrayInputRequest(c.ArrayInputRequest)
	}
	if c.FunctionCallInputRequest != nil {
		return visitor.VisitFunctionCallInputRequest(c.FunctionCallInputRequest)
	}
	if c.CodeExecutorSecretInputRequest != nil {
		return visitor.VisitCodeExecutorSecretInputRequest(c.CodeExecutorSecretInputRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CodeExecutorResponse struct {
	Log    string       `json:"log" url:"log"`
	Output *VellumValue `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutorResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutorResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutorResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A user input representing a Vellum Workspace Secret value
type CodeExecutorSecretInputRequest struct {
	// The variable's name
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutorSecretInputRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutorSecretInputRequest) Type() string {
	return c.type_
}

func (c *CodeExecutorSecretInputRequest) UnmarshalJSON(data []byte) error {
	type embed CodeExecutorSecretInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CodeExecutorSecretInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "SECRET" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "SECRET", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutorSecretInputRequest) MarshalJSON() ([]byte, error) {
	type embed CodeExecutorSecretInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "SECRET",
	}
	return json.Marshal(marshaler)
}

func (c *CodeExecutorSecretInputRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompilePromptDeploymentExpandMetaRequest struct {
	// If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`
	// If enabled, the response will include the release tag of the Prompt Deployment.
	DeploymentReleaseTag *bool `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	// If enabled, the response will include the ID of the Prompt Version backing the deployment.
	PromptVersionId *bool `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompilePromptDeploymentExpandMetaRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompilePromptDeploymentExpandMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CompilePromptDeploymentExpandMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompilePromptDeploymentExpandMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompilePromptDeploymentExpandMetaRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The subset of the metadata tracked by Vellum during Prompt Deployment compilation that the request opted into with `expand_meta`.
type CompilePromptMeta struct {
	ModelName            *string `json:"model_name,omitempty" url:"model_name,omitempty"`
	DeploymentReleaseTag *string `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompilePromptMeta) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompilePromptMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler CompilePromptMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompilePromptMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompilePromptMeta) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ComponentsSchemasPdfSearchResultMetaSource = *PdfSearchResultMetaSource

type ComponentsSchemasPdfSearchResultMetaSourceRequest = *PdfSearchResultMetaSourceRequest

// - `OR` - OR
// - `AND` - AND
type ConditionCombinator string

const (
	ConditionCombinatorOr  ConditionCombinator = "OR"
	ConditionCombinatorAnd ConditionCombinator = "AND"
)

func NewConditionCombinatorFromString(s string) (ConditionCombinator, error) {
	switch s {
	case "OR":
		return ConditionCombinatorOr, nil
	case "AND":
		return ConditionCombinatorAnd, nil
	}
	var t ConditionCombinator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConditionCombinator) Ptr() *ConditionCombinator {
	return &c
}

// A Node Result Event emitted from a Conditional Node.
type ConditionalNodeResult struct {
	Data  *ConditionalNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ConditionalNodeResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionalNodeResult) Type() string {
	return c.type_
}

func (c *ConditionalNodeResult) UnmarshalJSON(data []byte) error {
	type embed ConditionalNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConditionalNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "CONDITIONAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "CONDITIONAL", unmarshaler.Type)
	}
	c.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *c, "type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResult) MarshalJSON() ([]byte, error) {
	type embed ConditionalNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*c),
		Type:  "CONDITIONAL",
	}
	return json.Marshal(marshaler)
}

func (c *ConditionalNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConditionalNodeResultData struct {
	SourceHandleId *string `json:"source_handle_id,omitempty" url:"source_handle_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ConditionalNodeResultData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ContainerImageRead struct {
	Id         string           `json:"id" url:"id"`
	Name       string           `json:"name" url:"name"`
	Visibility EntityVisibility `json:"visibility" url:"visibility"`
	Created    time.Time        `json:"created" url:"created"`
	Modified   time.Time        `json:"modified" url:"modified"`
	Repository string           `json:"repository" url:"repository"`
	Sha        string           `json:"sha" url:"sha"`
	Tags       []string         `json:"tags" url:"tags"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ContainerImageRead) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContainerImageRead) UnmarshalJSON(data []byte) error {
	type embed ContainerImageRead
	var unmarshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ContainerImageRead(unmarshaler.embed)
	c.Created = unmarshaler.Created.Time()
	c.Modified = unmarshaler.Modified.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContainerImageRead) MarshalJSON() ([]byte, error) {
	type embed ContainerImageRead
	var marshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed:    embed(*c),
		Created:  core.NewDateTime(c.Created),
		Modified: core.NewDateTime(c.Modified),
	}
	return json.Marshal(marshaler)
}

func (c *ContainerImageRead) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Information about the Test Case to create
type CreateTestSuiteTestCaseRequest struct {
	// A human-readable label used to convey the intention of this Test Case
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// Values for each of the Test Case's input variables
	InputValues []*NamedTestCaseVariableValueRequest `json:"input_values" url:"input_values"`
	// Values for each of the Test Case's evaluation variables
	EvaluationValues []*NamedTestCaseVariableValueRequest `json:"evaluation_values" url:"evaluation_values"`
	// Optionally provide an ID that uniquely identifies this Test Case in your system. Useful for updating this Test Cases data after initial creation. Cannot be changed later.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTestSuiteTestCaseRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTestSuiteTestCaseRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTestSuiteTestCaseRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTestSuiteTestCaseRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTestSuiteTestCaseRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeploymentProviderPayloadResponse struct {
	Payload *DeploymentProviderPayloadResponsePayload `json:"payload" url:"payload"`
	Meta    *CompilePromptMeta                        `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentProviderPayloadResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentProviderPayloadResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeploymentProviderPayloadResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeploymentProviderPayloadResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentProviderPayloadResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentProviderPayloadResponsePayload struct {
	StringUnknownMap map[string]interface{}
	String           string
}

func (d *DeploymentProviderPayloadResponsePayload) UnmarshalJSON(data []byte) error {
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		d.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		d.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DeploymentProviderPayloadResponsePayload) MarshalJSON() ([]byte, error) {
	if d.StringUnknownMap != nil {
		return json.Marshal(d.StringUnknownMap)
	}
	if d.String != "" {
		return json.Marshal(d.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DeploymentProviderPayloadResponsePayloadVisitor interface {
	VisitStringUnknownMap(map[string]interface{}) error
	VisitString(string) error
}

func (d *DeploymentProviderPayloadResponsePayload) Accept(visitor DeploymentProviderPayloadResponsePayloadVisitor) error {
	if d.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(d.StringUnknownMap)
	}
	if d.String != "" {
		return visitor.VisitString(d.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DeploymentRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum  `json:"environment,omitempty" url:"environment,omitempty"`
	LastDeployedOn time.Time         `json:"last_deployed_on" url:"last_deployed_on"`
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// A human-readable description of the deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Deprecated. The Prompt execution endpoints return a `prompt_version_id` that could be used instead.
	ActiveModelVersionIds []string `json:"active_model_version_ids" url:"active_model_version_ids"`
	// The ID of the history item associated with this Deployment's LATEST Release Tag
	LastDeployedHistoryItemId string `json:"last_deployed_history_item_id" url:"last_deployed_history_item_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentRead) UnmarshalJSON(data []byte) error {
	type embed DeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeploymentRead(unmarshaler.embed)
	d.Created = unmarshaler.Created.Time()
	d.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentRead) MarshalJSON() ([]byte, error) {
	type embed DeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*d),
		Created:        core.NewDateTime(d.Created),
		LastDeployedOn: core.NewDateTime(d.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (d *DeploymentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentReleaseTagDeploymentHistoryItem struct {
	Id        string    `json:"id" url:"id"`
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) UnmarshalJSON(data []byte) error {
	type embed DeploymentReleaseTagDeploymentHistoryItem
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeploymentReleaseTagDeploymentHistoryItem(unmarshaler.embed)
	d.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) MarshalJSON() ([]byte, error) {
	type embed DeploymentReleaseTagDeploymentHistoryItem
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*d),
		Timestamp: core.NewDateTime(d.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentReleaseTagRead struct {
	// The name of the Release Tag
	Name string `json:"name" url:"name"`
	// The source of how the Release Tag was originally created
	//
	// - `SYSTEM` - System
	// - `USER` - User
	Source ReleaseTagSource `json:"source" url:"source"`
	// The Deployment History Item that this Release Tag is associated with
	HistoryItem *DeploymentReleaseTagDeploymentHistoryItem `json:"history_item" url:"history_item"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentReleaseTagRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentReleaseTagRead) UnmarshalJSON(data []byte) error {
	type unmarshaler DeploymentReleaseTagRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeploymentReleaseTagRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentReleaseTagRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DockerServiceToken struct {
	AccessToken    string `json:"access_token" url:"access_token"`
	OrganizationId string `json:"organization_id" url:"organization_id"`
	Repository     string `json:"repository" url:"repository"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DockerServiceToken) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DockerServiceToken) UnmarshalJSON(data []byte) error {
	type unmarshaler DockerServiceToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DockerServiceToken(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DockerServiceToken) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentDocumentToDocumentIndex struct {
	// Vellum-generated ID that uniquely identifies this link.
	Id string `json:"id" url:"id"`
	// Vellum-generated ID that uniquely identifies the index this document is included in.
	DocumentIndexId string `json:"document_index_id" url:"document_index_id"`
	// An enum value representing where this document is along its indexing lifecycle for this index.
	//
	// - `AWAITING_PROCESSING` - Awaiting Processing
	// - `QUEUED` - Queued
	// - `INDEXING` - Indexing
	// - `INDEXED` - Indexed
	// - `FAILED` - Failed
	IndexingState *IndexingStateEnum `json:"indexing_state,omitempty" url:"indexing_state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentDocumentToDocumentIndex) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentDocumentToDocumentIndex) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentDocumentToDocumentIndex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentDocumentToDocumentIndex(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentDocumentToDocumentIndex) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexChunking struct {
	ReductoChunking                *ReductoChunking
	SentenceChunking               *SentenceChunking
	TokenOverlappingWindowChunking *TokenOverlappingWindowChunking
}

func (d *DocumentIndexChunking) UnmarshalJSON(data []byte) error {
	valueReductoChunking := new(ReductoChunking)
	if err := json.Unmarshal(data, &valueReductoChunking); err == nil {
		d.ReductoChunking = valueReductoChunking
		return nil
	}
	valueSentenceChunking := new(SentenceChunking)
	if err := json.Unmarshal(data, &valueSentenceChunking); err == nil {
		d.SentenceChunking = valueSentenceChunking
		return nil
	}
	valueTokenOverlappingWindowChunking := new(TokenOverlappingWindowChunking)
	if err := json.Unmarshal(data, &valueTokenOverlappingWindowChunking); err == nil {
		d.TokenOverlappingWindowChunking = valueTokenOverlappingWindowChunking
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DocumentIndexChunking) MarshalJSON() ([]byte, error) {
	if d.ReductoChunking != nil {
		return json.Marshal(d.ReductoChunking)
	}
	if d.SentenceChunking != nil {
		return json.Marshal(d.SentenceChunking)
	}
	if d.TokenOverlappingWindowChunking != nil {
		return json.Marshal(d.TokenOverlappingWindowChunking)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DocumentIndexChunkingVisitor interface {
	VisitReductoChunking(*ReductoChunking) error
	VisitSentenceChunking(*SentenceChunking) error
	VisitTokenOverlappingWindowChunking(*TokenOverlappingWindowChunking) error
}

func (d *DocumentIndexChunking) Accept(visitor DocumentIndexChunkingVisitor) error {
	if d.ReductoChunking != nil {
		return visitor.VisitReductoChunking(d.ReductoChunking)
	}
	if d.SentenceChunking != nil {
		return visitor.VisitSentenceChunking(d.SentenceChunking)
	}
	if d.TokenOverlappingWindowChunking != nil {
		return visitor.VisitTokenOverlappingWindowChunking(d.TokenOverlappingWindowChunking)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DocumentIndexChunkingRequest struct {
	ReductoChunkingRequest                *ReductoChunkingRequest
	SentenceChunkingRequest               *SentenceChunkingRequest
	TokenOverlappingWindowChunkingRequest *TokenOverlappingWindowChunkingRequest
}

func (d *DocumentIndexChunkingRequest) UnmarshalJSON(data []byte) error {
	valueReductoChunkingRequest := new(ReductoChunkingRequest)
	if err := json.Unmarshal(data, &valueReductoChunkingRequest); err == nil {
		d.ReductoChunkingRequest = valueReductoChunkingRequest
		return nil
	}
	valueSentenceChunkingRequest := new(SentenceChunkingRequest)
	if err := json.Unmarshal(data, &valueSentenceChunkingRequest); err == nil {
		d.SentenceChunkingRequest = valueSentenceChunkingRequest
		return nil
	}
	valueTokenOverlappingWindowChunkingRequest := new(TokenOverlappingWindowChunkingRequest)
	if err := json.Unmarshal(data, &valueTokenOverlappingWindowChunkingRequest); err == nil {
		d.TokenOverlappingWindowChunkingRequest = valueTokenOverlappingWindowChunkingRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DocumentIndexChunkingRequest) MarshalJSON() ([]byte, error) {
	if d.ReductoChunkingRequest != nil {
		return json.Marshal(d.ReductoChunkingRequest)
	}
	if d.SentenceChunkingRequest != nil {
		return json.Marshal(d.SentenceChunkingRequest)
	}
	if d.TokenOverlappingWindowChunkingRequest != nil {
		return json.Marshal(d.TokenOverlappingWindowChunkingRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DocumentIndexChunkingRequestVisitor interface {
	VisitReductoChunkingRequest(*ReductoChunkingRequest) error
	VisitSentenceChunkingRequest(*SentenceChunkingRequest) error
	VisitTokenOverlappingWindowChunkingRequest(*TokenOverlappingWindowChunkingRequest) error
}

func (d *DocumentIndexChunkingRequest) Accept(visitor DocumentIndexChunkingRequestVisitor) error {
	if d.ReductoChunkingRequest != nil {
		return visitor.VisitReductoChunkingRequest(d.ReductoChunkingRequest)
	}
	if d.SentenceChunkingRequest != nil {
		return visitor.VisitSentenceChunkingRequest(d.SentenceChunkingRequest)
	}
	if d.TokenOverlappingWindowChunkingRequest != nil {
		return visitor.VisitTokenOverlappingWindowChunkingRequest(d.TokenOverlappingWindowChunkingRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DocumentIndexIndexingConfig struct {
	Vectorizer *IndexingConfigVectorizer `json:"vectorizer" url:"vectorizer"`
	Chunking   *DocumentIndexChunking    `json:"chunking,omitempty" url:"chunking,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentIndexIndexingConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentIndexIndexingConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentIndexIndexingConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentIndexIndexingConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexIndexingConfig) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexIndexingConfigRequest struct {
	Vectorizer *IndexingConfigVectorizerRequest `json:"vectorizer" url:"vectorizer"`
	Chunking   *DocumentIndexChunkingRequest    `json:"chunking,omitempty" url:"chunking,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentIndexIndexingConfigRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentIndexIndexingConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentIndexIndexingConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentIndexIndexingConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexIndexingConfigRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the document index
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this index within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the document index
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this document index is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum             `json:"environment,omitempty" url:"environment,omitempty"`
	IndexingConfig *DocumentIndexIndexingConfig `json:"indexing_config" url:"indexing_config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentIndexRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentIndexRead) UnmarshalJSON(data []byte) error {
	type embed DocumentIndexRead
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentIndexRead(unmarshaler.embed)
	d.Created = unmarshaler.Created.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexRead) MarshalJSON() ([]byte, error) {
	type embed DocumentIndexRead
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*d),
		Created: core.NewDateTime(d.Created),
	}
	return json.Marshal(marshaler)
}

func (d *DocumentIndexRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentRead struct {
	Id string `json:"id" url:"id"`
	// The unique id of this document as it exists in the user's system.
	ExternalId     *string   `json:"external_id,omitempty" url:"external_id,omitempty"`
	LastUploadedAt time.Time `json:"last_uploaded_at" url:"last_uploaded_at"`
	// A human-readable label for the document. Defaults to the originally uploaded file's file name.
	Label string `json:"label" url:"label"`
	// The current processing state of the document
	//
	// - `QUEUED` - Queued
	// - `PROCESSING` - Processing
	// - `PROCESSED` - Processed
	// - `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty" url:"processing_state,omitempty"`
	// The current status of the document
	//
	// - `ACTIVE` - Active
	Status                    *DocumentStatus                    `json:"status,omitempty" url:"status,omitempty"`
	OriginalFileUrl           *string                            `json:"original_file_url,omitempty" url:"original_file_url,omitempty"`
	ProcessedFileUrl          *string                            `json:"processed_file_url,omitempty" url:"processed_file_url,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes" url:"document_to_document_indexes"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentRead) UnmarshalJSON(data []byte) error {
	type embed DocumentRead
	var unmarshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentRead(unmarshaler.embed)
	d.LastUploadedAt = unmarshaler.LastUploadedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentRead) MarshalJSON() ([]byte, error) {
	type embed DocumentRead
	var marshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed:          embed(*d),
		LastUploadedAt: core.NewDateTime(d.LastUploadedAt),
	}
	return json.Marshal(marshaler)
}

func (d *DocumentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// - `ACTIVE` - Active
type DocumentStatus = string

type EnrichedNormalizedCompletion struct {
	// The Vellum-generated ID of the completion.
	Id string `json:"id" url:"id"`
	// The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// The text generated by the LLM.
	Text string `json:"text" url:"text"`
	// The reason the generation finished.
	//
	// - `LENGTH` - LENGTH
	// - `STOP` - STOP
	// - `UNKNOWN` - UNKNOWN
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	// The logprobs of the completion. Only present if specified in the original request options.
	Logprobs *NormalizedLogProbs `json:"logprobs,omitempty" url:"logprobs,omitempty"`
	// The ID of the model version used to generate this completion.
	ModelVersionId       *string             `json:"model_version_id,omitempty" url:"model_version_id,omitempty"`
	PromptVersionId      string              `json:"prompt_version_id" url:"prompt_version_id"`
	Type                 *VellumVariableType `json:"type,omitempty" url:"type,omitempty"`
	DeploymentReleaseTag string              `json:"deployment_release_tag" url:"deployment_release_tag"`
	ModelName            string              `json:"model_name" url:"model_name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EnrichedNormalizedCompletion) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnrichedNormalizedCompletion) UnmarshalJSON(data []byte) error {
	type unmarshaler EnrichedNormalizedCompletion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnrichedNormalizedCompletion(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnrichedNormalizedCompletion) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `ACTIVE` - Active
// - `ARCHIVED` - Archived
type EntityStatus string

const (
	EntityStatusActive   EntityStatus = "ACTIVE"
	EntityStatusArchived EntityStatus = "ARCHIVED"
)

func NewEntityStatusFromString(s string) (EntityStatus, error) {
	switch s {
	case "ACTIVE":
		return EntityStatusActive, nil
	case "ARCHIVED":
		return EntityStatusArchived, nil
	}
	var t EntityStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityStatus) Ptr() *EntityStatus {
	return &e
}

// - `DEFAULT` - Default
// - `PUBLIC` - Public
// - `PRIVATE` - Private
// - `DISABLED` - Disabled
type EntityVisibility string

const (
	EntityVisibilityDefault  EntityVisibility = "DEFAULT"
	EntityVisibilityPublic   EntityVisibility = "PUBLIC"
	EntityVisibilityPrivate  EntityVisibility = "PRIVATE"
	EntityVisibilityDisabled EntityVisibility = "DISABLED"
)

func NewEntityVisibilityFromString(s string) (EntityVisibility, error) {
	switch s {
	case "DEFAULT":
		return EntityVisibilityDefault, nil
	case "PUBLIC":
		return EntityVisibilityPublic, nil
	case "PRIVATE":
		return EntityVisibilityPrivate, nil
	case "DISABLED":
		return EntityVisibilityDisabled, nil
	}
	var t EntityVisibility
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityVisibility) Ptr() *EntityVisibility {
	return &e
}

// - `DEVELOPMENT` - Development
// - `STAGING` - Staging
// - `PRODUCTION` - Production
type EnvironmentEnum string

const (
	EnvironmentEnumDevelopment EnvironmentEnum = "DEVELOPMENT"
	EnvironmentEnumStaging     EnvironmentEnum = "STAGING"
	EnvironmentEnumProduction  EnvironmentEnum = "PRODUCTION"
)

func NewEnvironmentEnumFromString(s string) (EnvironmentEnum, error) {
	switch s {
	case "DEVELOPMENT":
		return EnvironmentEnumDevelopment, nil
	case "STAGING":
		return EnvironmentEnumStaging, nil
	case "PRODUCTION":
		return EnvironmentEnumProduction, nil
	}
	var t EnvironmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnvironmentEnum) Ptr() *EnvironmentEnum {
	return &e
}

type EphemeralPromptCacheConfig struct {
	Type *EphemeralPromptCacheConfigTypeEnum `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EphemeralPromptCacheConfig) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EphemeralPromptCacheConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler EphemeralPromptCacheConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EphemeralPromptCacheConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EphemeralPromptCacheConfig) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `EPHEMERAL` - EPHEMERAL
type EphemeralPromptCacheConfigTypeEnum = string

// A user input representing a Vellum Error value
type ErrorInputRequest struct {
	// The variable's name
	Name  string              `json:"name" url:"name"`
	Value *VellumErrorRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorInputRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorInputRequest) Type() string {
	return e.type_
}

func (e *ErrorInputRequest) UnmarshalJSON(data []byte) error {
	type embed ErrorInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ErrorInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorInputRequest) MarshalJSON() ([]byte, error) {
	type embed ErrorInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ErrorInputRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorVariableValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVariableValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVariableValue) Type() string {
	return e.type_
}

func (e *ErrorVariableValue) UnmarshalJSON(data []byte) error {
	type embed ErrorVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ErrorVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVariableValue) MarshalJSON() ([]byte, error) {
	type embed ErrorVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ErrorVariableValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ErrorVellumValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVellumValue) Type() string {
	return e.type_
}

func (e *ErrorVellumValue) UnmarshalJSON(data []byte) error {
	type embed ErrorVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ErrorVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVellumValue) MarshalJSON() ([]byte, error) {
	type embed ErrorVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ErrorVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ErrorVellumValueRequest struct {
	Value *VellumErrorRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVellumValueRequest) Type() string {
	return e.type_
}

func (e *ErrorVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ErrorVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ErrorVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ErrorVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ErrorVellumValueRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutePromptEvent struct {
	InitiatedExecutePromptEvent *InitiatedExecutePromptEvent
	StreamingExecutePromptEvent *StreamingExecutePromptEvent
	FulfilledExecutePromptEvent *FulfilledExecutePromptEvent
	RejectedExecutePromptEvent  *RejectedExecutePromptEvent
}

func (e *ExecutePromptEvent) UnmarshalJSON(data []byte) error {
	valueInitiatedExecutePromptEvent := new(InitiatedExecutePromptEvent)
	if err := json.Unmarshal(data, &valueInitiatedExecutePromptEvent); err == nil {
		e.InitiatedExecutePromptEvent = valueInitiatedExecutePromptEvent
		return nil
	}
	valueStreamingExecutePromptEvent := new(StreamingExecutePromptEvent)
	if err := json.Unmarshal(data, &valueStreamingExecutePromptEvent); err == nil {
		e.StreamingExecutePromptEvent = valueStreamingExecutePromptEvent
		return nil
	}
	valueFulfilledExecutePromptEvent := new(FulfilledExecutePromptEvent)
	if err := json.Unmarshal(data, &valueFulfilledExecutePromptEvent); err == nil {
		e.FulfilledExecutePromptEvent = valueFulfilledExecutePromptEvent
		return nil
	}
	valueRejectedExecutePromptEvent := new(RejectedExecutePromptEvent)
	if err := json.Unmarshal(data, &valueRejectedExecutePromptEvent); err == nil {
		e.RejectedExecutePromptEvent = valueRejectedExecutePromptEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecutePromptEvent) MarshalJSON() ([]byte, error) {
	if e.InitiatedExecutePromptEvent != nil {
		return json.Marshal(e.InitiatedExecutePromptEvent)
	}
	if e.StreamingExecutePromptEvent != nil {
		return json.Marshal(e.StreamingExecutePromptEvent)
	}
	if e.FulfilledExecutePromptEvent != nil {
		return json.Marshal(e.FulfilledExecutePromptEvent)
	}
	if e.RejectedExecutePromptEvent != nil {
		return json.Marshal(e.RejectedExecutePromptEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutePromptEventVisitor interface {
	VisitInitiatedExecutePromptEvent(*InitiatedExecutePromptEvent) error
	VisitStreamingExecutePromptEvent(*StreamingExecutePromptEvent) error
	VisitFulfilledExecutePromptEvent(*FulfilledExecutePromptEvent) error
	VisitRejectedExecutePromptEvent(*RejectedExecutePromptEvent) error
}

func (e *ExecutePromptEvent) Accept(visitor ExecutePromptEventVisitor) error {
	if e.InitiatedExecutePromptEvent != nil {
		return visitor.VisitInitiatedExecutePromptEvent(e.InitiatedExecutePromptEvent)
	}
	if e.StreamingExecutePromptEvent != nil {
		return visitor.VisitStreamingExecutePromptEvent(e.StreamingExecutePromptEvent)
	}
	if e.FulfilledExecutePromptEvent != nil {
		return visitor.VisitFulfilledExecutePromptEvent(e.FulfilledExecutePromptEvent)
	}
	if e.RejectedExecutePromptEvent != nil {
		return visitor.VisitRejectedExecutePromptEvent(e.RejectedExecutePromptEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutePromptResponse struct {
	FulfilledExecutePromptResponse *FulfilledExecutePromptResponse
	RejectedExecutePromptResponse  *RejectedExecutePromptResponse
}

func (e *ExecutePromptResponse) UnmarshalJSON(data []byte) error {
	valueFulfilledExecutePromptResponse := new(FulfilledExecutePromptResponse)
	if err := json.Unmarshal(data, &valueFulfilledExecutePromptResponse); err == nil {
		e.FulfilledExecutePromptResponse = valueFulfilledExecutePromptResponse
		return nil
	}
	valueRejectedExecutePromptResponse := new(RejectedExecutePromptResponse)
	if err := json.Unmarshal(data, &valueRejectedExecutePromptResponse); err == nil {
		e.RejectedExecutePromptResponse = valueRejectedExecutePromptResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecutePromptResponse) MarshalJSON() ([]byte, error) {
	if e.FulfilledExecutePromptResponse != nil {
		return json.Marshal(e.FulfilledExecutePromptResponse)
	}
	if e.RejectedExecutePromptResponse != nil {
		return json.Marshal(e.RejectedExecutePromptResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutePromptResponseVisitor interface {
	VisitFulfilledExecutePromptResponse(*FulfilledExecutePromptResponse) error
	VisitRejectedExecutePromptResponse(*RejectedExecutePromptResponse) error
}

func (e *ExecutePromptResponse) Accept(visitor ExecutePromptResponseVisitor) error {
	if e.FulfilledExecutePromptResponse != nil {
		return visitor.VisitFulfilledExecutePromptResponse(e.FulfilledExecutePromptResponse)
	}
	if e.RejectedExecutePromptResponse != nil {
		return visitor.VisitRejectedExecutePromptResponse(e.RejectedExecutePromptResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteWorkflowResponse struct {
	ExecutionId string                              `json:"execution_id" url:"execution_id"`
	RunId       *string                             `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                             `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *ExecuteWorkflowWorkflowResultEvent `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecuteWorkflowResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecuteWorkflowResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteWorkflowResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteWorkflowResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteWorkflowResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteWorkflowWorkflowResultEvent struct {
	FulfilledExecuteWorkflowWorkflowResultEvent *FulfilledExecuteWorkflowWorkflowResultEvent
	RejectedExecuteWorkflowWorkflowResultEvent  *RejectedExecuteWorkflowWorkflowResultEvent
}

func (e *ExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	valueFulfilledExecuteWorkflowWorkflowResultEvent := new(FulfilledExecuteWorkflowWorkflowResultEvent)
	if err := json.Unmarshal(data, &valueFulfilledExecuteWorkflowWorkflowResultEvent); err == nil {
		e.FulfilledExecuteWorkflowWorkflowResultEvent = valueFulfilledExecuteWorkflowWorkflowResultEvent
		return nil
	}
	valueRejectedExecuteWorkflowWorkflowResultEvent := new(RejectedExecuteWorkflowWorkflowResultEvent)
	if err := json.Unmarshal(data, &valueRejectedExecuteWorkflowWorkflowResultEvent); err == nil {
		e.RejectedExecuteWorkflowWorkflowResultEvent = valueRejectedExecuteWorkflowWorkflowResultEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	if e.FulfilledExecuteWorkflowWorkflowResultEvent != nil {
		return json.Marshal(e.FulfilledExecuteWorkflowWorkflowResultEvent)
	}
	if e.RejectedExecuteWorkflowWorkflowResultEvent != nil {
		return json.Marshal(e.RejectedExecuteWorkflowWorkflowResultEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecuteWorkflowWorkflowResultEventVisitor interface {
	VisitFulfilledExecuteWorkflowWorkflowResultEvent(*FulfilledExecuteWorkflowWorkflowResultEvent) error
	VisitRejectedExecuteWorkflowWorkflowResultEvent(*RejectedExecuteWorkflowWorkflowResultEvent) error
}

func (e *ExecuteWorkflowWorkflowResultEvent) Accept(visitor ExecuteWorkflowWorkflowResultEventVisitor) error {
	if e.FulfilledExecuteWorkflowWorkflowResultEvent != nil {
		return visitor.VisitFulfilledExecuteWorkflowWorkflowResultEvent(e.FulfilledExecuteWorkflowWorkflowResultEvent)
	}
	if e.RejectedExecuteWorkflowWorkflowResultEvent != nil {
		return visitor.VisitRejectedExecuteWorkflowWorkflowResultEvent(e.RejectedExecuteWorkflowWorkflowResultEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// A value representing an array of Vellum variable values.
type ExecutionArrayVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string         `json:"id" url:"id"`
	Name  string         `json:"name" url:"name"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionArrayVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionArrayVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionArrayVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionArrayVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionArrayVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ARRAY", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionArrayVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionArrayVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionArrayVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing Chat History.
type ExecutionChatHistoryVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string         `json:"id" url:"id"`
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionChatHistoryVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionChatHistoryVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionChatHistoryVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionChatHistoryVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionChatHistoryVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "CHAT_HISTORY", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionChatHistoryVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionChatHistoryVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionChatHistoryVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ExecutionErrorVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string       `json:"id" url:"id"`
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionErrorVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionErrorVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionErrorVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionErrorVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionErrorVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "ERROR", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionErrorVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionErrorVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionErrorVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a Function Call.
type ExecutionFunctionCallVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string        `json:"id" url:"id"`
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionFunctionCallVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionFunctionCallVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionFunctionCallVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionFunctionCallVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionFunctionCallVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "FUNCTION_CALL", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionFunctionCallVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionFunctionCallVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionFunctionCallVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a JSON object.
type ExecutionJsonVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string      `json:"id" url:"id"`
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionJsonVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionJsonVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionJsonVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionJsonVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionJsonVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "JSON", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionJsonVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionJsonVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionJsonVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a number.
type ExecutionNumberVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string   `json:"id" url:"id"`
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionNumberVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionNumberVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionNumberVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionNumberVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionNumberVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "NUMBER", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionNumberVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionNumberVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionNumberVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing Search Results.
type ExecutionSearchResultsVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string          `json:"id" url:"id"`
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionSearchResultsVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionSearchResultsVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionSearchResultsVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionSearchResultsVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionSearchResultsVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "SEARCH_RESULTS", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionSearchResultsVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionSearchResultsVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionSearchResultsVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a string.
type ExecutionStringVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string  `json:"id" url:"id"`
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionStringVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionStringVellumValue) Type() string {
	return e.type_
}

func (e *ExecutionStringVellumValue) UnmarshalJSON(data []byte) error {
	type embed ExecutionStringVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExecutionStringVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "STRING", unmarshaler.Type)
	}
	e.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *e, "type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionStringVellumValue) MarshalJSON() ([]byte, error) {
	type embed ExecutionStringVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*e),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (e *ExecutionStringVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionVellumValue struct {
	ExecutionStringVellumValue        *ExecutionStringVellumValue
	ExecutionNumberVellumValue        *ExecutionNumberVellumValue
	ExecutionJsonVellumValue          *ExecutionJsonVellumValue
	ExecutionChatHistoryVellumValue   *ExecutionChatHistoryVellumValue
	ExecutionSearchResultsVellumValue *ExecutionSearchResultsVellumValue
	ExecutionErrorVellumValue         *ExecutionErrorVellumValue
	ExecutionArrayVellumValue         *ExecutionArrayVellumValue
	ExecutionFunctionCallVellumValue  *ExecutionFunctionCallVellumValue
}

func (e *ExecutionVellumValue) UnmarshalJSON(data []byte) error {
	valueExecutionStringVellumValue := new(ExecutionStringVellumValue)
	if err := json.Unmarshal(data, &valueExecutionStringVellumValue); err == nil {
		e.ExecutionStringVellumValue = valueExecutionStringVellumValue
		return nil
	}
	valueExecutionNumberVellumValue := new(ExecutionNumberVellumValue)
	if err := json.Unmarshal(data, &valueExecutionNumberVellumValue); err == nil {
		e.ExecutionNumberVellumValue = valueExecutionNumberVellumValue
		return nil
	}
	valueExecutionJsonVellumValue := new(ExecutionJsonVellumValue)
	if err := json.Unmarshal(data, &valueExecutionJsonVellumValue); err == nil {
		e.ExecutionJsonVellumValue = valueExecutionJsonVellumValue
		return nil
	}
	valueExecutionChatHistoryVellumValue := new(ExecutionChatHistoryVellumValue)
	if err := json.Unmarshal(data, &valueExecutionChatHistoryVellumValue); err == nil {
		e.ExecutionChatHistoryVellumValue = valueExecutionChatHistoryVellumValue
		return nil
	}
	valueExecutionSearchResultsVellumValue := new(ExecutionSearchResultsVellumValue)
	if err := json.Unmarshal(data, &valueExecutionSearchResultsVellumValue); err == nil {
		e.ExecutionSearchResultsVellumValue = valueExecutionSearchResultsVellumValue
		return nil
	}
	valueExecutionErrorVellumValue := new(ExecutionErrorVellumValue)
	if err := json.Unmarshal(data, &valueExecutionErrorVellumValue); err == nil {
		e.ExecutionErrorVellumValue = valueExecutionErrorVellumValue
		return nil
	}
	valueExecutionArrayVellumValue := new(ExecutionArrayVellumValue)
	if err := json.Unmarshal(data, &valueExecutionArrayVellumValue); err == nil {
		e.ExecutionArrayVellumValue = valueExecutionArrayVellumValue
		return nil
	}
	valueExecutionFunctionCallVellumValue := new(ExecutionFunctionCallVellumValue)
	if err := json.Unmarshal(data, &valueExecutionFunctionCallVellumValue); err == nil {
		e.ExecutionFunctionCallVellumValue = valueExecutionFunctionCallVellumValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e ExecutionVellumValue) MarshalJSON() ([]byte, error) {
	if e.ExecutionStringVellumValue != nil {
		return json.Marshal(e.ExecutionStringVellumValue)
	}
	if e.ExecutionNumberVellumValue != nil {
		return json.Marshal(e.ExecutionNumberVellumValue)
	}
	if e.ExecutionJsonVellumValue != nil {
		return json.Marshal(e.ExecutionJsonVellumValue)
	}
	if e.ExecutionChatHistoryVellumValue != nil {
		return json.Marshal(e.ExecutionChatHistoryVellumValue)
	}
	if e.ExecutionSearchResultsVellumValue != nil {
		return json.Marshal(e.ExecutionSearchResultsVellumValue)
	}
	if e.ExecutionErrorVellumValue != nil {
		return json.Marshal(e.ExecutionErrorVellumValue)
	}
	if e.ExecutionArrayVellumValue != nil {
		return json.Marshal(e.ExecutionArrayVellumValue)
	}
	if e.ExecutionFunctionCallVellumValue != nil {
		return json.Marshal(e.ExecutionFunctionCallVellumValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExecutionVellumValueVisitor interface {
	VisitExecutionStringVellumValue(*ExecutionStringVellumValue) error
	VisitExecutionNumberVellumValue(*ExecutionNumberVellumValue) error
	VisitExecutionJsonVellumValue(*ExecutionJsonVellumValue) error
	VisitExecutionChatHistoryVellumValue(*ExecutionChatHistoryVellumValue) error
	VisitExecutionSearchResultsVellumValue(*ExecutionSearchResultsVellumValue) error
	VisitExecutionErrorVellumValue(*ExecutionErrorVellumValue) error
	VisitExecutionArrayVellumValue(*ExecutionArrayVellumValue) error
	VisitExecutionFunctionCallVellumValue(*ExecutionFunctionCallVellumValue) error
}

func (e *ExecutionVellumValue) Accept(visitor ExecutionVellumValueVisitor) error {
	if e.ExecutionStringVellumValue != nil {
		return visitor.VisitExecutionStringVellumValue(e.ExecutionStringVellumValue)
	}
	if e.ExecutionNumberVellumValue != nil {
		return visitor.VisitExecutionNumberVellumValue(e.ExecutionNumberVellumValue)
	}
	if e.ExecutionJsonVellumValue != nil {
		return visitor.VisitExecutionJsonVellumValue(e.ExecutionJsonVellumValue)
	}
	if e.ExecutionChatHistoryVellumValue != nil {
		return visitor.VisitExecutionChatHistoryVellumValue(e.ExecutionChatHistoryVellumValue)
	}
	if e.ExecutionSearchResultsVellumValue != nil {
		return visitor.VisitExecutionSearchResultsVellumValue(e.ExecutionSearchResultsVellumValue)
	}
	if e.ExecutionErrorVellumValue != nil {
		return visitor.VisitExecutionErrorVellumValue(e.ExecutionErrorVellumValue)
	}
	if e.ExecutionArrayVellumValue != nil {
		return visitor.VisitExecutionArrayVellumValue(e.ExecutionArrayVellumValue)
	}
	if e.ExecutionFunctionCallVellumValue != nil {
		return visitor.VisitExecutionFunctionCallVellumValue(e.ExecutionFunctionCallVellumValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type ExternalTestCaseExecution struct {
	// The output values of a callable that was executed against a Test Case outside of Vellum
	Outputs    []*NamedTestCaseVariableValue `json:"outputs" url:"outputs"`
	TestCaseId string                        `json:"test_case_id" url:"test_case_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalTestCaseExecution) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalTestCaseExecution) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTestCaseExecution
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTestCaseExecution(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTestCaseExecution) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalTestCaseExecutionRequest struct {
	// The output values of a callable that was executed against a Test Case outside of Vellum
	Outputs    []*NamedTestCaseVariableValueRequest `json:"outputs" url:"outputs"`
	TestCaseId string                               `json:"test_case_id" url:"test_case_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalTestCaseExecutionRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalTestCaseExecutionRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTestCaseExecutionRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTestCaseExecutionRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTestCaseExecutionRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `LENGTH` - LENGTH
// - `STOP` - STOP
// - `UNKNOWN` - UNKNOWN
type FinishReasonEnum string

const (
	FinishReasonEnumLength  FinishReasonEnum = "LENGTH"
	FinishReasonEnumStop    FinishReasonEnum = "STOP"
	FinishReasonEnumUnknown FinishReasonEnum = "UNKNOWN"
)

func NewFinishReasonEnumFromString(s string) (FinishReasonEnum, error) {
	switch s {
	case "LENGTH":
		return FinishReasonEnumLength, nil
	case "STOP":
		return FinishReasonEnumStop, nil
	case "UNKNOWN":
		return FinishReasonEnumUnknown, nil
	}
	var t FinishReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FinishReasonEnum) Ptr() *FinishReasonEnum {
	return &f
}

type FolderEntity struct {
	FolderEntityFolder          *FolderEntityFolder
	FolderEntityPromptSandbox   *FolderEntityPromptSandbox
	FolderEntityWorkflowSandbox *FolderEntityWorkflowSandbox
	FolderEntityDocumentIndex   *FolderEntityDocumentIndex
	FolderEntityTestSuite       *FolderEntityTestSuite
}

func (f *FolderEntity) UnmarshalJSON(data []byte) error {
	valueFolderEntityFolder := new(FolderEntityFolder)
	if err := json.Unmarshal(data, &valueFolderEntityFolder); err == nil {
		f.FolderEntityFolder = valueFolderEntityFolder
		return nil
	}
	valueFolderEntityPromptSandbox := new(FolderEntityPromptSandbox)
	if err := json.Unmarshal(data, &valueFolderEntityPromptSandbox); err == nil {
		f.FolderEntityPromptSandbox = valueFolderEntityPromptSandbox
		return nil
	}
	valueFolderEntityWorkflowSandbox := new(FolderEntityWorkflowSandbox)
	if err := json.Unmarshal(data, &valueFolderEntityWorkflowSandbox); err == nil {
		f.FolderEntityWorkflowSandbox = valueFolderEntityWorkflowSandbox
		return nil
	}
	valueFolderEntityDocumentIndex := new(FolderEntityDocumentIndex)
	if err := json.Unmarshal(data, &valueFolderEntityDocumentIndex); err == nil {
		f.FolderEntityDocumentIndex = valueFolderEntityDocumentIndex
		return nil
	}
	valueFolderEntityTestSuite := new(FolderEntityTestSuite)
	if err := json.Unmarshal(data, &valueFolderEntityTestSuite); err == nil {
		f.FolderEntityTestSuite = valueFolderEntityTestSuite
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, f)
}

func (f FolderEntity) MarshalJSON() ([]byte, error) {
	if f.FolderEntityFolder != nil {
		return json.Marshal(f.FolderEntityFolder)
	}
	if f.FolderEntityPromptSandbox != nil {
		return json.Marshal(f.FolderEntityPromptSandbox)
	}
	if f.FolderEntityWorkflowSandbox != nil {
		return json.Marshal(f.FolderEntityWorkflowSandbox)
	}
	if f.FolderEntityDocumentIndex != nil {
		return json.Marshal(f.FolderEntityDocumentIndex)
	}
	if f.FolderEntityTestSuite != nil {
		return json.Marshal(f.FolderEntityTestSuite)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", f)
}

type FolderEntityVisitor interface {
	VisitFolderEntityFolder(*FolderEntityFolder) error
	VisitFolderEntityPromptSandbox(*FolderEntityPromptSandbox) error
	VisitFolderEntityWorkflowSandbox(*FolderEntityWorkflowSandbox) error
	VisitFolderEntityDocumentIndex(*FolderEntityDocumentIndex) error
	VisitFolderEntityTestSuite(*FolderEntityTestSuite) error
}

func (f *FolderEntity) Accept(visitor FolderEntityVisitor) error {
	if f.FolderEntityFolder != nil {
		return visitor.VisitFolderEntityFolder(f.FolderEntityFolder)
	}
	if f.FolderEntityPromptSandbox != nil {
		return visitor.VisitFolderEntityPromptSandbox(f.FolderEntityPromptSandbox)
	}
	if f.FolderEntityWorkflowSandbox != nil {
		return visitor.VisitFolderEntityWorkflowSandbox(f.FolderEntityWorkflowSandbox)
	}
	if f.FolderEntityDocumentIndex != nil {
		return visitor.VisitFolderEntityDocumentIndex(f.FolderEntityDocumentIndex)
	}
	if f.FolderEntityTestSuite != nil {
		return visitor.VisitFolderEntityTestSuite(f.FolderEntityTestSuite)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", f)
}

// A slim representation of a Document Index, as it exists within a Folder.
type FolderEntityDocumentIndex struct {
	Id    string                         `json:"id" url:"id"`
	Data  *FolderEntityDocumentIndexData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityDocumentIndex) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityDocumentIndex) Type() string {
	return f.type_
}

func (f *FolderEntityDocumentIndex) UnmarshalJSON(data []byte) error {
	type embed FolderEntityDocumentIndex
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityDocumentIndex(unmarshaler.embed)
	if unmarshaler.Type != "DOCUMENT_INDEX" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "DOCUMENT_INDEX", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityDocumentIndex) MarshalJSON() ([]byte, error) {
	type embed FolderEntityDocumentIndex
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "DOCUMENT_INDEX",
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityDocumentIndex) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FolderEntityDocumentIndexData struct {
	Id       string       `json:"id" url:"id"`
	Label    string       `json:"label" url:"label"`
	Created  time.Time    `json:"created" url:"created"`
	Modified time.Time    `json:"modified" url:"modified"`
	Status   EntityStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityDocumentIndexData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityDocumentIndexData) UnmarshalJSON(data []byte) error {
	type embed FolderEntityDocumentIndexData
	var unmarshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityDocumentIndexData(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Modified = unmarshaler.Modified.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityDocumentIndexData) MarshalJSON() ([]byte, error) {
	type embed FolderEntityDocumentIndexData
	var marshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed:    embed(*f),
		Created:  core.NewDateTime(f.Created),
		Modified: core.NewDateTime(f.Modified),
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityDocumentIndexData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A slim representation of a Folder, as it exists within another Folder.
type FolderEntityFolder struct {
	Id    string                  `json:"id" url:"id"`
	Data  *FolderEntityFolderData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityFolder) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityFolder) Type() string {
	return f.type_
}

func (f *FolderEntityFolder) UnmarshalJSON(data []byte) error {
	type embed FolderEntityFolder
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityFolder(unmarshaler.embed)
	if unmarshaler.Type != "FOLDER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FOLDER", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityFolder) MarshalJSON() ([]byte, error) {
	type embed FolderEntityFolder
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FOLDER",
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityFolder) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FolderEntityFolderData struct {
	Id          string    `json:"id" url:"id"`
	Label       string    `json:"label" url:"label"`
	Created     time.Time `json:"created" url:"created"`
	Modified    time.Time `json:"modified" url:"modified"`
	HasContents bool      `json:"has_contents" url:"has_contents"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityFolderData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityFolderData) UnmarshalJSON(data []byte) error {
	type embed FolderEntityFolderData
	var unmarshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityFolderData(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Modified = unmarshaler.Modified.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityFolderData) MarshalJSON() ([]byte, error) {
	type embed FolderEntityFolderData
	var marshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed:    embed(*f),
		Created:  core.NewDateTime(f.Created),
		Modified: core.NewDateTime(f.Modified),
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityFolderData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A slim representation of a Prompt Sandbox, as it exists within a Folder.
type FolderEntityPromptSandbox struct {
	Id    string                         `json:"id" url:"id"`
	Data  *FolderEntityPromptSandboxData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityPromptSandbox) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityPromptSandbox) Type() string {
	return f.type_
}

func (f *FolderEntityPromptSandbox) UnmarshalJSON(data []byte) error {
	type embed FolderEntityPromptSandbox
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityPromptSandbox(unmarshaler.embed)
	if unmarshaler.Type != "PROMPT_SANDBOX" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "PROMPT_SANDBOX", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityPromptSandbox) MarshalJSON() ([]byte, error) {
	type embed FolderEntityPromptSandbox
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "PROMPT_SANDBOX",
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityPromptSandbox) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FolderEntityPromptSandboxData struct {
	Id             string       `json:"id" url:"id"`
	Label          string       `json:"label" url:"label"`
	Created        time.Time    `json:"created" url:"created"`
	Modified       time.Time    `json:"modified" url:"modified"`
	Status         EntityStatus `json:"status" url:"status"`
	LastDeployedOn *time.Time   `json:"last_deployed_on,omitempty" url:"last_deployed_on,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityPromptSandboxData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityPromptSandboxData) UnmarshalJSON(data []byte) error {
	type embed FolderEntityPromptSandboxData
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		Modified       *core.DateTime `json:"modified"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityPromptSandboxData(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Modified = unmarshaler.Modified.Time()
	f.LastDeployedOn = unmarshaler.LastDeployedOn.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityPromptSandboxData) MarshalJSON() ([]byte, error) {
	type embed FolderEntityPromptSandboxData
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		Modified       *core.DateTime `json:"modified"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on,omitempty"`
	}{
		embed:          embed(*f),
		Created:        core.NewDateTime(f.Created),
		Modified:       core.NewDateTime(f.Modified),
		LastDeployedOn: core.NewOptionalDateTime(f.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityPromptSandboxData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A slim representation of a Test Suite, as it exists within a Folder.
type FolderEntityTestSuite struct {
	Id    string                     `json:"id" url:"id"`
	Data  *FolderEntityTestSuiteData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityTestSuite) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityTestSuite) Type() string {
	return f.type_
}

func (f *FolderEntityTestSuite) UnmarshalJSON(data []byte) error {
	type embed FolderEntityTestSuite
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityTestSuite(unmarshaler.embed)
	if unmarshaler.Type != "TEST_SUITE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "TEST_SUITE", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityTestSuite) MarshalJSON() ([]byte, error) {
	type embed FolderEntityTestSuite
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "TEST_SUITE",
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityTestSuite) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FolderEntityTestSuiteData struct {
	Id       string       `json:"id" url:"id"`
	Label    string       `json:"label" url:"label"`
	Created  time.Time    `json:"created" url:"created"`
	Modified time.Time    `json:"modified" url:"modified"`
	Status   EntityStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityTestSuiteData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityTestSuiteData) UnmarshalJSON(data []byte) error {
	type embed FolderEntityTestSuiteData
	var unmarshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityTestSuiteData(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Modified = unmarshaler.Modified.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityTestSuiteData) MarshalJSON() ([]byte, error) {
	type embed FolderEntityTestSuiteData
	var marshaler = struct {
		embed
		Created  *core.DateTime `json:"created"`
		Modified *core.DateTime `json:"modified"`
	}{
		embed:    embed(*f),
		Created:  core.NewDateTime(f.Created),
		Modified: core.NewDateTime(f.Modified),
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityTestSuiteData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A slim representation of a Workflow Sandbox, as it exists within a Folder.
type FolderEntityWorkflowSandbox struct {
	Id    string                           `json:"id" url:"id"`
	Data  *FolderEntityWorkflowSandboxData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityWorkflowSandbox) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityWorkflowSandbox) Type() string {
	return f.type_
}

func (f *FolderEntityWorkflowSandbox) UnmarshalJSON(data []byte) error {
	type embed FolderEntityWorkflowSandbox
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityWorkflowSandbox(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_SANDBOX" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "WORKFLOW_SANDBOX", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityWorkflowSandbox) MarshalJSON() ([]byte, error) {
	type embed FolderEntityWorkflowSandbox
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "WORKFLOW_SANDBOX",
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityWorkflowSandbox) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FolderEntityWorkflowSandboxData struct {
	Id             string       `json:"id" url:"id"`
	Label          string       `json:"label" url:"label"`
	Created        time.Time    `json:"created" url:"created"`
	Modified       time.Time    `json:"modified" url:"modified"`
	Status         EntityStatus `json:"status" url:"status"`
	LastDeployedOn *time.Time   `json:"last_deployed_on,omitempty" url:"last_deployed_on,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FolderEntityWorkflowSandboxData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FolderEntityWorkflowSandboxData) UnmarshalJSON(data []byte) error {
	type embed FolderEntityWorkflowSandboxData
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		Modified       *core.DateTime `json:"modified"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FolderEntityWorkflowSandboxData(unmarshaler.embed)
	f.Created = unmarshaler.Created.Time()
	f.Modified = unmarshaler.Modified.Time()
	f.LastDeployedOn = unmarshaler.LastDeployedOn.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FolderEntityWorkflowSandboxData) MarshalJSON() ([]byte, error) {
	type embed FolderEntityWorkflowSandboxData
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		Modified       *core.DateTime `json:"modified"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on,omitempty"`
	}{
		embed:          embed(*f),
		Created:        core.NewDateTime(f.Created),
		Modified:       core.NewDateTime(f.Modified),
		LastDeployedOn: core.NewOptionalDateTime(f.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (f *FolderEntityWorkflowSandboxData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.
type FulfilledAdHocExecutePromptEvent struct {
	Outputs     []*PromptOutput                    `json:"outputs" url:"outputs"`
	ExecutionId string                             `json:"execution_id" url:"execution_id"`
	Meta        *AdHocFulfilledPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledAdHocExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledAdHocExecutePromptEvent) State() string {
	return f.state
}

func (f *FulfilledAdHocExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledAdHocExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledAdHocExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledAdHocExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledAdHocExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledAdHocExecutePromptEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FulfilledEnum = string

// The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.
type FulfilledExecutePromptEvent struct {
	Outputs     []*PromptOutput               `json:"outputs" url:"outputs"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *FulfilledPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecutePromptEvent) State() string {
	return f.state
}

func (f *FulfilledExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecutePromptEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the model containing all of the resolved values generated by the prompt.
type FulfilledExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string          `json:"execution_id" url:"execution_id"`
	Outputs     []*PromptOutput `json:"outputs" url:"outputs"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecutePromptResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecutePromptResponse) State() string {
	return f.state
}

func (f *FulfilledExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecutePromptResponse
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecutePromptResponse(unmarshaler.embed)
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptResponse) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecutePromptResponse
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*f),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecutePromptResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the Workflow execution containing the produced outputs.
type FulfilledExecuteWorkflowWorkflowResultEvent struct {
	Id      string            `json:"id" url:"id"`
	Ts      time.Time         `json:"ts" url:"ts"`
	Outputs []*WorkflowOutput `json:"outputs" url:"outputs"`
	state   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) State() string {
	return f.state
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.Time()
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
		Ts:    core.NewDateTime(f.Ts),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type FulfilledPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	Usage        *MlModelUsage     `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledPromptExecutionMeta) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// An event that indicates that the node has fulfilled its execution.
type FulfilledWorkflowNodeResultEvent struct {
	Id                string                     `json:"id" url:"id"`
	NodeId            string                     `json:"node_id" url:"node_id"`
	NodeResultId      string                     `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                 `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData    `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                    `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	OutputValues      []*NodeOutputCompiledValue `json:"output_values" url:"output_values"`
	Mocked            *bool                      `json:"mocked,omitempty" url:"mocked,omitempty"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledWorkflowNodeResultEvent) State() string {
	return f.state
}

func (f *FulfilledWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledWorkflowNodeResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "FULFILLED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FULFILLED", unmarshaler.State)
	}
	f.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *f, "state")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*f),
		Ts:    core.NewOptionalDateTime(f.Ts),
		State: "FULFILLED",
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledWorkflowNodeResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCall struct {
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`
	Name      string                 `json:"name" url:"name"`
	State     *FulfilledEnum         `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCall) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCall(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCall) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContent struct {
	Value *FunctionCallChatMessageContentValue `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContent) Type() string {
	return f.type_
}

func (f *FunctionCallChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed FunctionCallChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed FunctionCallChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallChatMessageContent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContentRequest struct {
	Value *FunctionCallChatMessageContentValueRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentRequest) Type() string {
	return f.type_
}

func (f *FunctionCallChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed FunctionCallChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed FunctionCallChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallChatMessageContentRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValue struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentValue) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValueRequest struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentValueRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValueRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A user input representing a Vellum Function Call value
type FunctionCallInputRequest struct {
	// The variable's name
	Name  string               `json:"name" url:"name"`
	Value *FunctionCallRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallInputRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallInputRequest) Type() string {
	return f.type_
}

func (f *FunctionCallInputRequest) UnmarshalJSON(data []byte) error {
	type embed FunctionCallInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallInputRequest) MarshalJSON() ([]byte, error) {
	type embed FunctionCallInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallInputRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallRequest struct {
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`
	Name      string                 `json:"name" url:"name"`
	State     *FulfilledEnum         `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FunctionCallVariableValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVariableValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVariableValue) Type() string {
	return f.type_
}

func (f *FunctionCallVariableValue) UnmarshalJSON(data []byte) error {
	type embed FunctionCallVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVariableValue) MarshalJSON() ([]byte, error) {
	type embed FunctionCallVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallVariableValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A value representing a Function Call.
type FunctionCallVellumValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVellumValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVellumValue) Type() string {
	return f.type_
}

func (f *FunctionCallVellumValue) UnmarshalJSON(data []byte) error {
	type embed FunctionCallVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVellumValue) MarshalJSON() ([]byte, error) {
	type embed FunctionCallVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallVellumValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A value representing a Function Call.
type FunctionCallVellumValueRequest struct {
	Value *FunctionCallRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVellumValueRequest) Type() string {
	return f.type_
}

func (f *FunctionCallVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed FunctionCallVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionCallVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_CALL", unmarshaler.Type)
	}
	f.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *f, "type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed FunctionCallVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*f),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionCallVellumValueRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A block that represents a function definition in a prompt template.
type FunctionDefinitionPromptBlock struct {
	State       *PromptBlockState                        `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig              `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Properties  *FunctionDefinitionPromptBlockProperties `json:"properties" url:"properties"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionDefinitionPromptBlock) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionDefinitionPromptBlock) BlockType() string {
	return f.blockType
}

func (f *FunctionDefinitionPromptBlock) UnmarshalJSON(data []byte) error {
	type embed FunctionDefinitionPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FunctionDefinitionPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "FUNCTION_DEFINITION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", f, "FUNCTION_DEFINITION", unmarshaler.BlockType)
	}
	f.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *f, "block_type")
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionDefinitionPromptBlock) MarshalJSON() ([]byte, error) {
	type embed FunctionDefinitionPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*f),
		BlockType: "FUNCTION_DEFINITION",
	}
	return json.Marshal(marshaler)
}

func (f *FunctionDefinitionPromptBlock) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FunctionDefinitionPromptBlockProperties struct {
	// The name identifying the function.
	FunctionName *string `json:"function_name,omitempty" url:"function_name,omitempty"`
	// A description to help guide the model when to invoke this function.
	FunctionDescription *string `json:"function_description,omitempty" url:"function_description,omitempty"`
	// An OpenAPI specification of parameters that are supported by this function.
	FunctionParameters map[string]interface{} `json:"function_parameters,omitempty" url:"function_parameters,omitempty"`
	// Set this option to true to force the model to return a function call of this function.
	FunctionForced *bool `json:"function_forced,omitempty" url:"function_forced,omitempty"`
	// Set this option to use strict schema decoding when available.
	FunctionStrict *bool `json:"function_strict,omitempty" url:"function_strict,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionDefinitionPromptBlockProperties) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionDefinitionPromptBlockProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionDefinitionPromptBlockProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionDefinitionPromptBlockProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionDefinitionPromptBlockProperties) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GenerateOptionsRequest struct {
	// Which logprobs to include, if any. Defaults to NONE.
	//
	// - `ALL` - ALL
	// - `NONE` - NONE
	Logprobs *LogprobsEnum `json:"logprobs,omitempty" url:"logprobs,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateOptionsRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateOptionsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateOptionsRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateRequest struct {
	// Key/value pairs for each template variable defined in the deployment's prompt.
	InputValues map[string]interface{} `json:"input_values" url:"input_values"`
	// Optionally provide a list of chat messages that'll be used in place of the special chat_history variable, if included in the prompt.
	ChatHistory []*ChatMessageRequest `json:"chat_history,omitempty" url:"chat_history,omitempty"`
	// Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResponse struct {
	// The results of each generation request.
	Results []*GenerateResult `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResult struct {
	// An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.
	Data *GenerateResultData `json:"data,omitempty" url:"data,omitempty"`
	// An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.
	Error *GenerateResultError `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResult) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultData struct {
	// The generated completions. This will generally be a list of length one.
	Completions []*EnrichedNormalizedCompletion `json:"completions" url:"completions"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResultData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultError struct {
	// The error message returned by the LLM provider.
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResultError) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResultError) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultError) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResponse struct {
	Delta *GenerateStreamResult `json:"delta" url:"delta"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResult struct {
	RequestIndex int                       `json:"request_index" url:"request_index"`
	Data         *GenerateStreamResultData `json:"data,omitempty" url:"data,omitempty"`
	Error        *GenerateResultError      `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResult) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResultData struct {
	CompletionIndex int                           `json:"completion_index" url:"completion_index"`
	Completion      *EnrichedNormalizedCompletion `json:"completion" url:"completion"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResultData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerConfig struct {
	ProjectId string `json:"project_id" url:"project_id"`
	Region    string `json:"region" url:"region"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler GoogleVertexAiVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerConfig) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerConfigRequest struct {
	ProjectId string `json:"project_id" url:"project_id"`
	Region    string `json:"region" url:"region"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerConfigRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GoogleVertexAiVectorizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerConfigRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerTextEmbedding004 struct {
	Config    *GoogleVertexAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) ModelName() string {
	return g.modelName
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) UnmarshalJSON(data []byte) error {
	type embed GoogleVertexAiVectorizerTextEmbedding004
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerTextEmbedding004(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-004" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", g, "text-embedding-004", unmarshaler.ModelName)
	}
	g.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *g, "model_name")
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) MarshalJSON() ([]byte, error) {
	type embed GoogleVertexAiVectorizerTextEmbedding004
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*g),
		ModelName: "text-embedding-004",
	}
	return json.Marshal(marshaler)
}

func (g *GoogleVertexAiVectorizerTextEmbedding004) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerTextEmbedding004Request struct {
	Config    *GoogleVertexAiVectorizerConfigRequest `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerTextEmbedding004Request) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerTextEmbedding004Request) ModelName() string {
	return g.modelName
}

func (g *GoogleVertexAiVectorizerTextEmbedding004Request) UnmarshalJSON(data []byte) error {
	type embed GoogleVertexAiVectorizerTextEmbedding004Request
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerTextEmbedding004Request(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-004" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", g, "text-embedding-004", unmarshaler.ModelName)
	}
	g.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *g, "model_name")
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerTextEmbedding004Request) MarshalJSON() ([]byte, error) {
	type embed GoogleVertexAiVectorizerTextEmbedding004Request
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*g),
		ModelName: "text-embedding-004",
	}
	return json.Marshal(marshaler)
}

func (g *GoogleVertexAiVectorizerTextEmbedding004Request) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerTextMultilingualEmbedding002 struct {
	Config    *GoogleVertexAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) ModelName() string {
	return g.modelName
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) UnmarshalJSON(data []byte) error {
	type embed GoogleVertexAiVectorizerTextMultilingualEmbedding002
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerTextMultilingualEmbedding002(unmarshaler.embed)
	if unmarshaler.ModelName != "text-multilingual-embedding-002" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", g, "text-multilingual-embedding-002", unmarshaler.ModelName)
	}
	g.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *g, "model_name")
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) MarshalJSON() ([]byte, error) {
	type embed GoogleVertexAiVectorizerTextMultilingualEmbedding002
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*g),
		ModelName: "text-multilingual-embedding-002",
	}
	return json.Marshal(marshaler)
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GoogleVertexAiVectorizerTextMultilingualEmbedding002Request struct {
	Config    *GoogleVertexAiVectorizerConfigRequest `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002Request) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002Request) ModelName() string {
	return g.modelName
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002Request) UnmarshalJSON(data []byte) error {
	type embed GoogleVertexAiVectorizerTextMultilingualEmbedding002Request
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleVertexAiVectorizerTextMultilingualEmbedding002Request(unmarshaler.embed)
	if unmarshaler.ModelName != "text-multilingual-embedding-002" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", g, "text-multilingual-embedding-002", unmarshaler.ModelName)
	}
	g.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *g, "model_name")
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002Request) MarshalJSON() ([]byte, error) {
	type embed GoogleVertexAiVectorizerTextMultilingualEmbedding002Request
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*g),
		ModelName: "text-multilingual-embedding-002",
	}
	return json.Marshal(marshaler)
}

func (g *GoogleVertexAiVectorizerTextMultilingualEmbedding002Request) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Vectorizer for hkunlp/instructor-xl.
type HkunlpInstructorXlVectorizer struct {
	Config    *InstructorVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HkunlpInstructorXlVectorizer) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HkunlpInstructorXlVectorizer) ModelName() string {
	return h.modelName
}

func (h *HkunlpInstructorXlVectorizer) UnmarshalJSON(data []byte) error {
	type embed HkunlpInstructorXlVectorizer
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*h),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*h = HkunlpInstructorXlVectorizer(unmarshaler.embed)
	if unmarshaler.ModelName != "hkunlp/instructor-xl" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", h, "hkunlp/instructor-xl", unmarshaler.ModelName)
	}
	h.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *h, "model_name")
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HkunlpInstructorXlVectorizer) MarshalJSON() ([]byte, error) {
	type embed HkunlpInstructorXlVectorizer
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*h),
		ModelName: "hkunlp/instructor-xl",
	}
	return json.Marshal(marshaler)
}

func (h *HkunlpInstructorXlVectorizer) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Vectorizer for hkunlp/instructor-xl.
type HkunlpInstructorXlVectorizerRequest struct {
	Config    *InstructorVectorizerConfigRequest `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HkunlpInstructorXlVectorizerRequest) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HkunlpInstructorXlVectorizerRequest) ModelName() string {
	return h.modelName
}

func (h *HkunlpInstructorXlVectorizerRequest) UnmarshalJSON(data []byte) error {
	type embed HkunlpInstructorXlVectorizerRequest
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*h),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*h = HkunlpInstructorXlVectorizerRequest(unmarshaler.embed)
	if unmarshaler.ModelName != "hkunlp/instructor-xl" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", h, "hkunlp/instructor-xl", unmarshaler.ModelName)
	}
	h.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *h, "model_name")
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HkunlpInstructorXlVectorizerRequest) MarshalJSON() ([]byte, error) {
	type embed HkunlpInstructorXlVectorizerRequest
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*h),
		ModelName: "hkunlp/instructor-xl",
	}
	return json.Marshal(marshaler)
}

func (h *HkunlpInstructorXlVectorizerRequest) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// An image value that is used in a chat message.
type ImageChatMessageContent struct {
	Value *VellumImage `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageChatMessageContent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageChatMessageContent) Type() string {
	return i.type_
}

func (i *ImageChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed ImageChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed ImageChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageChatMessageContent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An image value that is used in a chat message.
type ImageChatMessageContentRequest struct {
	Value *VellumImageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageChatMessageContentRequest) Type() string {
	return i.type_
}

func (i *ImageChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed ImageChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed ImageChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageChatMessageContentRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVariableValue struct {
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVariableValue) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVariableValue) Type() string {
	return i.type_
}

func (i *ImageVariableValue) UnmarshalJSON(data []byte) error {
	type embed ImageVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVariableValue) MarshalJSON() ([]byte, error) {
	type embed ImageVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageVariableValue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVellumValue struct {
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVellumValue) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVellumValue) Type() string {
	return i.type_
}

func (i *ImageVellumValue) UnmarshalJSON(data []byte) error {
	type embed ImageVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVellumValue) MarshalJSON() ([]byte, error) {
	type embed ImageVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageVellumValue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVellumValueRequest struct {
	Value *VellumImageRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVellumValueRequest) Type() string {
	return i.type_
}

func (i *ImageVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed ImageVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = ImageVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "IMAGE", unmarshaler.Type)
	}
	i.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *i, "type")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed ImageVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*i),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (i *ImageVellumValueRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndexingConfigVectorizer struct {
	OpenAiVectorizerTextEmbedding3Small                      *OpenAiVectorizerTextEmbedding3Small
	OpenAiVectorizerTextEmbedding3Large                      *OpenAiVectorizerTextEmbedding3Large
	OpenAiVectorizerTextEmbeddingAda002                      *OpenAiVectorizerTextEmbeddingAda002
	BasicVectorizerIntfloatMultilingualE5Large               *BasicVectorizerIntfloatMultilingualE5Large
	BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	HkunlpInstructorXlVectorizer                             *HkunlpInstructorXlVectorizer
	GoogleVertexAiVectorizerTextEmbedding004                 *GoogleVertexAiVectorizerTextEmbedding004
	GoogleVertexAiVectorizerTextMultilingualEmbedding002     *GoogleVertexAiVectorizerTextMultilingualEmbedding002
}

func (i *IndexingConfigVectorizer) UnmarshalJSON(data []byte) error {
	valueOpenAiVectorizerTextEmbedding3Small := new(OpenAiVectorizerTextEmbedding3Small)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbedding3Small); err == nil {
		i.OpenAiVectorizerTextEmbedding3Small = valueOpenAiVectorizerTextEmbedding3Small
		return nil
	}
	valueOpenAiVectorizerTextEmbedding3Large := new(OpenAiVectorizerTextEmbedding3Large)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbedding3Large); err == nil {
		i.OpenAiVectorizerTextEmbedding3Large = valueOpenAiVectorizerTextEmbedding3Large
		return nil
	}
	valueOpenAiVectorizerTextEmbeddingAda002 := new(OpenAiVectorizerTextEmbeddingAda002)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbeddingAda002); err == nil {
		i.OpenAiVectorizerTextEmbeddingAda002 = valueOpenAiVectorizerTextEmbeddingAda002
		return nil
	}
	valueBasicVectorizerIntfloatMultilingualE5Large := new(BasicVectorizerIntfloatMultilingualE5Large)
	if err := json.Unmarshal(data, &valueBasicVectorizerIntfloatMultilingualE5Large); err == nil {
		i.BasicVectorizerIntfloatMultilingualE5Large = valueBasicVectorizerIntfloatMultilingualE5Large
		return nil
	}
	valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1)
	if err := json.Unmarshal(data, &valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1); err == nil {
		i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 = valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
		return nil
	}
	valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1)
	if err := json.Unmarshal(data, &valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1); err == nil {
		i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 = valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
		return nil
	}
	valueHkunlpInstructorXlVectorizer := new(HkunlpInstructorXlVectorizer)
	if err := json.Unmarshal(data, &valueHkunlpInstructorXlVectorizer); err == nil {
		i.HkunlpInstructorXlVectorizer = valueHkunlpInstructorXlVectorizer
		return nil
	}
	valueGoogleVertexAiVectorizerTextEmbedding004 := new(GoogleVertexAiVectorizerTextEmbedding004)
	if err := json.Unmarshal(data, &valueGoogleVertexAiVectorizerTextEmbedding004); err == nil {
		i.GoogleVertexAiVectorizerTextEmbedding004 = valueGoogleVertexAiVectorizerTextEmbedding004
		return nil
	}
	valueGoogleVertexAiVectorizerTextMultilingualEmbedding002 := new(GoogleVertexAiVectorizerTextMultilingualEmbedding002)
	if err := json.Unmarshal(data, &valueGoogleVertexAiVectorizerTextMultilingualEmbedding002); err == nil {
		i.GoogleVertexAiVectorizerTextMultilingualEmbedding002 = valueGoogleVertexAiVectorizerTextMultilingualEmbedding002
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IndexingConfigVectorizer) MarshalJSON() ([]byte, error) {
	if i.OpenAiVectorizerTextEmbedding3Small != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbedding3Small)
	}
	if i.OpenAiVectorizerTextEmbedding3Large != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbedding3Large)
	}
	if i.OpenAiVectorizerTextEmbeddingAda002 != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbeddingAda002)
	}
	if i.BasicVectorizerIntfloatMultilingualE5Large != nil {
		return json.Marshal(i.BasicVectorizerIntfloatMultilingualE5Large)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return json.Marshal(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return json.Marshal(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1)
	}
	if i.HkunlpInstructorXlVectorizer != nil {
		return json.Marshal(i.HkunlpInstructorXlVectorizer)
	}
	if i.GoogleVertexAiVectorizerTextEmbedding004 != nil {
		return json.Marshal(i.GoogleVertexAiVectorizerTextEmbedding004)
	}
	if i.GoogleVertexAiVectorizerTextMultilingualEmbedding002 != nil {
		return json.Marshal(i.GoogleVertexAiVectorizerTextMultilingualEmbedding002)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IndexingConfigVectorizerVisitor interface {
	VisitOpenAiVectorizerTextEmbedding3Small(*OpenAiVectorizerTextEmbedding3Small) error
	VisitOpenAiVectorizerTextEmbedding3Large(*OpenAiVectorizerTextEmbedding3Large) error
	VisitOpenAiVectorizerTextEmbeddingAda002(*OpenAiVectorizerTextEmbeddingAda002) error
	VisitBasicVectorizerIntfloatMultilingualE5Large(*BasicVectorizerIntfloatMultilingualE5Large) error
	VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) error
	VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) error
	VisitHkunlpInstructorXlVectorizer(*HkunlpInstructorXlVectorizer) error
	VisitGoogleVertexAiVectorizerTextEmbedding004(*GoogleVertexAiVectorizerTextEmbedding004) error
	VisitGoogleVertexAiVectorizerTextMultilingualEmbedding002(*GoogleVertexAiVectorizerTextMultilingualEmbedding002) error
}

func (i *IndexingConfigVectorizer) Accept(visitor IndexingConfigVectorizerVisitor) error {
	if i.OpenAiVectorizerTextEmbedding3Small != nil {
		return visitor.VisitOpenAiVectorizerTextEmbedding3Small(i.OpenAiVectorizerTextEmbedding3Small)
	}
	if i.OpenAiVectorizerTextEmbedding3Large != nil {
		return visitor.VisitOpenAiVectorizerTextEmbedding3Large(i.OpenAiVectorizerTextEmbedding3Large)
	}
	if i.OpenAiVectorizerTextEmbeddingAda002 != nil {
		return visitor.VisitOpenAiVectorizerTextEmbeddingAda002(i.OpenAiVectorizerTextEmbeddingAda002)
	}
	if i.BasicVectorizerIntfloatMultilingualE5Large != nil {
		return visitor.VisitBasicVectorizerIntfloatMultilingualE5Large(i.BasicVectorizerIntfloatMultilingualE5Large)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return visitor.VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return visitor.VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1)
	}
	if i.HkunlpInstructorXlVectorizer != nil {
		return visitor.VisitHkunlpInstructorXlVectorizer(i.HkunlpInstructorXlVectorizer)
	}
	if i.GoogleVertexAiVectorizerTextEmbedding004 != nil {
		return visitor.VisitGoogleVertexAiVectorizerTextEmbedding004(i.GoogleVertexAiVectorizerTextEmbedding004)
	}
	if i.GoogleVertexAiVectorizerTextMultilingualEmbedding002 != nil {
		return visitor.VisitGoogleVertexAiVectorizerTextMultilingualEmbedding002(i.GoogleVertexAiVectorizerTextMultilingualEmbedding002)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IndexingConfigVectorizerRequest struct {
	OpenAiVectorizerTextEmbedding3SmallRequest                      *OpenAiVectorizerTextEmbedding3SmallRequest
	OpenAiVectorizerTextEmbedding3LargeRequest                      *OpenAiVectorizerTextEmbedding3LargeRequest
	OpenAiVectorizerTextEmbeddingAda002Request                      *OpenAiVectorizerTextEmbeddingAda002Request
	BasicVectorizerIntfloatMultilingualE5LargeRequest               *BasicVectorizerIntfloatMultilingualE5LargeRequest
	BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request
	BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request
	HkunlpInstructorXlVectorizerRequest                             *HkunlpInstructorXlVectorizerRequest
	GoogleVertexAiVectorizerTextEmbedding004Request                 *GoogleVertexAiVectorizerTextEmbedding004Request
	GoogleVertexAiVectorizerTextMultilingualEmbedding002Request     *GoogleVertexAiVectorizerTextMultilingualEmbedding002Request
}

func (i *IndexingConfigVectorizerRequest) UnmarshalJSON(data []byte) error {
	valueOpenAiVectorizerTextEmbedding3SmallRequest := new(OpenAiVectorizerTextEmbedding3SmallRequest)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbedding3SmallRequest); err == nil {
		i.OpenAiVectorizerTextEmbedding3SmallRequest = valueOpenAiVectorizerTextEmbedding3SmallRequest
		return nil
	}
	valueOpenAiVectorizerTextEmbedding3LargeRequest := new(OpenAiVectorizerTextEmbedding3LargeRequest)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbedding3LargeRequest); err == nil {
		i.OpenAiVectorizerTextEmbedding3LargeRequest = valueOpenAiVectorizerTextEmbedding3LargeRequest
		return nil
	}
	valueOpenAiVectorizerTextEmbeddingAda002Request := new(OpenAiVectorizerTextEmbeddingAda002Request)
	if err := json.Unmarshal(data, &valueOpenAiVectorizerTextEmbeddingAda002Request); err == nil {
		i.OpenAiVectorizerTextEmbeddingAda002Request = valueOpenAiVectorizerTextEmbeddingAda002Request
		return nil
	}
	valueBasicVectorizerIntfloatMultilingualE5LargeRequest := new(BasicVectorizerIntfloatMultilingualE5LargeRequest)
	if err := json.Unmarshal(data, &valueBasicVectorizerIntfloatMultilingualE5LargeRequest); err == nil {
		i.BasicVectorizerIntfloatMultilingualE5LargeRequest = valueBasicVectorizerIntfloatMultilingualE5LargeRequest
		return nil
	}
	valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request)
	if err := json.Unmarshal(data, &valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request); err == nil {
		i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request = valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request
		return nil
	}
	valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request)
	if err := json.Unmarshal(data, &valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request); err == nil {
		i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request = valueBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request
		return nil
	}
	valueHkunlpInstructorXlVectorizerRequest := new(HkunlpInstructorXlVectorizerRequest)
	if err := json.Unmarshal(data, &valueHkunlpInstructorXlVectorizerRequest); err == nil {
		i.HkunlpInstructorXlVectorizerRequest = valueHkunlpInstructorXlVectorizerRequest
		return nil
	}
	valueGoogleVertexAiVectorizerTextEmbedding004Request := new(GoogleVertexAiVectorizerTextEmbedding004Request)
	if err := json.Unmarshal(data, &valueGoogleVertexAiVectorizerTextEmbedding004Request); err == nil {
		i.GoogleVertexAiVectorizerTextEmbedding004Request = valueGoogleVertexAiVectorizerTextEmbedding004Request
		return nil
	}
	valueGoogleVertexAiVectorizerTextMultilingualEmbedding002Request := new(GoogleVertexAiVectorizerTextMultilingualEmbedding002Request)
	if err := json.Unmarshal(data, &valueGoogleVertexAiVectorizerTextMultilingualEmbedding002Request); err == nil {
		i.GoogleVertexAiVectorizerTextMultilingualEmbedding002Request = valueGoogleVertexAiVectorizerTextMultilingualEmbedding002Request
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IndexingConfigVectorizerRequest) MarshalJSON() ([]byte, error) {
	if i.OpenAiVectorizerTextEmbedding3SmallRequest != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbedding3SmallRequest)
	}
	if i.OpenAiVectorizerTextEmbedding3LargeRequest != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbedding3LargeRequest)
	}
	if i.OpenAiVectorizerTextEmbeddingAda002Request != nil {
		return json.Marshal(i.OpenAiVectorizerTextEmbeddingAda002Request)
	}
	if i.BasicVectorizerIntfloatMultilingualE5LargeRequest != nil {
		return json.Marshal(i.BasicVectorizerIntfloatMultilingualE5LargeRequest)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request != nil {
		return json.Marshal(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request != nil {
		return json.Marshal(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request)
	}
	if i.HkunlpInstructorXlVectorizerRequest != nil {
		return json.Marshal(i.HkunlpInstructorXlVectorizerRequest)
	}
	if i.GoogleVertexAiVectorizerTextEmbedding004Request != nil {
		return json.Marshal(i.GoogleVertexAiVectorizerTextEmbedding004Request)
	}
	if i.GoogleVertexAiVectorizerTextMultilingualEmbedding002Request != nil {
		return json.Marshal(i.GoogleVertexAiVectorizerTextMultilingualEmbedding002Request)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IndexingConfigVectorizerRequestVisitor interface {
	VisitOpenAiVectorizerTextEmbedding3SmallRequest(*OpenAiVectorizerTextEmbedding3SmallRequest) error
	VisitOpenAiVectorizerTextEmbedding3LargeRequest(*OpenAiVectorizerTextEmbedding3LargeRequest) error
	VisitOpenAiVectorizerTextEmbeddingAda002Request(*OpenAiVectorizerTextEmbeddingAda002Request) error
	VisitBasicVectorizerIntfloatMultilingualE5LargeRequest(*BasicVectorizerIntfloatMultilingualE5LargeRequest) error
	VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) error
	VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) error
	VisitHkunlpInstructorXlVectorizerRequest(*HkunlpInstructorXlVectorizerRequest) error
	VisitGoogleVertexAiVectorizerTextEmbedding004Request(*GoogleVertexAiVectorizerTextEmbedding004Request) error
	VisitGoogleVertexAiVectorizerTextMultilingualEmbedding002Request(*GoogleVertexAiVectorizerTextMultilingualEmbedding002Request) error
}

func (i *IndexingConfigVectorizerRequest) Accept(visitor IndexingConfigVectorizerRequestVisitor) error {
	if i.OpenAiVectorizerTextEmbedding3SmallRequest != nil {
		return visitor.VisitOpenAiVectorizerTextEmbedding3SmallRequest(i.OpenAiVectorizerTextEmbedding3SmallRequest)
	}
	if i.OpenAiVectorizerTextEmbedding3LargeRequest != nil {
		return visitor.VisitOpenAiVectorizerTextEmbedding3LargeRequest(i.OpenAiVectorizerTextEmbedding3LargeRequest)
	}
	if i.OpenAiVectorizerTextEmbeddingAda002Request != nil {
		return visitor.VisitOpenAiVectorizerTextEmbeddingAda002Request(i.OpenAiVectorizerTextEmbeddingAda002Request)
	}
	if i.BasicVectorizerIntfloatMultilingualE5LargeRequest != nil {
		return visitor.VisitBasicVectorizerIntfloatMultilingualE5LargeRequest(i.BasicVectorizerIntfloatMultilingualE5LargeRequest)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request != nil {
		return visitor.VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request)
	}
	if i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request != nil {
		return visitor.VisitBasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request(i.BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request)
	}
	if i.HkunlpInstructorXlVectorizerRequest != nil {
		return visitor.VisitHkunlpInstructorXlVectorizerRequest(i.HkunlpInstructorXlVectorizerRequest)
	}
	if i.GoogleVertexAiVectorizerTextEmbedding004Request != nil {
		return visitor.VisitGoogleVertexAiVectorizerTextEmbedding004Request(i.GoogleVertexAiVectorizerTextEmbedding004Request)
	}
	if i.GoogleVertexAiVectorizerTextMultilingualEmbedding002Request != nil {
		return visitor.VisitGoogleVertexAiVectorizerTextMultilingualEmbedding002Request(i.GoogleVertexAiVectorizerTextMultilingualEmbedding002Request)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

// - `AWAITING_PROCESSING` - Awaiting Processing
// - `QUEUED` - Queued
// - `INDEXING` - Indexing
// - `INDEXED` - Indexed
// - `FAILED` - Failed
type IndexingStateEnum string

const (
	IndexingStateEnumAwaitingProcessing IndexingStateEnum = "AWAITING_PROCESSING"
	IndexingStateEnumQueued             IndexingStateEnum = "QUEUED"
	IndexingStateEnumIndexing           IndexingStateEnum = "INDEXING"
	IndexingStateEnumIndexed            IndexingStateEnum = "INDEXED"
	IndexingStateEnumFailed             IndexingStateEnum = "FAILED"
)

func NewIndexingStateEnumFromString(s string) (IndexingStateEnum, error) {
	switch s {
	case "AWAITING_PROCESSING":
		return IndexingStateEnumAwaitingProcessing, nil
	case "QUEUED":
		return IndexingStateEnumQueued, nil
	case "INDEXING":
		return IndexingStateEnumIndexing, nil
	case "INDEXED":
		return IndexingStateEnumIndexed, nil
	case "FAILED":
		return IndexingStateEnumFailed, nil
	}
	var t IndexingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IndexingStateEnum) Ptr() *IndexingStateEnum {
	return &i
}

// The initial data returned indicating that the response from the model has returned and begun streaming.
type InitiatedAdHocExecutePromptEvent struct {
	Meta        *AdHocInitiatedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	ExecutionId string                             `json:"execution_id" url:"execution_id"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedAdHocExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedAdHocExecutePromptEvent) State() string {
	return i.state
}

func (i *InitiatedAdHocExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed InitiatedAdHocExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InitiatedAdHocExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "INITIATED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "INITIATED", unmarshaler.State)
	}
	i.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *i, "state")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedAdHocExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed InitiatedAdHocExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*i),
		State: "INITIATED",
	}
	return json.Marshal(marshaler)
}

func (i *InitiatedAdHocExecutePromptEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The initial data returned indicating that the response from the model has returned and begun streaming.
type InitiatedExecutePromptEvent struct {
	Meta        *InitiatedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedExecutePromptEvent) State() string {
	return i.state
}

func (i *InitiatedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed InitiatedExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InitiatedExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "INITIATED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "INITIATED", unmarshaler.State)
	}
	i.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *i, "state")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed InitiatedExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*i),
		State: "INITIATED",
	}
	return json.Marshal(marshaler)
}

func (i *InitiatedExecutePromptEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type InitiatedPromptExecutionMeta struct {
	ModelName            *string `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int    `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedPromptExecutionMeta) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An event that indicates that the node has initiated its execution.
type InitiatedWorkflowNodeResultEvent struct {
	Id                string                            `json:"id" url:"id"`
	NodeId            string                            `json:"node_id" url:"node_id"`
	NodeResultId      string                            `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                        `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData           `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                           `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	InputValues       []*NodeInputVariableCompiledValue `json:"input_values,omitempty" url:"input_values,omitempty"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedWorkflowNodeResultEvent) State() string {
	return i.state
}

func (i *InitiatedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed InitiatedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InitiatedWorkflowNodeResultEvent(unmarshaler.embed)
	i.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "INITIATED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", i, "INITIATED", unmarshaler.State)
	}
	i.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *i, "state")
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed InitiatedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*i),
		Ts:    core.NewOptionalDateTime(i.Ts),
		State: "INITIATED",
	}
	return json.Marshal(marshaler)
}

func (i *InitiatedWorkflowNodeResultEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Configuration for using an Instructor vectorizer.
type InstructorVectorizerConfig struct {
	InstructionDomain           string `json:"instruction_domain" url:"instruction_domain"`
	InstructionQueryTextType    string `json:"instruction_query_text_type" url:"instruction_query_text_type"`
	InstructionDocumentTextType string `json:"instruction_document_text_type" url:"instruction_document_text_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InstructorVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InstructorVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler InstructorVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InstructorVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InstructorVectorizerConfig) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Configuration for using an Instructor vectorizer.
type InstructorVectorizerConfigRequest struct {
	InstructionDomain           string `json:"instruction_domain" url:"instruction_domain"`
	InstructionQueryTextType    string `json:"instruction_query_text_type" url:"instruction_query_text_type"`
	InstructionDocumentTextType string `json:"instruction_document_text_type" url:"instruction_document_text_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InstructorVectorizerConfigRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InstructorVectorizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler InstructorVectorizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InstructorVectorizerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InstructorVectorizerConfigRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// - `INITIATED` - INITIATED
// - `FULFILLED` - FULFILLED
// - `REJECTED` - REJECTED
type IterationStateEnum string

const (
	IterationStateEnumInitiated IterationStateEnum = "INITIATED"
	IterationStateEnumFulfilled IterationStateEnum = "FULFILLED"
	IterationStateEnumRejected  IterationStateEnum = "REJECTED"
)

func NewIterationStateEnumFromString(s string) (IterationStateEnum, error) {
	switch s {
	case "INITIATED":
		return IterationStateEnumInitiated, nil
	case "FULFILLED":
		return IterationStateEnumFulfilled, nil
	case "REJECTED":
		return IterationStateEnumRejected, nil
	}
	var t IterationStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IterationStateEnum) Ptr() *IterationStateEnum {
	return &i
}

// A block of Jinja template code that is used to generate a prompt
type JinjaPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Properties  *JinjaPromptBlockProperties `json:"properties" url:"properties"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JinjaPromptBlock) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JinjaPromptBlock) BlockType() string {
	return j.blockType
}

func (j *JinjaPromptBlock) UnmarshalJSON(data []byte) error {
	type embed JinjaPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JinjaPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "JINJA" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JINJA", unmarshaler.BlockType)
	}
	j.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *j, "block_type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JinjaPromptBlock) MarshalJSON() ([]byte, error) {
	type embed JinjaPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*j),
		BlockType: "JINJA",
	}
	return json.Marshal(marshaler)
}

func (j *JinjaPromptBlock) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JinjaPromptBlockProperties struct {
	Template     *string             `json:"template,omitempty" url:"template,omitempty"`
	TemplateType *VellumVariableType `json:"template_type,omitempty" url:"template_type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JinjaPromptBlockProperties) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JinjaPromptBlockProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler JinjaPromptBlockProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JinjaPromptBlockProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JinjaPromptBlockProperties) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A user input representing a JSON object
type JsonInputRequest struct {
	// The variable's name
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonInputRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonInputRequest) Type() string {
	return j.type_
}

func (j *JsonInputRequest) UnmarshalJSON(data []byte) error {
	type embed JsonInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonInputRequest) MarshalJSON() ([]byte, error) {
	type embed JsonInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonInputRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JsonVariableValue struct {
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVariableValue) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVariableValue) Type() string {
	return j.type_
}

func (j *JsonVariableValue) UnmarshalJSON(data []byte) error {
	type embed JsonVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVariableValue) MarshalJSON() ([]byte, error) {
	type embed JsonVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonVariableValue) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A value representing a JSON object.
type JsonVellumValue struct {
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVellumValue) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVellumValue) Type() string {
	return j.type_
}

func (j *JsonVellumValue) UnmarshalJSON(data []byte) error {
	type embed JsonVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVellumValue) MarshalJSON() ([]byte, error) {
	type embed JsonVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonVellumValue) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A value representing a JSON object.
type JsonVellumValueRequest struct {
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVellumValueRequest) Type() string {
	return j.type_
}

func (j *JsonVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed JsonVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = JsonVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "JSON", unmarshaler.Type)
	}
	j.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *j, "type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed JsonVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*j),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (j *JsonVellumValueRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// - `=` - EQUALS
// - `!=` - DOES_NOT_EQUAL
// - `<` - LESS_THAN
// - `>` - GREATER_THAN
// - `<=` - LESS_THAN_OR_EQUAL_TO
// - `>=` - GREATER_THAN_OR_EQUAL_TO
// - `contains` - CONTAINS
// - `beginsWith` - BEGINS_WITH
// - `endsWith` - ENDS_WITH
// - `doesNotContain` - DOES_NOT_CONTAIN
// - `doesNotBeginWith` - DOES_NOT_BEGIN_WITH
// - `doesNotEndWith` - DOES_NOT_END_WITH
// - `null` - NULL
// - `notNull` - NOT_NULL
// - `in` - IN
// - `notIn` - NOT_IN
// - `between` - BETWEEN
// - `notBetween` - NOT_BETWEEN
// - `blank` - BLANK
// - `notBlank` - NOT_BLANK
type LogicalOperator string

const (
	// Equals
	LogicalOperatorEquals LogicalOperator = "="
	// Does not equal
	LogicalOperatorDoesNotEqual LogicalOperator = "!="
	// Less than
	LogicalOperatorLessThan LogicalOperator = "<"
	// Greater than
	LogicalOperatorGreaterThan LogicalOperator = ">"
	// Less than or equal to
	LogicalOperatorLessThanOrEqualTo LogicalOperator = "<="
	// Greater than or equal to
	LogicalOperatorGreaterThanOrEqualTo LogicalOperator = ">="
	// Contains
	LogicalOperatorContains LogicalOperator = "contains"
	// Begins with
	LogicalOperatorBeginsWith LogicalOperator = "beginsWith"
	// Ends with
	LogicalOperatorEndsWith LogicalOperator = "endsWith"
	// Does not contain
	LogicalOperatorDoesNotContain LogicalOperator = "doesNotContain"
	// Does not begin with
	LogicalOperatorDoesNotBeginWith LogicalOperator = "doesNotBeginWith"
	// Does not end with
	LogicalOperatorDoesNotEndWith LogicalOperator = "doesNotEndWith"
	// Null
	LogicalOperatorNull LogicalOperator = "null"
	// Not null
	LogicalOperatorNotNull LogicalOperator = "notNull"
	// In
	LogicalOperatorIn LogicalOperator = "in"
	// Not in
	LogicalOperatorNotIn LogicalOperator = "notIn"
	// Between
	LogicalOperatorBetween LogicalOperator = "between"
	// Not between
	LogicalOperatorNotBetween LogicalOperator = "notBetween"
	LogicalOperatorBlank      LogicalOperator = "blank"
	LogicalOperatorNotBlank   LogicalOperator = "notBlank"
)

func NewLogicalOperatorFromString(s string) (LogicalOperator, error) {
	switch s {
	case "=":
		return LogicalOperatorEquals, nil
	case "!=":
		return LogicalOperatorDoesNotEqual, nil
	case "<":
		return LogicalOperatorLessThan, nil
	case ">":
		return LogicalOperatorGreaterThan, nil
	case "<=":
		return LogicalOperatorLessThanOrEqualTo, nil
	case ">=":
		return LogicalOperatorGreaterThanOrEqualTo, nil
	case "contains":
		return LogicalOperatorContains, nil
	case "beginsWith":
		return LogicalOperatorBeginsWith, nil
	case "endsWith":
		return LogicalOperatorEndsWith, nil
	case "doesNotContain":
		return LogicalOperatorDoesNotContain, nil
	case "doesNotBeginWith":
		return LogicalOperatorDoesNotBeginWith, nil
	case "doesNotEndWith":
		return LogicalOperatorDoesNotEndWith, nil
	case "null":
		return LogicalOperatorNull, nil
	case "notNull":
		return LogicalOperatorNotNull, nil
	case "in":
		return LogicalOperatorIn, nil
	case "notIn":
		return LogicalOperatorNotIn, nil
	case "between":
		return LogicalOperatorBetween, nil
	case "notBetween":
		return LogicalOperatorNotBetween, nil
	case "blank":
		return LogicalOperatorBlank, nil
	case "notBlank":
		return LogicalOperatorNotBlank, nil
	}
	var t LogicalOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogicalOperator) Ptr() *LogicalOperator {
	return &l
}

// - `ALL` - ALL
// - `NONE` - NONE
type LogprobsEnum string

const (
	LogprobsEnumAll  LogprobsEnum = "ALL"
	LogprobsEnumNone LogprobsEnum = "NONE"
)

func NewLogprobsEnumFromString(s string) (LogprobsEnum, error) {
	switch s {
	case "ALL":
		return LogprobsEnumAll, nil
	case "NONE":
		return LogprobsEnumNone, nil
	}
	var t LogprobsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogprobsEnum) Ptr() *LogprobsEnum {
	return &l
}

// A Node Result Event emitted from a Map Node.
type MapNodeResult struct {
	Data  *MapNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MapNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MapNodeResult) Type() string {
	return m.type_
}

func (m *MapNodeResult) UnmarshalJSON(data []byte) error {
	type embed MapNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MapNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "MAP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "MAP", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *m, "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MapNodeResult) MarshalJSON() ([]byte, error) {
	type embed MapNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
		Type:  "MAP",
	}
	return json.Marshal(marshaler)
}

func (m *MapNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MapNodeResultData struct {
	ExecutionIds   []string            `json:"execution_ids" url:"execution_ids"`
	IterationState *IterationStateEnum `json:"iteration_state,omitempty" url:"iteration_state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MapNodeResultData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MapNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler MapNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MapNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MapNodeResultData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A Node Result Event emitted from a Merge Node.
type MergeNodeResult struct {
	Data  *MergeNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MergeNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MergeNodeResult) Type() string {
	return m.type_
}

func (m *MergeNodeResult) UnmarshalJSON(data []byte) error {
	type embed MergeNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MergeNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "MERGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "MERGE", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *m, "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MergeNodeResult) MarshalJSON() ([]byte, error) {
	type embed MergeNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
		Type:  "MERGE",
	}
	return json.Marshal(marshaler)
}

func (m *MergeNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MergeNodeResultData struct {
	PausedNodeData map[string]interface{} `json:"paused_node_data,omitempty" url:"paused_node_data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MergeNodeResultData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MergeNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler MergeNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MergeNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MergeNodeResultData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A deprecated pattern for filtering on metadata. Please use MetadataFilters instead.
type MetadataFilterConfigRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetadataFilterConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataFilterConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `and` - AND
// - `or` - OR
type MetadataFilterRuleCombinator string

const (
	MetadataFilterRuleCombinatorAnd MetadataFilterRuleCombinator = "and"
	MetadataFilterRuleCombinatorOr  MetadataFilterRuleCombinator = "or"
)

func NewMetadataFilterRuleCombinatorFromString(s string) (MetadataFilterRuleCombinator, error) {
	switch s {
	case "and":
		return MetadataFilterRuleCombinatorAnd, nil
	case "or":
		return MetadataFilterRuleCombinatorOr, nil
	}
	var t MetadataFilterRuleCombinator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetadataFilterRuleCombinator) Ptr() *MetadataFilterRuleCombinator {
	return &m
}

type MetadataFilterRuleRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetadataFilterRuleRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataFilterRuleRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterRuleRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterRuleRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterRuleRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetadataFiltersRequest struct {
	MetadataFilterConfigRequest         *MetadataFilterConfigRequest
	VellumValueLogicalExpressionRequest *VellumValueLogicalExpressionRequest
}

func (m *MetadataFiltersRequest) UnmarshalJSON(data []byte) error {
	valueMetadataFilterConfigRequest := new(MetadataFilterConfigRequest)
	if err := json.Unmarshal(data, &valueMetadataFilterConfigRequest); err == nil {
		m.MetadataFilterConfigRequest = valueMetadataFilterConfigRequest
		return nil
	}
	valueVellumValueLogicalExpressionRequest := new(VellumValueLogicalExpressionRequest)
	if err := json.Unmarshal(data, &valueVellumValueLogicalExpressionRequest); err == nil {
		m.VellumValueLogicalExpressionRequest = valueVellumValueLogicalExpressionRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MetadataFiltersRequest) MarshalJSON() ([]byte, error) {
	if m.MetadataFilterConfigRequest != nil {
		return json.Marshal(m.MetadataFilterConfigRequest)
	}
	if m.VellumValueLogicalExpressionRequest != nil {
		return json.Marshal(m.VellumValueLogicalExpressionRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MetadataFiltersRequestVisitor interface {
	VisitMetadataFilterConfigRequest(*MetadataFilterConfigRequest) error
	VisitVellumValueLogicalExpressionRequest(*VellumValueLogicalExpressionRequest) error
}

func (m *MetadataFiltersRequest) Accept(visitor MetadataFiltersRequestVisitor) error {
	if m.MetadataFilterConfigRequest != nil {
		return visitor.VisitMetadataFilterConfigRequest(m.MetadataFilterConfigRequest)
	}
	if m.VellumValueLogicalExpressionRequest != nil {
		return visitor.VisitVellumValueLogicalExpressionRequest(m.VellumValueLogicalExpressionRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MetricDefinitionExecution struct {
	Outputs []*TestSuiteRunMetricOutput `json:"outputs" url:"outputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetricDefinitionExecution) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricDefinitionExecution) UnmarshalJSON(data []byte) error {
	type unmarshaler MetricDefinitionExecution
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetricDefinitionExecution(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricDefinitionExecution) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetricDefinitionInputRequest struct {
	StringInputRequest      *StringInputRequest
	JsonInputRequest        *JsonInputRequest
	ChatHistoryInputRequest *ChatHistoryInputRequest
	NumberInputRequest      *NumberInputRequest
}

func (m *MetricDefinitionInputRequest) UnmarshalJSON(data []byte) error {
	valueStringInputRequest := new(StringInputRequest)
	if err := json.Unmarshal(data, &valueStringInputRequest); err == nil {
		m.StringInputRequest = valueStringInputRequest
		return nil
	}
	valueJsonInputRequest := new(JsonInputRequest)
	if err := json.Unmarshal(data, &valueJsonInputRequest); err == nil {
		m.JsonInputRequest = valueJsonInputRequest
		return nil
	}
	valueChatHistoryInputRequest := new(ChatHistoryInputRequest)
	if err := json.Unmarshal(data, &valueChatHistoryInputRequest); err == nil {
		m.ChatHistoryInputRequest = valueChatHistoryInputRequest
		return nil
	}
	valueNumberInputRequest := new(NumberInputRequest)
	if err := json.Unmarshal(data, &valueNumberInputRequest); err == nil {
		m.NumberInputRequest = valueNumberInputRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MetricDefinitionInputRequest) MarshalJSON() ([]byte, error) {
	if m.StringInputRequest != nil {
		return json.Marshal(m.StringInputRequest)
	}
	if m.JsonInputRequest != nil {
		return json.Marshal(m.JsonInputRequest)
	}
	if m.ChatHistoryInputRequest != nil {
		return json.Marshal(m.ChatHistoryInputRequest)
	}
	if m.NumberInputRequest != nil {
		return json.Marshal(m.NumberInputRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MetricDefinitionInputRequestVisitor interface {
	VisitStringInputRequest(*StringInputRequest) error
	VisitJsonInputRequest(*JsonInputRequest) error
	VisitChatHistoryInputRequest(*ChatHistoryInputRequest) error
	VisitNumberInputRequest(*NumberInputRequest) error
}

func (m *MetricDefinitionInputRequest) Accept(visitor MetricDefinitionInputRequestVisitor) error {
	if m.StringInputRequest != nil {
		return visitor.VisitStringInputRequest(m.StringInputRequest)
	}
	if m.JsonInputRequest != nil {
		return visitor.VisitJsonInputRequest(m.JsonInputRequest)
	}
	if m.ChatHistoryInputRequest != nil {
		return visitor.VisitChatHistoryInputRequest(m.ChatHistoryInputRequest)
	}
	if m.NumberInputRequest != nil {
		return visitor.VisitNumberInputRequest(m.NumberInputRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}

// A Node Result Event emitted from a Metric Node.
type MetricNodeResult struct {
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetricNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricNodeResult) Type() string {
	return m.type_
}

func (m *MetricNodeResult) UnmarshalJSON(data []byte) error {
	type embed MetricNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MetricNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "METRIC" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", m, "METRIC", unmarshaler.Type)
	}
	m.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *m, "type")
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricNodeResult) MarshalJSON() ([]byte, error) {
	type embed MetricNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*m),
		Type:  "METRIC",
	}
	return json.Marshal(marshaler)
}

func (m *MetricNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelUsage struct {
	OutputTokenCount         *int `json:"output_token_count,omitempty" url:"output_token_count,omitempty"`
	InputTokenCount          *int `json:"input_token_count,omitempty" url:"input_token_count,omitempty"`
	InputCharCount           *int `json:"input_char_count,omitempty" url:"input_char_count,omitempty"`
	OutputCharCount          *int `json:"output_char_count,omitempty" url:"output_char_count,omitempty"`
	ComputeNanos             *int `json:"compute_nanos,omitempty" url:"compute_nanos,omitempty"`
	CacheCreationInputTokens *int `json:"cache_creation_input_tokens,omitempty" url:"cache_creation_input_tokens,omitempty"`
	CacheReadInputTokens     *int `json:"cache_read_input_tokens,omitempty" url:"cache_read_input_tokens,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelUsage) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelUsage) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelUsage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelUsage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelUsage) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Named Prompt Sandbox Scenario input value that is of type CHAT_HISTORY
type NamedScenarioInputChatHistoryVariableValueRequest struct {
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedScenarioInputChatHistoryVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedScenarioInputChatHistoryVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedScenarioInputChatHistoryVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Prompt Sandbox Scenario input value that is of type JSON
type NamedScenarioInputJsonVariableValueRequest struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedScenarioInputJsonVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedScenarioInputJsonVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedScenarioInputJsonVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedScenarioInputJsonVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedScenarioInputJsonVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedScenarioInputJsonVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedScenarioInputJsonVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NamedScenarioInputJsonVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedScenarioInputRequest struct {
	NamedScenarioInputStringVariableValueRequest      *NamedScenarioInputStringVariableValueRequest
	NamedScenarioInputJsonVariableValueRequest        *NamedScenarioInputJsonVariableValueRequest
	NamedScenarioInputChatHistoryVariableValueRequest *NamedScenarioInputChatHistoryVariableValueRequest
}

func (n *NamedScenarioInputRequest) UnmarshalJSON(data []byte) error {
	valueNamedScenarioInputStringVariableValueRequest := new(NamedScenarioInputStringVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedScenarioInputStringVariableValueRequest); err == nil {
		n.NamedScenarioInputStringVariableValueRequest = valueNamedScenarioInputStringVariableValueRequest
		return nil
	}
	valueNamedScenarioInputJsonVariableValueRequest := new(NamedScenarioInputJsonVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedScenarioInputJsonVariableValueRequest); err == nil {
		n.NamedScenarioInputJsonVariableValueRequest = valueNamedScenarioInputJsonVariableValueRequest
		return nil
	}
	valueNamedScenarioInputChatHistoryVariableValueRequest := new(NamedScenarioInputChatHistoryVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedScenarioInputChatHistoryVariableValueRequest); err == nil {
		n.NamedScenarioInputChatHistoryVariableValueRequest = valueNamedScenarioInputChatHistoryVariableValueRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NamedScenarioInputRequest) MarshalJSON() ([]byte, error) {
	if n.NamedScenarioInputStringVariableValueRequest != nil {
		return json.Marshal(n.NamedScenarioInputStringVariableValueRequest)
	}
	if n.NamedScenarioInputJsonVariableValueRequest != nil {
		return json.Marshal(n.NamedScenarioInputJsonVariableValueRequest)
	}
	if n.NamedScenarioInputChatHistoryVariableValueRequest != nil {
		return json.Marshal(n.NamedScenarioInputChatHistoryVariableValueRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NamedScenarioInputRequestVisitor interface {
	VisitNamedScenarioInputStringVariableValueRequest(*NamedScenarioInputStringVariableValueRequest) error
	VisitNamedScenarioInputJsonVariableValueRequest(*NamedScenarioInputJsonVariableValueRequest) error
	VisitNamedScenarioInputChatHistoryVariableValueRequest(*NamedScenarioInputChatHistoryVariableValueRequest) error
}

func (n *NamedScenarioInputRequest) Accept(visitor NamedScenarioInputRequestVisitor) error {
	if n.NamedScenarioInputStringVariableValueRequest != nil {
		return visitor.VisitNamedScenarioInputStringVariableValueRequest(n.NamedScenarioInputStringVariableValueRequest)
	}
	if n.NamedScenarioInputJsonVariableValueRequest != nil {
		return visitor.VisitNamedScenarioInputJsonVariableValueRequest(n.NamedScenarioInputJsonVariableValueRequest)
	}
	if n.NamedScenarioInputChatHistoryVariableValueRequest != nil {
		return visitor.VisitNamedScenarioInputChatHistoryVariableValueRequest(n.NamedScenarioInputChatHistoryVariableValueRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

// Named Prompt Sandbox Scenario input value that is of type STRING
type NamedScenarioInputStringVariableValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedScenarioInputStringVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedScenarioInputStringVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedScenarioInputStringVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedScenarioInputStringVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedScenarioInputStringVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedScenarioInputStringVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedScenarioInputStringVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NamedScenarioInputStringVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ARRAY
type NamedTestCaseArrayVariableValue struct {
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	Name  string         `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseArrayVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseArrayVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseArrayVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseArrayVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseArrayVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ARRAY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseArrayVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseArrayVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseArrayVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ARRAY
type NamedTestCaseArrayVariableValueRequest struct {
	Value []*VellumValueRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseArrayVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseArrayVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseArrayVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseArrayVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseArrayVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ARRAY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseArrayVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseArrayVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseArrayVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type CHAT_HISTORY
type NamedTestCaseChatHistoryVariableValue struct {
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	Name  string         `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseChatHistoryVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseChatHistoryVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseChatHistoryVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseChatHistoryVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseChatHistoryVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseChatHistoryVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseChatHistoryVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type CHAT_HISTORY
type NamedTestCaseChatHistoryVariableValueRequest struct {
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseChatHistoryVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseChatHistoryVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseChatHistoryVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ERROR
type NamedTestCaseErrorVariableValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	Name  string       `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseErrorVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseErrorVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseErrorVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseErrorVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseErrorVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ERROR", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseErrorVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseErrorVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseErrorVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ERROR
type NamedTestCaseErrorVariableValueRequest struct {
	Value *VellumErrorRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string              `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseErrorVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseErrorVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseErrorVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseErrorVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseErrorVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ERROR", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseErrorVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseErrorVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseErrorVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type FUNCTION_CALL
type NamedTestCaseFunctionCallVariableValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	Name  string        `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseFunctionCallVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseFunctionCallVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseFunctionCallVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseFunctionCallVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseFunctionCallVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "FUNCTION_CALL", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseFunctionCallVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseFunctionCallVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseFunctionCallVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type FUNCTION_CALL
type NamedTestCaseFunctionCallVariableValueRequest struct {
	Value *FunctionCallRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string               `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseFunctionCallVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseFunctionCallVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "FUNCTION_CALL", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseFunctionCallVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type JSON
type NamedTestCaseJsonVariableValue struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseJsonVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseJsonVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseJsonVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseJsonVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseJsonVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseJsonVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseJsonVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseJsonVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type JSON
type NamedTestCaseJsonVariableValueRequest struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseJsonVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseJsonVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseJsonVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseJsonVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseJsonVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseJsonVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseJsonVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseJsonVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type NUMBER
type NamedTestCaseNumberVariableValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseNumberVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseNumberVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseNumberVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseNumberVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseNumberVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseNumberVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseNumberVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseNumberVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type NUMBER
type NamedTestCaseNumberVariableValueRequest struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseNumberVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseNumberVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseNumberVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseNumberVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseNumberVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseNumberVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseNumberVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseNumberVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type SEARCH_RESULTS
type NamedTestCaseSearchResultsVariableValue struct {
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	Name  string          `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseSearchResultsVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseSearchResultsVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseSearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseSearchResultsVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseSearchResultsVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SEARCH_RESULTS", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseSearchResultsVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseSearchResultsVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseSearchResultsVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type SEARCH_RESULTS
type NamedTestCaseSearchResultsVariableValueRequest struct {
	Value []*SearchResultRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                 `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseSearchResultsVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseSearchResultsVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SEARCH_RESULTS", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseSearchResultsVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type STRING
type NamedTestCaseStringVariableValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseStringVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseStringVariableValue) Type() string {
	return n.type_
}

func (n *NamedTestCaseStringVariableValue) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseStringVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseStringVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseStringVariableValue) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseStringVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseStringVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type STRING
type NamedTestCaseStringVariableValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseStringVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseStringVariableValueRequest) Type() string {
	return n.type_
}

func (n *NamedTestCaseStringVariableValueRequest) UnmarshalJSON(data []byte) error {
	type embed NamedTestCaseStringVariableValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NamedTestCaseStringVariableValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseStringVariableValueRequest) MarshalJSON() ([]byte, error) {
	type embed NamedTestCaseStringVariableValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NamedTestCaseStringVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseVariableValue struct {
	NamedTestCaseStringVariableValue        *NamedTestCaseStringVariableValue
	NamedTestCaseNumberVariableValue        *NamedTestCaseNumberVariableValue
	NamedTestCaseJsonVariableValue          *NamedTestCaseJsonVariableValue
	NamedTestCaseChatHistoryVariableValue   *NamedTestCaseChatHistoryVariableValue
	NamedTestCaseSearchResultsVariableValue *NamedTestCaseSearchResultsVariableValue
	NamedTestCaseErrorVariableValue         *NamedTestCaseErrorVariableValue
	NamedTestCaseFunctionCallVariableValue  *NamedTestCaseFunctionCallVariableValue
	NamedTestCaseArrayVariableValue         *NamedTestCaseArrayVariableValue
}

func (n *NamedTestCaseVariableValue) UnmarshalJSON(data []byte) error {
	valueNamedTestCaseStringVariableValue := new(NamedTestCaseStringVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseStringVariableValue); err == nil {
		n.NamedTestCaseStringVariableValue = valueNamedTestCaseStringVariableValue
		return nil
	}
	valueNamedTestCaseNumberVariableValue := new(NamedTestCaseNumberVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseNumberVariableValue); err == nil {
		n.NamedTestCaseNumberVariableValue = valueNamedTestCaseNumberVariableValue
		return nil
	}
	valueNamedTestCaseJsonVariableValue := new(NamedTestCaseJsonVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseJsonVariableValue); err == nil {
		n.NamedTestCaseJsonVariableValue = valueNamedTestCaseJsonVariableValue
		return nil
	}
	valueNamedTestCaseChatHistoryVariableValue := new(NamedTestCaseChatHistoryVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseChatHistoryVariableValue); err == nil {
		n.NamedTestCaseChatHistoryVariableValue = valueNamedTestCaseChatHistoryVariableValue
		return nil
	}
	valueNamedTestCaseSearchResultsVariableValue := new(NamedTestCaseSearchResultsVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseSearchResultsVariableValue); err == nil {
		n.NamedTestCaseSearchResultsVariableValue = valueNamedTestCaseSearchResultsVariableValue
		return nil
	}
	valueNamedTestCaseErrorVariableValue := new(NamedTestCaseErrorVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseErrorVariableValue); err == nil {
		n.NamedTestCaseErrorVariableValue = valueNamedTestCaseErrorVariableValue
		return nil
	}
	valueNamedTestCaseFunctionCallVariableValue := new(NamedTestCaseFunctionCallVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseFunctionCallVariableValue); err == nil {
		n.NamedTestCaseFunctionCallVariableValue = valueNamedTestCaseFunctionCallVariableValue
		return nil
	}
	valueNamedTestCaseArrayVariableValue := new(NamedTestCaseArrayVariableValue)
	if err := json.Unmarshal(data, &valueNamedTestCaseArrayVariableValue); err == nil {
		n.NamedTestCaseArrayVariableValue = valueNamedTestCaseArrayVariableValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NamedTestCaseVariableValue) MarshalJSON() ([]byte, error) {
	if n.NamedTestCaseStringVariableValue != nil {
		return json.Marshal(n.NamedTestCaseStringVariableValue)
	}
	if n.NamedTestCaseNumberVariableValue != nil {
		return json.Marshal(n.NamedTestCaseNumberVariableValue)
	}
	if n.NamedTestCaseJsonVariableValue != nil {
		return json.Marshal(n.NamedTestCaseJsonVariableValue)
	}
	if n.NamedTestCaseChatHistoryVariableValue != nil {
		return json.Marshal(n.NamedTestCaseChatHistoryVariableValue)
	}
	if n.NamedTestCaseSearchResultsVariableValue != nil {
		return json.Marshal(n.NamedTestCaseSearchResultsVariableValue)
	}
	if n.NamedTestCaseErrorVariableValue != nil {
		return json.Marshal(n.NamedTestCaseErrorVariableValue)
	}
	if n.NamedTestCaseFunctionCallVariableValue != nil {
		return json.Marshal(n.NamedTestCaseFunctionCallVariableValue)
	}
	if n.NamedTestCaseArrayVariableValue != nil {
		return json.Marshal(n.NamedTestCaseArrayVariableValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NamedTestCaseVariableValueVisitor interface {
	VisitNamedTestCaseStringVariableValue(*NamedTestCaseStringVariableValue) error
	VisitNamedTestCaseNumberVariableValue(*NamedTestCaseNumberVariableValue) error
	VisitNamedTestCaseJsonVariableValue(*NamedTestCaseJsonVariableValue) error
	VisitNamedTestCaseChatHistoryVariableValue(*NamedTestCaseChatHistoryVariableValue) error
	VisitNamedTestCaseSearchResultsVariableValue(*NamedTestCaseSearchResultsVariableValue) error
	VisitNamedTestCaseErrorVariableValue(*NamedTestCaseErrorVariableValue) error
	VisitNamedTestCaseFunctionCallVariableValue(*NamedTestCaseFunctionCallVariableValue) error
	VisitNamedTestCaseArrayVariableValue(*NamedTestCaseArrayVariableValue) error
}

func (n *NamedTestCaseVariableValue) Accept(visitor NamedTestCaseVariableValueVisitor) error {
	if n.NamedTestCaseStringVariableValue != nil {
		return visitor.VisitNamedTestCaseStringVariableValue(n.NamedTestCaseStringVariableValue)
	}
	if n.NamedTestCaseNumberVariableValue != nil {
		return visitor.VisitNamedTestCaseNumberVariableValue(n.NamedTestCaseNumberVariableValue)
	}
	if n.NamedTestCaseJsonVariableValue != nil {
		return visitor.VisitNamedTestCaseJsonVariableValue(n.NamedTestCaseJsonVariableValue)
	}
	if n.NamedTestCaseChatHistoryVariableValue != nil {
		return visitor.VisitNamedTestCaseChatHistoryVariableValue(n.NamedTestCaseChatHistoryVariableValue)
	}
	if n.NamedTestCaseSearchResultsVariableValue != nil {
		return visitor.VisitNamedTestCaseSearchResultsVariableValue(n.NamedTestCaseSearchResultsVariableValue)
	}
	if n.NamedTestCaseErrorVariableValue != nil {
		return visitor.VisitNamedTestCaseErrorVariableValue(n.NamedTestCaseErrorVariableValue)
	}
	if n.NamedTestCaseFunctionCallVariableValue != nil {
		return visitor.VisitNamedTestCaseFunctionCallVariableValue(n.NamedTestCaseFunctionCallVariableValue)
	}
	if n.NamedTestCaseArrayVariableValue != nil {
		return visitor.VisitNamedTestCaseArrayVariableValue(n.NamedTestCaseArrayVariableValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NamedTestCaseVariableValueRequest struct {
	NamedTestCaseStringVariableValueRequest        *NamedTestCaseStringVariableValueRequest
	NamedTestCaseNumberVariableValueRequest        *NamedTestCaseNumberVariableValueRequest
	NamedTestCaseJsonVariableValueRequest          *NamedTestCaseJsonVariableValueRequest
	NamedTestCaseChatHistoryVariableValueRequest   *NamedTestCaseChatHistoryVariableValueRequest
	NamedTestCaseSearchResultsVariableValueRequest *NamedTestCaseSearchResultsVariableValueRequest
	NamedTestCaseErrorVariableValueRequest         *NamedTestCaseErrorVariableValueRequest
	NamedTestCaseFunctionCallVariableValueRequest  *NamedTestCaseFunctionCallVariableValueRequest
	NamedTestCaseArrayVariableValueRequest         *NamedTestCaseArrayVariableValueRequest
}

func (n *NamedTestCaseVariableValueRequest) UnmarshalJSON(data []byte) error {
	valueNamedTestCaseStringVariableValueRequest := new(NamedTestCaseStringVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseStringVariableValueRequest); err == nil {
		n.NamedTestCaseStringVariableValueRequest = valueNamedTestCaseStringVariableValueRequest
		return nil
	}
	valueNamedTestCaseNumberVariableValueRequest := new(NamedTestCaseNumberVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseNumberVariableValueRequest); err == nil {
		n.NamedTestCaseNumberVariableValueRequest = valueNamedTestCaseNumberVariableValueRequest
		return nil
	}
	valueNamedTestCaseJsonVariableValueRequest := new(NamedTestCaseJsonVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseJsonVariableValueRequest); err == nil {
		n.NamedTestCaseJsonVariableValueRequest = valueNamedTestCaseJsonVariableValueRequest
		return nil
	}
	valueNamedTestCaseChatHistoryVariableValueRequest := new(NamedTestCaseChatHistoryVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseChatHistoryVariableValueRequest); err == nil {
		n.NamedTestCaseChatHistoryVariableValueRequest = valueNamedTestCaseChatHistoryVariableValueRequest
		return nil
	}
	valueNamedTestCaseSearchResultsVariableValueRequest := new(NamedTestCaseSearchResultsVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseSearchResultsVariableValueRequest); err == nil {
		n.NamedTestCaseSearchResultsVariableValueRequest = valueNamedTestCaseSearchResultsVariableValueRequest
		return nil
	}
	valueNamedTestCaseErrorVariableValueRequest := new(NamedTestCaseErrorVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseErrorVariableValueRequest); err == nil {
		n.NamedTestCaseErrorVariableValueRequest = valueNamedTestCaseErrorVariableValueRequest
		return nil
	}
	valueNamedTestCaseFunctionCallVariableValueRequest := new(NamedTestCaseFunctionCallVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseFunctionCallVariableValueRequest); err == nil {
		n.NamedTestCaseFunctionCallVariableValueRequest = valueNamedTestCaseFunctionCallVariableValueRequest
		return nil
	}
	valueNamedTestCaseArrayVariableValueRequest := new(NamedTestCaseArrayVariableValueRequest)
	if err := json.Unmarshal(data, &valueNamedTestCaseArrayVariableValueRequest); err == nil {
		n.NamedTestCaseArrayVariableValueRequest = valueNamedTestCaseArrayVariableValueRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NamedTestCaseVariableValueRequest) MarshalJSON() ([]byte, error) {
	if n.NamedTestCaseStringVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseStringVariableValueRequest)
	}
	if n.NamedTestCaseNumberVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseNumberVariableValueRequest)
	}
	if n.NamedTestCaseJsonVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseJsonVariableValueRequest)
	}
	if n.NamedTestCaseChatHistoryVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseChatHistoryVariableValueRequest)
	}
	if n.NamedTestCaseSearchResultsVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseSearchResultsVariableValueRequest)
	}
	if n.NamedTestCaseErrorVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseErrorVariableValueRequest)
	}
	if n.NamedTestCaseFunctionCallVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseFunctionCallVariableValueRequest)
	}
	if n.NamedTestCaseArrayVariableValueRequest != nil {
		return json.Marshal(n.NamedTestCaseArrayVariableValueRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NamedTestCaseVariableValueRequestVisitor interface {
	VisitNamedTestCaseStringVariableValueRequest(*NamedTestCaseStringVariableValueRequest) error
	VisitNamedTestCaseNumberVariableValueRequest(*NamedTestCaseNumberVariableValueRequest) error
	VisitNamedTestCaseJsonVariableValueRequest(*NamedTestCaseJsonVariableValueRequest) error
	VisitNamedTestCaseChatHistoryVariableValueRequest(*NamedTestCaseChatHistoryVariableValueRequest) error
	VisitNamedTestCaseSearchResultsVariableValueRequest(*NamedTestCaseSearchResultsVariableValueRequest) error
	VisitNamedTestCaseErrorVariableValueRequest(*NamedTestCaseErrorVariableValueRequest) error
	VisitNamedTestCaseFunctionCallVariableValueRequest(*NamedTestCaseFunctionCallVariableValueRequest) error
	VisitNamedTestCaseArrayVariableValueRequest(*NamedTestCaseArrayVariableValueRequest) error
}

func (n *NamedTestCaseVariableValueRequest) Accept(visitor NamedTestCaseVariableValueRequestVisitor) error {
	if n.NamedTestCaseStringVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseStringVariableValueRequest(n.NamedTestCaseStringVariableValueRequest)
	}
	if n.NamedTestCaseNumberVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseNumberVariableValueRequest(n.NamedTestCaseNumberVariableValueRequest)
	}
	if n.NamedTestCaseJsonVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseJsonVariableValueRequest(n.NamedTestCaseJsonVariableValueRequest)
	}
	if n.NamedTestCaseChatHistoryVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseChatHistoryVariableValueRequest(n.NamedTestCaseChatHistoryVariableValueRequest)
	}
	if n.NamedTestCaseSearchResultsVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseSearchResultsVariableValueRequest(n.NamedTestCaseSearchResultsVariableValueRequest)
	}
	if n.NamedTestCaseErrorVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseErrorVariableValueRequest(n.NamedTestCaseErrorVariableValueRequest)
	}
	if n.NamedTestCaseFunctionCallVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseFunctionCallVariableValueRequest(n.NamedTestCaseFunctionCallVariableValueRequest)
	}
	if n.NamedTestCaseArrayVariableValueRequest != nil {
		return visitor.VisitNamedTestCaseArrayVariableValueRequest(n.NamedTestCaseArrayVariableValueRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NodeInputCompiledArrayValue struct {
	NodeInputId string         `json:"node_input_id" url:"node_input_id"`
	Key         string         `json:"key" url:"key"`
	Value       []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledArrayValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledArrayValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledArrayValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledArrayValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ARRAY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledArrayValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledArrayValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledChatHistoryValue struct {
	NodeInputId string         `json:"node_input_id" url:"node_input_id"`
	Key         string         `json:"key" url:"key"`
	Value       []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledChatHistoryValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledChatHistoryValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledChatHistoryValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledChatHistoryValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledChatHistoryValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledChatHistoryValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledErrorValue struct {
	NodeInputId string       `json:"node_input_id" url:"node_input_id"`
	Key         string       `json:"key" url:"key"`
	Value       *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledErrorValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledErrorValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledErrorValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledErrorValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ERROR", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledErrorValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledErrorValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledFunctionCallValue struct {
	NodeInputId string        `json:"node_input_id" url:"node_input_id"`
	Key         string        `json:"key" url:"key"`
	Value       *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledFunctionCallValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledFunctionCallValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledFunctionCallValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledFunctionCallValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledFunctionCallValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "FUNCTION_CALL", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledFunctionCallValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledFunctionCallValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledFunctionCallValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledJsonValue struct {
	NodeInputId string      `json:"node_input_id" url:"node_input_id"`
	Key         string      `json:"key" url:"key"`
	Value       interface{} `json:"value" url:"value"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledJsonValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledJsonValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledJsonValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledJsonValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledJsonValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledJsonValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledNumberValue struct {
	NodeInputId string   `json:"node_input_id" url:"node_input_id"`
	Key         string   `json:"key" url:"key"`
	Value       *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledNumberValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledNumberValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledNumberValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledNumberValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledNumberValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledNumberValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledSearchResultsValue struct {
	NodeInputId string          `json:"node_input_id" url:"node_input_id"`
	Key         string          `json:"key" url:"key"`
	Value       []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledSearchResultsValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledSearchResultsValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledSearchResultsValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledSearchResultsValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SEARCH_RESULTS", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledSearchResultsValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledSearchResultsValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledStringValue struct {
	NodeInputId string  `json:"node_input_id" url:"node_input_id"`
	Key         string  `json:"key" url:"key"`
	Value       *string `json:"value,omitempty" url:"value,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledStringValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledStringValue) Type() string {
	return n.type_
}

func (n *NodeInputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type embed NodeInputCompiledStringValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeInputCompiledStringValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledStringValue) MarshalJSON() ([]byte, error) {
	type embed NodeInputCompiledStringValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NodeInputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputVariableCompiledValue struct {
	NodeInputCompiledStringValue        *NodeInputCompiledStringValue
	NodeInputCompiledNumberValue        *NodeInputCompiledNumberValue
	NodeInputCompiledJsonValue          *NodeInputCompiledJsonValue
	NodeInputCompiledChatHistoryValue   *NodeInputCompiledChatHistoryValue
	NodeInputCompiledSearchResultsValue *NodeInputCompiledSearchResultsValue
	NodeInputCompiledErrorValue         *NodeInputCompiledErrorValue
	NodeInputCompiledArrayValue         *NodeInputCompiledArrayValue
	NodeInputCompiledFunctionCallValue  *NodeInputCompiledFunctionCallValue
}

func (n *NodeInputVariableCompiledValue) UnmarshalJSON(data []byte) error {
	valueNodeInputCompiledStringValue := new(NodeInputCompiledStringValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledStringValue); err == nil {
		n.NodeInputCompiledStringValue = valueNodeInputCompiledStringValue
		return nil
	}
	valueNodeInputCompiledNumberValue := new(NodeInputCompiledNumberValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledNumberValue); err == nil {
		n.NodeInputCompiledNumberValue = valueNodeInputCompiledNumberValue
		return nil
	}
	valueNodeInputCompiledJsonValue := new(NodeInputCompiledJsonValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledJsonValue); err == nil {
		n.NodeInputCompiledJsonValue = valueNodeInputCompiledJsonValue
		return nil
	}
	valueNodeInputCompiledChatHistoryValue := new(NodeInputCompiledChatHistoryValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledChatHistoryValue); err == nil {
		n.NodeInputCompiledChatHistoryValue = valueNodeInputCompiledChatHistoryValue
		return nil
	}
	valueNodeInputCompiledSearchResultsValue := new(NodeInputCompiledSearchResultsValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledSearchResultsValue); err == nil {
		n.NodeInputCompiledSearchResultsValue = valueNodeInputCompiledSearchResultsValue
		return nil
	}
	valueNodeInputCompiledErrorValue := new(NodeInputCompiledErrorValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledErrorValue); err == nil {
		n.NodeInputCompiledErrorValue = valueNodeInputCompiledErrorValue
		return nil
	}
	valueNodeInputCompiledArrayValue := new(NodeInputCompiledArrayValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledArrayValue); err == nil {
		n.NodeInputCompiledArrayValue = valueNodeInputCompiledArrayValue
		return nil
	}
	valueNodeInputCompiledFunctionCallValue := new(NodeInputCompiledFunctionCallValue)
	if err := json.Unmarshal(data, &valueNodeInputCompiledFunctionCallValue); err == nil {
		n.NodeInputCompiledFunctionCallValue = valueNodeInputCompiledFunctionCallValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NodeInputVariableCompiledValue) MarshalJSON() ([]byte, error) {
	if n.NodeInputCompiledStringValue != nil {
		return json.Marshal(n.NodeInputCompiledStringValue)
	}
	if n.NodeInputCompiledNumberValue != nil {
		return json.Marshal(n.NodeInputCompiledNumberValue)
	}
	if n.NodeInputCompiledJsonValue != nil {
		return json.Marshal(n.NodeInputCompiledJsonValue)
	}
	if n.NodeInputCompiledChatHistoryValue != nil {
		return json.Marshal(n.NodeInputCompiledChatHistoryValue)
	}
	if n.NodeInputCompiledSearchResultsValue != nil {
		return json.Marshal(n.NodeInputCompiledSearchResultsValue)
	}
	if n.NodeInputCompiledErrorValue != nil {
		return json.Marshal(n.NodeInputCompiledErrorValue)
	}
	if n.NodeInputCompiledArrayValue != nil {
		return json.Marshal(n.NodeInputCompiledArrayValue)
	}
	if n.NodeInputCompiledFunctionCallValue != nil {
		return json.Marshal(n.NodeInputCompiledFunctionCallValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NodeInputVariableCompiledValueVisitor interface {
	VisitNodeInputCompiledStringValue(*NodeInputCompiledStringValue) error
	VisitNodeInputCompiledNumberValue(*NodeInputCompiledNumberValue) error
	VisitNodeInputCompiledJsonValue(*NodeInputCompiledJsonValue) error
	VisitNodeInputCompiledChatHistoryValue(*NodeInputCompiledChatHistoryValue) error
	VisitNodeInputCompiledSearchResultsValue(*NodeInputCompiledSearchResultsValue) error
	VisitNodeInputCompiledErrorValue(*NodeInputCompiledErrorValue) error
	VisitNodeInputCompiledArrayValue(*NodeInputCompiledArrayValue) error
	VisitNodeInputCompiledFunctionCallValue(*NodeInputCompiledFunctionCallValue) error
}

func (n *NodeInputVariableCompiledValue) Accept(visitor NodeInputVariableCompiledValueVisitor) error {
	if n.NodeInputCompiledStringValue != nil {
		return visitor.VisitNodeInputCompiledStringValue(n.NodeInputCompiledStringValue)
	}
	if n.NodeInputCompiledNumberValue != nil {
		return visitor.VisitNodeInputCompiledNumberValue(n.NodeInputCompiledNumberValue)
	}
	if n.NodeInputCompiledJsonValue != nil {
		return visitor.VisitNodeInputCompiledJsonValue(n.NodeInputCompiledJsonValue)
	}
	if n.NodeInputCompiledChatHistoryValue != nil {
		return visitor.VisitNodeInputCompiledChatHistoryValue(n.NodeInputCompiledChatHistoryValue)
	}
	if n.NodeInputCompiledSearchResultsValue != nil {
		return visitor.VisitNodeInputCompiledSearchResultsValue(n.NodeInputCompiledSearchResultsValue)
	}
	if n.NodeInputCompiledErrorValue != nil {
		return visitor.VisitNodeInputCompiledErrorValue(n.NodeInputCompiledErrorValue)
	}
	if n.NodeInputCompiledArrayValue != nil {
		return visitor.VisitNodeInputCompiledArrayValue(n.NodeInputCompiledArrayValue)
	}
	if n.NodeInputCompiledFunctionCallValue != nil {
		return visitor.VisitNodeInputCompiledFunctionCallValue(n.NodeInputCompiledFunctionCallValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

// An output returned by a node that is of type ARRAY.
type NodeOutputCompiledArrayValue struct {
	Value        []*VellumValue                `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledArrayValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledArrayValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledArrayValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledArrayValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ARRAY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledArrayValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledArrayValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type CHAT_HISTORY.
type NodeOutputCompiledChatHistoryValue struct {
	Value        []*ChatMessage                `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledChatHistoryValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledChatHistoryValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledChatHistoryValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledChatHistoryValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "CHAT_HISTORY", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledChatHistoryValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledChatHistoryValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type ERROR.
type NodeOutputCompiledErrorValue struct {
	Value        *VellumError                  `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledErrorValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledErrorValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledErrorValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledErrorValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "ERROR", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledErrorValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledErrorValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type FUNCTION_CALL.
type NodeOutputCompiledFunctionCallValue struct {
	Value        *FunctionCall                 `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledFunctionCallValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledFunctionCallValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledFunctionCallValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledFunctionCallValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledFunctionCallValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "FUNCTION_CALL", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledFunctionCallValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledFunctionCallValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledFunctionCallValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type JSON.
type NodeOutputCompiledJsonValue struct {
	Value        interface{}                   `json:"value" url:"value"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledJsonValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledJsonValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledJsonValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledJsonValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "JSON", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledJsonValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledJsonValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type NUMBER.
type NodeOutputCompiledNumberValue struct {
	Value        *float64                      `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledNumberValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledNumberValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledNumberValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledNumberValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledNumberValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledNumberValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type SEARCH_RESULTS.
type NodeOutputCompiledSearchResultsValue struct {
	Value        []*SearchResult               `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledSearchResultsValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledSearchResultsValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledSearchResultsValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledSearchResultsValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "SEARCH_RESULTS", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledSearchResultsValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledSearchResultsValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type STRING.
type NodeOutputCompiledStringValue struct {
	Value        *string                       `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	type_        string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledStringValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledStringValue) Type() string {
	return n.type_
}

func (n *NodeOutputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type embed NodeOutputCompiledStringValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NodeOutputCompiledStringValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "STRING", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledStringValue) MarshalJSON() ([]byte, error) {
	type embed NodeOutputCompiledStringValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (n *NodeOutputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledValue struct {
	NodeOutputCompiledStringValue        *NodeOutputCompiledStringValue
	NodeOutputCompiledNumberValue        *NodeOutputCompiledNumberValue
	NodeOutputCompiledJsonValue          *NodeOutputCompiledJsonValue
	NodeOutputCompiledChatHistoryValue   *NodeOutputCompiledChatHistoryValue
	NodeOutputCompiledSearchResultsValue *NodeOutputCompiledSearchResultsValue
	NodeOutputCompiledErrorValue         *NodeOutputCompiledErrorValue
	NodeOutputCompiledArrayValue         *NodeOutputCompiledArrayValue
	NodeOutputCompiledFunctionCallValue  *NodeOutputCompiledFunctionCallValue
}

func (n *NodeOutputCompiledValue) UnmarshalJSON(data []byte) error {
	valueNodeOutputCompiledStringValue := new(NodeOutputCompiledStringValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledStringValue); err == nil {
		n.NodeOutputCompiledStringValue = valueNodeOutputCompiledStringValue
		return nil
	}
	valueNodeOutputCompiledNumberValue := new(NodeOutputCompiledNumberValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledNumberValue); err == nil {
		n.NodeOutputCompiledNumberValue = valueNodeOutputCompiledNumberValue
		return nil
	}
	valueNodeOutputCompiledJsonValue := new(NodeOutputCompiledJsonValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledJsonValue); err == nil {
		n.NodeOutputCompiledJsonValue = valueNodeOutputCompiledJsonValue
		return nil
	}
	valueNodeOutputCompiledChatHistoryValue := new(NodeOutputCompiledChatHistoryValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledChatHistoryValue); err == nil {
		n.NodeOutputCompiledChatHistoryValue = valueNodeOutputCompiledChatHistoryValue
		return nil
	}
	valueNodeOutputCompiledSearchResultsValue := new(NodeOutputCompiledSearchResultsValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledSearchResultsValue); err == nil {
		n.NodeOutputCompiledSearchResultsValue = valueNodeOutputCompiledSearchResultsValue
		return nil
	}
	valueNodeOutputCompiledErrorValue := new(NodeOutputCompiledErrorValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledErrorValue); err == nil {
		n.NodeOutputCompiledErrorValue = valueNodeOutputCompiledErrorValue
		return nil
	}
	valueNodeOutputCompiledArrayValue := new(NodeOutputCompiledArrayValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledArrayValue); err == nil {
		n.NodeOutputCompiledArrayValue = valueNodeOutputCompiledArrayValue
		return nil
	}
	valueNodeOutputCompiledFunctionCallValue := new(NodeOutputCompiledFunctionCallValue)
	if err := json.Unmarshal(data, &valueNodeOutputCompiledFunctionCallValue); err == nil {
		n.NodeOutputCompiledFunctionCallValue = valueNodeOutputCompiledFunctionCallValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, n)
}

func (n NodeOutputCompiledValue) MarshalJSON() ([]byte, error) {
	if n.NodeOutputCompiledStringValue != nil {
		return json.Marshal(n.NodeOutputCompiledStringValue)
	}
	if n.NodeOutputCompiledNumberValue != nil {
		return json.Marshal(n.NodeOutputCompiledNumberValue)
	}
	if n.NodeOutputCompiledJsonValue != nil {
		return json.Marshal(n.NodeOutputCompiledJsonValue)
	}
	if n.NodeOutputCompiledChatHistoryValue != nil {
		return json.Marshal(n.NodeOutputCompiledChatHistoryValue)
	}
	if n.NodeOutputCompiledSearchResultsValue != nil {
		return json.Marshal(n.NodeOutputCompiledSearchResultsValue)
	}
	if n.NodeOutputCompiledErrorValue != nil {
		return json.Marshal(n.NodeOutputCompiledErrorValue)
	}
	if n.NodeOutputCompiledArrayValue != nil {
		return json.Marshal(n.NodeOutputCompiledArrayValue)
	}
	if n.NodeOutputCompiledFunctionCallValue != nil {
		return json.Marshal(n.NodeOutputCompiledFunctionCallValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NodeOutputCompiledValueVisitor interface {
	VisitNodeOutputCompiledStringValue(*NodeOutputCompiledStringValue) error
	VisitNodeOutputCompiledNumberValue(*NodeOutputCompiledNumberValue) error
	VisitNodeOutputCompiledJsonValue(*NodeOutputCompiledJsonValue) error
	VisitNodeOutputCompiledChatHistoryValue(*NodeOutputCompiledChatHistoryValue) error
	VisitNodeOutputCompiledSearchResultsValue(*NodeOutputCompiledSearchResultsValue) error
	VisitNodeOutputCompiledErrorValue(*NodeOutputCompiledErrorValue) error
	VisitNodeOutputCompiledArrayValue(*NodeOutputCompiledArrayValue) error
	VisitNodeOutputCompiledFunctionCallValue(*NodeOutputCompiledFunctionCallValue) error
}

func (n *NodeOutputCompiledValue) Accept(visitor NodeOutputCompiledValueVisitor) error {
	if n.NodeOutputCompiledStringValue != nil {
		return visitor.VisitNodeOutputCompiledStringValue(n.NodeOutputCompiledStringValue)
	}
	if n.NodeOutputCompiledNumberValue != nil {
		return visitor.VisitNodeOutputCompiledNumberValue(n.NodeOutputCompiledNumberValue)
	}
	if n.NodeOutputCompiledJsonValue != nil {
		return visitor.VisitNodeOutputCompiledJsonValue(n.NodeOutputCompiledJsonValue)
	}
	if n.NodeOutputCompiledChatHistoryValue != nil {
		return visitor.VisitNodeOutputCompiledChatHistoryValue(n.NodeOutputCompiledChatHistoryValue)
	}
	if n.NodeOutputCompiledSearchResultsValue != nil {
		return visitor.VisitNodeOutputCompiledSearchResultsValue(n.NodeOutputCompiledSearchResultsValue)
	}
	if n.NodeOutputCompiledErrorValue != nil {
		return visitor.VisitNodeOutputCompiledErrorValue(n.NodeOutputCompiledErrorValue)
	}
	if n.NodeOutputCompiledArrayValue != nil {
		return visitor.VisitNodeOutputCompiledArrayValue(n.NodeOutputCompiledArrayValue)
	}
	if n.NodeOutputCompiledFunctionCallValue != nil {
		return visitor.VisitNodeOutputCompiledFunctionCallValue(n.NodeOutputCompiledFunctionCallValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", n)
}

type NormalizedLogProbs struct {
	Tokens     []*NormalizedTokenLogProbs `json:"tokens" url:"tokens"`
	Likelihood *float64                   `json:"likelihood,omitempty" url:"likelihood,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NormalizedLogProbs) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NormalizedLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedLogProbs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NormalizedTokenLogProbs struct {
	Token       string              `json:"token" url:"token"`
	Logprob     *float64            `json:"logprob,omitempty" url:"logprob,omitempty"`
	TopLogprobs map[string]*float64 `json:"top_logprobs,omitempty" url:"top_logprobs,omitempty"`
	TextOffset  int                 `json:"text_offset" url:"text_offset"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NormalizedTokenLogProbs) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NormalizedTokenLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedTokenLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedTokenLogProbs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedTokenLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A user input representing a number value
type NumberInputRequest struct {
	// The variable's name
	Name  string  `json:"name" url:"name"`
	Value float64 `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberInputRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberInputRequest) Type() string {
	return n.type_
}

func (n *NumberInputRequest) UnmarshalJSON(data []byte) error {
	type embed NumberInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NumberInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberInputRequest) MarshalJSON() ([]byte, error) {
	type embed NumberInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NumberInputRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NumberVariableValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVariableValue) Type() string {
	return n.type_
}

func (n *NumberVariableValue) UnmarshalJSON(data []byte) error {
	type embed NumberVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NumberVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVariableValue) MarshalJSON() ([]byte, error) {
	type embed NumberVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NumberVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A value representing a number.
type NumberVellumValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVellumValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVellumValue) Type() string {
	return n.type_
}

func (n *NumberVellumValue) UnmarshalJSON(data []byte) error {
	type embed NumberVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NumberVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVellumValue) MarshalJSON() ([]byte, error) {
	type embed NumberVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NumberVellumValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A value representing a number.
type NumberVellumValueRequest struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVellumValueRequest) Type() string {
	return n.type_
}

func (n *NumberVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed NumberVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NumberVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "NUMBER", unmarshaler.Type)
	}
	n.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *n, "type")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed NumberVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*n),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (n *NumberVellumValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Configuration for using an OpenAI vectorizer.
type OpenAiVectorizerConfig struct {
	AddOpenaiApiKey *AddOpenaiApiKeyEnum `json:"add_openai_api_key,omitempty" url:"add_openai_api_key,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerConfig) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Configuration for using an OpenAI vectorizer.
type OpenAiVectorizerConfigRequest struct {
	AddOpenaiApiKey *AddOpenaiApiKeyEnum `json:"add_openai_api_key,omitempty" url:"add_openai_api_key,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerConfigRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerConfigRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-large.
type OpenAiVectorizerTextEmbedding3Large struct {
	Config    *OpenAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3Large) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3Large) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbedding3Large) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbedding3Large
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3Large(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-3-large" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-3-large", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3Large) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbedding3Large
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-3-large",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbedding3Large) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-large.
type OpenAiVectorizerTextEmbedding3LargeRequest struct {
	Config    *OpenAiVectorizerConfigRequest `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbedding3LargeRequest
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3LargeRequest(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-3-large" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-3-large", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbedding3LargeRequest
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-3-large",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-small.
type OpenAiVectorizerTextEmbedding3Small struct {
	Config    *OpenAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3Small) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3Small) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbedding3Small) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbedding3Small
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3Small(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-3-small" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-3-small", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3Small) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbedding3Small
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-3-small",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbedding3Small) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-small.
type OpenAiVectorizerTextEmbedding3SmallRequest struct {
	Config    *OpenAiVectorizerConfigRequest `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbedding3SmallRequest
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3SmallRequest(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-3-small" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-3-small", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbedding3SmallRequest
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-3-small",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-ada-002.
type OpenAiVectorizerTextEmbeddingAda002 struct {
	Config    *OpenAiVectorizerConfig `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbeddingAda002) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbeddingAda002) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbeddingAda002) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbeddingAda002
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbeddingAda002(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-ada-002" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-ada-002", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbeddingAda002) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbeddingAda002
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-ada-002",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbeddingAda002) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-ada-002.
type OpenAiVectorizerTextEmbeddingAda002Request struct {
	Config    *OpenAiVectorizerConfigRequest `json:"config" url:"config"`
	modelName string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) ModelName() string {
	return o.modelName
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) UnmarshalJSON(data []byte) error {
	type embed OpenAiVectorizerTextEmbeddingAda002Request
	var unmarshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbeddingAda002Request(unmarshaler.embed)
	if unmarshaler.ModelName != "text-embedding-ada-002" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", o, "text-embedding-ada-002", unmarshaler.ModelName)
	}
	o.modelName = unmarshaler.ModelName

	extraProperties, err := core.ExtractExtraProperties(data, *o, "model_name")
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) MarshalJSON() ([]byte, error) {
	type embed OpenAiVectorizerTextEmbeddingAda002Request
	var marshaler = struct {
		embed
		ModelName string `json:"model_name"`
	}{
		embed:     embed(*o),
		ModelName: "text-embedding-ada-002",
	}
	return json.Marshal(marshaler)
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PaginatedContainerImageReadList struct {
	Count    *int                  `json:"count,omitempty" url:"count,omitempty"`
	Next     *string               `json:"next,omitempty" url:"next,omitempty"`
	Previous *string               `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*ContainerImageRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedContainerImageReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedContainerImageReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedContainerImageReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedContainerImageReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedContainerImageReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedDeploymentReleaseTagReadList struct {
	Count    *int                        `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                     `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                     `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*DeploymentReleaseTagRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedDeploymentReleaseTagReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedDeploymentReleaseTagReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedDeploymentReleaseTagReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedDeploymentReleaseTagReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedDeploymentReleaseTagReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedDocumentIndexReadList struct {
	Count    *int                 `json:"count,omitempty" url:"count,omitempty"`
	Next     *string              `json:"next,omitempty" url:"next,omitempty"`
	Previous *string              `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*DocumentIndexRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedDocumentIndexReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedDocumentIndexReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedDocumentIndexReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedDocumentIndexReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedDocumentIndexReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedFolderEntityList struct {
	Count    *int            `json:"count,omitempty" url:"count,omitempty"`
	Next     *string         `json:"next,omitempty" url:"next,omitempty"`
	Previous *string         `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*FolderEntity `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedFolderEntityList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedFolderEntityList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedFolderEntityList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedFolderEntityList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedFolderEntityList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimDeploymentReadList struct {
	Count    *int                  `json:"count,omitempty" url:"count,omitempty"`
	Next     *string               `json:"next,omitempty" url:"next,omitempty"`
	Previous *string               `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimDeploymentRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimDeploymentReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimDeploymentReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimDeploymentReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimDeploymentReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimDeploymentReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimDocumentList struct {
	Count    *int            `json:"count,omitempty" url:"count,omitempty"`
	Next     *string         `json:"next,omitempty" url:"next,omitempty"`
	Previous *string         `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimDocument `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimDocumentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimDocumentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimDocumentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimDocumentList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimDocumentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimWorkflowDeploymentList struct {
	Count    *int                      `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimWorkflowDeployment `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimWorkflowDeploymentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimWorkflowDeploymentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimWorkflowDeploymentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimWorkflowDeploymentList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimWorkflowDeploymentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTestSuiteRunExecutionList struct {
	Count    int                      `json:"count" url:"count"`
	Next     *string                  `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                  `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TestSuiteRunExecution `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedTestSuiteRunExecutionList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTestSuiteRunExecutionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTestSuiteRunExecutionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTestSuiteRunExecutionList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTestSuiteRunExecutionList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTestSuiteTestCaseList struct {
	Count    int                  `json:"count" url:"count"`
	Next     *string              `json:"next,omitempty" url:"next,omitempty"`
	Previous *string              `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TestSuiteTestCase `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedTestSuiteTestCaseList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTestSuiteTestCaseList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTestSuiteTestCaseList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTestSuiteTestCaseList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTestSuiteTestCaseList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedWorkflowReleaseTagReadList struct {
	Count    *int                      `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*WorkflowReleaseTagRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedWorkflowReleaseTagReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedWorkflowReleaseTagReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedWorkflowReleaseTagReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedWorkflowReleaseTagReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedWorkflowReleaseTagReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The source of a search result from a PDF document.
type PdfSearchResultMetaSource struct {
	// The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.
	StartPageNum *int `json:"start_page_num,omitempty" url:"start_page_num,omitempty"`
	// The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.
	EndPageNum   *int `json:"end_page_num,omitempty" url:"end_page_num,omitempty"`
	documentType string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PdfSearchResultMetaSource) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PdfSearchResultMetaSource) DocumentType() string {
	return p.documentType
}

func (p *PdfSearchResultMetaSource) UnmarshalJSON(data []byte) error {
	type embed PdfSearchResultMetaSource
	var unmarshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PdfSearchResultMetaSource(unmarshaler.embed)
	if unmarshaler.DocumentType != "PDF" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PDF", unmarshaler.DocumentType)
	}
	p.documentType = unmarshaler.DocumentType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "document_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PdfSearchResultMetaSource) MarshalJSON() ([]byte, error) {
	type embed PdfSearchResultMetaSource
	var marshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed:        embed(*p),
		DocumentType: "PDF",
	}
	return json.Marshal(marshaler)
}

func (p *PdfSearchResultMetaSource) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The source of a search result from a PDF document.
type PdfSearchResultMetaSourceRequest struct {
	// The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.
	StartPageNum *int `json:"start_page_num,omitempty" url:"start_page_num,omitempty"`
	// The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.
	EndPageNum   *int `json:"end_page_num,omitempty" url:"end_page_num,omitempty"`
	documentType string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PdfSearchResultMetaSourceRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PdfSearchResultMetaSourceRequest) DocumentType() string {
	return p.documentType
}

func (p *PdfSearchResultMetaSourceRequest) UnmarshalJSON(data []byte) error {
	type embed PdfSearchResultMetaSourceRequest
	var unmarshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PdfSearchResultMetaSourceRequest(unmarshaler.embed)
	if unmarshaler.DocumentType != "PDF" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PDF", unmarshaler.DocumentType)
	}
	p.documentType = unmarshaler.DocumentType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "document_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PdfSearchResultMetaSourceRequest) MarshalJSON() ([]byte, error) {
	type embed PdfSearchResultMetaSourceRequest
	var marshaler = struct {
		embed
		DocumentType string `json:"document_type"`
	}{
		embed:        embed(*p),
		DocumentType: "PDF",
	}
	return json.Marshal(marshaler)
}

func (p *PdfSearchResultMetaSourceRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A block that holds a plain text string value.
type PlainTextPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Text        string                      `json:"text" url:"text"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlainTextPromptBlock) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlainTextPromptBlock) BlockType() string {
	return p.blockType
}

func (p *PlainTextPromptBlock) UnmarshalJSON(data []byte) error {
	type embed PlainTextPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlainTextPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "PLAIN_TEXT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PLAIN_TEXT", unmarshaler.BlockType)
	}
	p.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "block_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlainTextPromptBlock) MarshalJSON() ([]byte, error) {
	type embed PlainTextPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*p),
		BlockType: "PLAIN_TEXT",
	}
	return json.Marshal(marshaler)
}

func (p *PlainTextPromptBlock) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Price struct {
	Value float64  `json:"value" url:"value"`
	Unit  UnitEnum `json:"unit" url:"unit"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Price) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Price) UnmarshalJSON(data []byte) error {
	type unmarshaler Price
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Price(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Price) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// - `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
// - `INVALID_FILE` - Invalid File
type ProcessingFailureReasonEnum string

const (
	ProcessingFailureReasonEnumExceededCharacterLimit ProcessingFailureReasonEnum = "EXCEEDED_CHARACTER_LIMIT"
	ProcessingFailureReasonEnumInvalidFile            ProcessingFailureReasonEnum = "INVALID_FILE"
)

func NewProcessingFailureReasonEnumFromString(s string) (ProcessingFailureReasonEnum, error) {
	switch s {
	case "EXCEEDED_CHARACTER_LIMIT":
		return ProcessingFailureReasonEnumExceededCharacterLimit, nil
	case "INVALID_FILE":
		return ProcessingFailureReasonEnumInvalidFile, nil
	}
	var t ProcessingFailureReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingFailureReasonEnum) Ptr() *ProcessingFailureReasonEnum {
	return &p
}

// - `QUEUED` - Queued
// - `PROCESSING` - Processing
// - `PROCESSED` - Processed
// - `FAILED` - Failed
type ProcessingStateEnum string

const (
	ProcessingStateEnumQueued     ProcessingStateEnum = "QUEUED"
	ProcessingStateEnumProcessing ProcessingStateEnum = "PROCESSING"
	ProcessingStateEnumProcessed  ProcessingStateEnum = "PROCESSED"
	ProcessingStateEnumFailed     ProcessingStateEnum = "FAILED"
)

func NewProcessingStateEnumFromString(s string) (ProcessingStateEnum, error) {
	switch s {
	case "QUEUED":
		return ProcessingStateEnumQueued, nil
	case "PROCESSING":
		return ProcessingStateEnumProcessing, nil
	case "PROCESSED":
		return ProcessingStateEnumProcessed, nil
	case "FAILED":
		return ProcessingStateEnumFailed, nil
	}
	var t ProcessingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingStateEnum) Ptr() *ProcessingStateEnum {
	return &p
}

type PromptBlock struct {
	JinjaPromptBlock              *JinjaPromptBlock
	ChatMessagePromptBlock        *ChatMessagePromptBlock
	FunctionDefinitionPromptBlock *FunctionDefinitionPromptBlock
	VariablePromptBlock           *VariablePromptBlock
	RichTextPromptBlock           *RichTextPromptBlock
}

func (p *PromptBlock) UnmarshalJSON(data []byte) error {
	valueJinjaPromptBlock := new(JinjaPromptBlock)
	if err := json.Unmarshal(data, &valueJinjaPromptBlock); err == nil {
		p.JinjaPromptBlock = valueJinjaPromptBlock
		return nil
	}
	valueChatMessagePromptBlock := new(ChatMessagePromptBlock)
	if err := json.Unmarshal(data, &valueChatMessagePromptBlock); err == nil {
		p.ChatMessagePromptBlock = valueChatMessagePromptBlock
		return nil
	}
	valueFunctionDefinitionPromptBlock := new(FunctionDefinitionPromptBlock)
	if err := json.Unmarshal(data, &valueFunctionDefinitionPromptBlock); err == nil {
		p.FunctionDefinitionPromptBlock = valueFunctionDefinitionPromptBlock
		return nil
	}
	valueVariablePromptBlock := new(VariablePromptBlock)
	if err := json.Unmarshal(data, &valueVariablePromptBlock); err == nil {
		p.VariablePromptBlock = valueVariablePromptBlock
		return nil
	}
	valueRichTextPromptBlock := new(RichTextPromptBlock)
	if err := json.Unmarshal(data, &valueRichTextPromptBlock); err == nil {
		p.RichTextPromptBlock = valueRichTextPromptBlock
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PromptBlock) MarshalJSON() ([]byte, error) {
	if p.JinjaPromptBlock != nil {
		return json.Marshal(p.JinjaPromptBlock)
	}
	if p.ChatMessagePromptBlock != nil {
		return json.Marshal(p.ChatMessagePromptBlock)
	}
	if p.FunctionDefinitionPromptBlock != nil {
		return json.Marshal(p.FunctionDefinitionPromptBlock)
	}
	if p.VariablePromptBlock != nil {
		return json.Marshal(p.VariablePromptBlock)
	}
	if p.RichTextPromptBlock != nil {
		return json.Marshal(p.RichTextPromptBlock)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptBlockVisitor interface {
	VisitJinjaPromptBlock(*JinjaPromptBlock) error
	VisitChatMessagePromptBlock(*ChatMessagePromptBlock) error
	VisitFunctionDefinitionPromptBlock(*FunctionDefinitionPromptBlock) error
	VisitVariablePromptBlock(*VariablePromptBlock) error
	VisitRichTextPromptBlock(*RichTextPromptBlock) error
}

func (p *PromptBlock) Accept(visitor PromptBlockVisitor) error {
	if p.JinjaPromptBlock != nil {
		return visitor.VisitJinjaPromptBlock(p.JinjaPromptBlock)
	}
	if p.ChatMessagePromptBlock != nil {
		return visitor.VisitChatMessagePromptBlock(p.ChatMessagePromptBlock)
	}
	if p.FunctionDefinitionPromptBlock != nil {
		return visitor.VisitFunctionDefinitionPromptBlock(p.FunctionDefinitionPromptBlock)
	}
	if p.VariablePromptBlock != nil {
		return visitor.VisitVariablePromptBlock(p.VariablePromptBlock)
	}
	if p.RichTextPromptBlock != nil {
		return visitor.VisitRichTextPromptBlock(p.RichTextPromptBlock)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// - `ENABLED` - ENABLED
// - `DISABLED` - DISABLED
type PromptBlockState string

const (
	PromptBlockStateEnabled  PromptBlockState = "ENABLED"
	PromptBlockStateDisabled PromptBlockState = "DISABLED"
)

func NewPromptBlockStateFromString(s string) (PromptBlockState, error) {
	switch s {
	case "ENABLED":
		return PromptBlockStateEnabled, nil
	case "DISABLED":
		return PromptBlockStateDisabled, nil
	}
	var t PromptBlockState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PromptBlockState) Ptr() *PromptBlockState {
	return &p
}

type PromptDeploymentExpandMetaRequest struct {
	// If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`
	// If enabled, the response will include model host usage tracking. This may increase latency for some model hosts.
	Usage *bool `json:"usage,omitempty" url:"usage,omitempty"`
	// If enabled, the response will include model host cost tracking. This may increase latency for some model hosts.
	Cost *bool `json:"cost,omitempty" url:"cost,omitempty"`
	// If enabled, the response will include the reason provided by the model for why the execution finished.
	FinishReason *bool `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	// If enabled, the response will include the time in nanoseconds it took to execute the Prompt Deployment.
	Latency *bool `json:"latency,omitempty" url:"latency,omitempty"`
	// If enabled, the response will include the release tag of the Prompt Deployment.
	DeploymentReleaseTag *bool `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	// If enabled, the response will include the ID of the Prompt Version backing the deployment.
	PromptVersionId *bool `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptDeploymentExpandMetaRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptDeploymentExpandMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptDeploymentExpandMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptDeploymentExpandMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptDeploymentExpandMetaRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptDeploymentInputRequest struct {
	StringInputRequest      *StringInputRequest
	JsonInputRequest        *JsonInputRequest
	ChatHistoryInputRequest *ChatHistoryInputRequest
}

func (p *PromptDeploymentInputRequest) UnmarshalJSON(data []byte) error {
	valueStringInputRequest := new(StringInputRequest)
	if err := json.Unmarshal(data, &valueStringInputRequest); err == nil {
		p.StringInputRequest = valueStringInputRequest
		return nil
	}
	valueJsonInputRequest := new(JsonInputRequest)
	if err := json.Unmarshal(data, &valueJsonInputRequest); err == nil {
		p.JsonInputRequest = valueJsonInputRequest
		return nil
	}
	valueChatHistoryInputRequest := new(ChatHistoryInputRequest)
	if err := json.Unmarshal(data, &valueChatHistoryInputRequest); err == nil {
		p.ChatHistoryInputRequest = valueChatHistoryInputRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PromptDeploymentInputRequest) MarshalJSON() ([]byte, error) {
	if p.StringInputRequest != nil {
		return json.Marshal(p.StringInputRequest)
	}
	if p.JsonInputRequest != nil {
		return json.Marshal(p.JsonInputRequest)
	}
	if p.ChatHistoryInputRequest != nil {
		return json.Marshal(p.ChatHistoryInputRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptDeploymentInputRequestVisitor interface {
	VisitStringInputRequest(*StringInputRequest) error
	VisitJsonInputRequest(*JsonInputRequest) error
	VisitChatHistoryInputRequest(*ChatHistoryInputRequest) error
}

func (p *PromptDeploymentInputRequest) Accept(visitor PromptDeploymentInputRequestVisitor) error {
	if p.StringInputRequest != nil {
		return visitor.VisitStringInputRequest(p.StringInputRequest)
	}
	if p.JsonInputRequest != nil {
		return visitor.VisitJsonInputRequest(p.JsonInputRequest)
	}
	if p.ChatHistoryInputRequest != nil {
		return visitor.VisitChatHistoryInputRequest(p.ChatHistoryInputRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type PromptExecutionMeta struct {
	ModelName            *string           `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int              `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string           `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string           `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`
	FinishReason         *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	Usage                *MlModelUsage     `json:"usage,omitempty" url:"usage,omitempty"`
	Cost                 *Price            `json:"cost,omitempty" url:"cost,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptExecutionMeta) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type PromptNodeExecutionMeta struct {
	Usage *MlModelUsage `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeExecutionMeta) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeExecutionMeta) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A Node Result Event emitted from a Prompt Node.
type PromptNodeResult struct {
	Data  *PromptNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeResult) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeResult) Type() string {
	return p.type_
}

func (p *PromptNodeResult) UnmarshalJSON(data []byte) error {
	type embed PromptNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PromptNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "PROMPT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "PROMPT", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResult) MarshalJSON() ([]byte, error) {
	type embed PromptNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "PROMPT",
	}
	return json.Marshal(marshaler)
}

func (p *PromptNodeResult) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptNodeResultData struct {
	ExecutionMeta *PromptNodeExecutionMeta `json:"execution_meta,omitempty" url:"execution_meta,omitempty"`
	OutputId      string                   `json:"output_id" url:"output_id"`
	ArrayOutputId *string                  `json:"array_output_id,omitempty" url:"array_output_id,omitempty"`
	ExecutionId   *string                  `json:"execution_id,omitempty" url:"execution_id,omitempty"`
	Text          *string                  `json:"text,omitempty" url:"text,omitempty"`
	Delta         *string                  `json:"delta,omitempty" url:"delta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeResultData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResultData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptOutput struct {
	StringVellumValue       *StringVellumValue
	JsonVellumValue         *JsonVellumValue
	ErrorVellumValue        *ErrorVellumValue
	FunctionCallVellumValue *FunctionCallVellumValue
}

func (p *PromptOutput) UnmarshalJSON(data []byte) error {
	valueStringVellumValue := new(StringVellumValue)
	if err := json.Unmarshal(data, &valueStringVellumValue); err == nil {
		p.StringVellumValue = valueStringVellumValue
		return nil
	}
	valueJsonVellumValue := new(JsonVellumValue)
	if err := json.Unmarshal(data, &valueJsonVellumValue); err == nil {
		p.JsonVellumValue = valueJsonVellumValue
		return nil
	}
	valueErrorVellumValue := new(ErrorVellumValue)
	if err := json.Unmarshal(data, &valueErrorVellumValue); err == nil {
		p.ErrorVellumValue = valueErrorVellumValue
		return nil
	}
	valueFunctionCallVellumValue := new(FunctionCallVellumValue)
	if err := json.Unmarshal(data, &valueFunctionCallVellumValue); err == nil {
		p.FunctionCallVellumValue = valueFunctionCallVellumValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PromptOutput) MarshalJSON() ([]byte, error) {
	if p.StringVellumValue != nil {
		return json.Marshal(p.StringVellumValue)
	}
	if p.JsonVellumValue != nil {
		return json.Marshal(p.JsonVellumValue)
	}
	if p.ErrorVellumValue != nil {
		return json.Marshal(p.ErrorVellumValue)
	}
	if p.FunctionCallVellumValue != nil {
		return json.Marshal(p.FunctionCallVellumValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptOutputVisitor interface {
	VisitStringVellumValue(*StringVellumValue) error
	VisitJsonVellumValue(*JsonVellumValue) error
	VisitErrorVellumValue(*ErrorVellumValue) error
	VisitFunctionCallVellumValue(*FunctionCallVellumValue) error
}

func (p *PromptOutput) Accept(visitor PromptOutputVisitor) error {
	if p.StringVellumValue != nil {
		return visitor.VisitStringVellumValue(p.StringVellumValue)
	}
	if p.JsonVellumValue != nil {
		return visitor.VisitJsonVellumValue(p.JsonVellumValue)
	}
	if p.ErrorVellumValue != nil {
		return visitor.VisitErrorVellumValue(p.ErrorVellumValue)
	}
	if p.FunctionCallVellumValue != nil {
		return visitor.VisitFunctionCallVellumValue(p.FunctionCallVellumValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptParameters struct {
	Stop             []string               `json:"stop,omitempty" url:"stop,omitempty"`
	Temperature      *float64               `json:"temperature,omitempty" url:"temperature,omitempty"`
	MaxTokens        *int                   `json:"max_tokens,omitempty" url:"max_tokens,omitempty"`
	TopP             *float64               `json:"top_p,omitempty" url:"top_p,omitempty"`
	TopK             *int                   `json:"top_k,omitempty" url:"top_k,omitempty"`
	FrequencyPenalty *float64               `json:"frequency_penalty,omitempty" url:"frequency_penalty,omitempty"`
	PresencePenalty  *float64               `json:"presence_penalty,omitempty" url:"presence_penalty,omitempty"`
	LogitBias        map[string]*float64    `json:"logit_bias,omitempty" url:"logit_bias,omitempty"`
	CustomParameters map[string]interface{} `json:"custom_parameters,omitempty" url:"custom_parameters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptParameters) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptParameters) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptParameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptParameters(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptParameters) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptRequestChatHistoryInput struct {
	// The variable's name, as defined in the Prompt.
	Key   string         `json:"key" url:"key"`
	Value []*ChatMessage `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptRequestChatHistoryInput) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptRequestChatHistoryInput) Type() string {
	return p.type_
}

func (p *PromptRequestChatHistoryInput) UnmarshalJSON(data []byte) error {
	type embed PromptRequestChatHistoryInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PromptRequestChatHistoryInput(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "CHAT_HISTORY", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptRequestChatHistoryInput) MarshalJSON() ([]byte, error) {
	type embed PromptRequestChatHistoryInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (p *PromptRequestChatHistoryInput) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptRequestInput struct {
	PromptRequestStringInput      *PromptRequestStringInput
	PromptRequestJsonInput        *PromptRequestJsonInput
	PromptRequestChatHistoryInput *PromptRequestChatHistoryInput
}

func (p *PromptRequestInput) UnmarshalJSON(data []byte) error {
	valuePromptRequestStringInput := new(PromptRequestStringInput)
	if err := json.Unmarshal(data, &valuePromptRequestStringInput); err == nil {
		p.PromptRequestStringInput = valuePromptRequestStringInput
		return nil
	}
	valuePromptRequestJsonInput := new(PromptRequestJsonInput)
	if err := json.Unmarshal(data, &valuePromptRequestJsonInput); err == nil {
		p.PromptRequestJsonInput = valuePromptRequestJsonInput
		return nil
	}
	valuePromptRequestChatHistoryInput := new(PromptRequestChatHistoryInput)
	if err := json.Unmarshal(data, &valuePromptRequestChatHistoryInput); err == nil {
		p.PromptRequestChatHistoryInput = valuePromptRequestChatHistoryInput
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PromptRequestInput) MarshalJSON() ([]byte, error) {
	if p.PromptRequestStringInput != nil {
		return json.Marshal(p.PromptRequestStringInput)
	}
	if p.PromptRequestJsonInput != nil {
		return json.Marshal(p.PromptRequestJsonInput)
	}
	if p.PromptRequestChatHistoryInput != nil {
		return json.Marshal(p.PromptRequestChatHistoryInput)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptRequestInputVisitor interface {
	VisitPromptRequestStringInput(*PromptRequestStringInput) error
	VisitPromptRequestJsonInput(*PromptRequestJsonInput) error
	VisitPromptRequestChatHistoryInput(*PromptRequestChatHistoryInput) error
}

func (p *PromptRequestInput) Accept(visitor PromptRequestInputVisitor) error {
	if p.PromptRequestStringInput != nil {
		return visitor.VisitPromptRequestStringInput(p.PromptRequestStringInput)
	}
	if p.PromptRequestJsonInput != nil {
		return visitor.VisitPromptRequestJsonInput(p.PromptRequestJsonInput)
	}
	if p.PromptRequestChatHistoryInput != nil {
		return visitor.VisitPromptRequestChatHistoryInput(p.PromptRequestChatHistoryInput)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PromptRequestJsonInput struct {
	// The variable's name, as defined in the Prompt.
	Key   string                 `json:"key" url:"key"`
	Value map[string]interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptRequestJsonInput) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptRequestJsonInput) Type() string {
	return p.type_
}

func (p *PromptRequestJsonInput) UnmarshalJSON(data []byte) error {
	type embed PromptRequestJsonInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PromptRequestJsonInput(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "JSON", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptRequestJsonInput) MarshalJSON() ([]byte, error) {
	type embed PromptRequestJsonInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (p *PromptRequestJsonInput) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptRequestStringInput struct {
	// The variable's name, as defined in the Prompt.
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptRequestStringInput) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptRequestStringInput) Type() string {
	return p.type_
}

func (p *PromptRequestStringInput) UnmarshalJSON(data []byte) error {
	type embed PromptRequestStringInput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PromptRequestStringInput(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "STRING", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptRequestStringInput) MarshalJSON() ([]byte, error) {
	type embed PromptRequestStringInput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (p *PromptRequestStringInput) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptSettings struct {
	Timeout *float64 `json:"timeout,omitempty" url:"timeout,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptSettings) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptSettings(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptSettings) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RawPromptExecutionOverridesRequest struct {
	Body map[string]interface{} `json:"body,omitempty" url:"body,omitempty"`
	// The raw headers to send to the model host.
	Headers map[string]*string `json:"headers,omitempty" url:"headers,omitempty"`
	// The raw URL to send to the model host.
	Url *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RawPromptExecutionOverridesRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawPromptExecutionOverridesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RawPromptExecutionOverridesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawPromptExecutionOverridesRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawPromptExecutionOverridesRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Configuration for Reducto chunking
type ReductoChunkerConfig struct {
	CharacterLimit *int `json:"character_limit,omitempty" url:"character_limit,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunkerConfig) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ReductoChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReductoChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunkerConfig) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Configuration for Reducto chunking
type ReductoChunkerConfigRequest struct {
	CharacterLimit *int `json:"character_limit,omitempty" url:"character_limit,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunkerConfigRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunkerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ReductoChunkerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReductoChunkerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunkerConfigRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Reducto chunking
type ReductoChunking struct {
	ChunkerConfig *ReductoChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunking) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunking) ChunkerName() string {
	return r.chunkerName
}

func (r *ReductoChunking) UnmarshalJSON(data []byte) error {
	type embed ReductoChunking
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReductoChunking(unmarshaler.embed)
	if unmarshaler.ChunkerName != "reducto-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "reducto-chunker", unmarshaler.ChunkerName)
	}
	r.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *r, "chunker_name")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunking) MarshalJSON() ([]byte, error) {
	type embed ReductoChunking
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*r),
		ChunkerName: "reducto-chunker",
	}
	return json.Marshal(marshaler)
}

func (r *ReductoChunking) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Reducto chunking
type ReductoChunkingRequest struct {
	ChunkerConfig *ReductoChunkerConfigRequest `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunkingRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunkingRequest) ChunkerName() string {
	return r.chunkerName
}

func (r *ReductoChunkingRequest) UnmarshalJSON(data []byte) error {
	type embed ReductoChunkingRequest
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReductoChunkingRequest(unmarshaler.embed)
	if unmarshaler.ChunkerName != "reducto-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "reducto-chunker", unmarshaler.ChunkerName)
	}
	r.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *r, "chunker_name")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunkingRequest) MarshalJSON() ([]byte, error) {
	type embed ReductoChunkingRequest
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*r),
		ChunkerName: "reducto-chunker",
	}
	return json.Marshal(marshaler)
}

func (r *ReductoChunkingRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The final data returned indicating an error occurred during the stream.
type RejectedAdHocExecutePromptEvent struct {
	Error       *VellumError                      `json:"error" url:"error"`
	ExecutionId string                            `json:"execution_id" url:"execution_id"`
	Meta        *AdHocRejectedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedAdHocExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedAdHocExecutePromptEvent) State() string {
	return r.state
}

func (r *RejectedAdHocExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedAdHocExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedAdHocExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedAdHocExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedAdHocExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedAdHocExecutePromptEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The final data returned indicating an error occurred during the stream.
type RejectedExecutePromptEvent struct {
	Error       *VellumError                 `json:"error" url:"error"`
	ExecutionId string                       `json:"execution_id" url:"execution_id"`
	Meta        *RejectedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecutePromptEvent) State() string {
	return r.state
}

func (r *RejectedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecutePromptEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the model containing an error of what went wrong.
type RejectedExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string       `json:"execution_id" url:"execution_id"`
	Error       *VellumError `json:"error" url:"error"`
	state       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecutePromptResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecutePromptResponse) State() string {
	return r.state
}

func (r *RejectedExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type embed RejectedExecutePromptResponse
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecutePromptResponse(unmarshaler.embed)
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptResponse) MarshalJSON() ([]byte, error) {
	type embed RejectedExecutePromptResponse
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*r),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecutePromptResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the Workflow execution containing an error specifying what went wrong.
type RejectedExecuteWorkflowWorkflowResultEvent struct {
	Id    string              `json:"id" url:"id"`
	Ts    time.Time           `json:"ts" url:"ts"`
	Error *WorkflowEventError `json:"error" url:"error"`
	state string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) State() string {
	return r.state
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.Time()
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
		Ts:    core.NewDateTime(r.Ts),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type RejectedPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedPromptExecutionMeta) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// An event that indicates that the node has rejected its execution.
type RejectedWorkflowNodeResultEvent struct {
	Id                string                  `json:"id" url:"id"`
	NodeId            string                  `json:"node_id" url:"node_id"`
	NodeResultId      string                  `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time              `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                 `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Error             *WorkflowEventError     `json:"error" url:"error"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedWorkflowNodeResultEvent) State() string {
	return r.state
}

func (r *RejectedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedWorkflowNodeResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "REJECTED", unmarshaler.State)
	}
	r.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *r, "state")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*r),
		Ts:    core.NewOptionalDateTime(r.Ts),
		State: "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (r *RejectedWorkflowNodeResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// - `SYSTEM` - System
// - `USER` - User
type ReleaseTagSource string

const (
	ReleaseTagSourceSystem ReleaseTagSource = "SYSTEM"
	ReleaseTagSourceUser   ReleaseTagSource = "USER"
)

func NewReleaseTagSourceFromString(s string) (ReleaseTagSource, error) {
	switch s {
	case "SYSTEM":
		return ReleaseTagSourceSystem, nil
	case "USER":
		return ReleaseTagSourceUser, nil
	}
	var t ReleaseTagSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReleaseTagSource) Ptr() *ReleaseTagSource {
	return &r
}

// Information about the Test Case to replace
type ReplaceTestSuiteTestCaseRequest struct {
	// The Vellum-generated ID of the Test Case whose data you'd like to replace. Must specify either this or external_id.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The ID that was originally provided upon Test Case creation that uniquely identifies the Test Case whose data you'd like to replace. Must specify either this of id.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A human-readable label used to convey the intention of this Test Case
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// Values for each of the Test Case's input variables
	InputValues []*NamedTestCaseVariableValueRequest `json:"input_values" url:"input_values"`
	// Values for each of the Test Case's evaluation variables
	EvaluationValues []*NamedTestCaseVariableValueRequest `json:"evaluation_values" url:"evaluation_values"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReplaceTestSuiteTestCaseRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReplaceTestSuiteTestCaseRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ReplaceTestSuiteTestCaseRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReplaceTestSuiteTestCaseRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReplaceTestSuiteTestCaseRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RichTextChildBlock struct {
	VariablePromptBlock  *VariablePromptBlock
	PlainTextPromptBlock *PlainTextPromptBlock
}

func (r *RichTextChildBlock) UnmarshalJSON(data []byte) error {
	valueVariablePromptBlock := new(VariablePromptBlock)
	if err := json.Unmarshal(data, &valueVariablePromptBlock); err == nil {
		r.VariablePromptBlock = valueVariablePromptBlock
		return nil
	}
	valuePlainTextPromptBlock := new(PlainTextPromptBlock)
	if err := json.Unmarshal(data, &valuePlainTextPromptBlock); err == nil {
		r.PlainTextPromptBlock = valuePlainTextPromptBlock
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RichTextChildBlock) MarshalJSON() ([]byte, error) {
	if r.VariablePromptBlock != nil {
		return json.Marshal(r.VariablePromptBlock)
	}
	if r.PlainTextPromptBlock != nil {
		return json.Marshal(r.PlainTextPromptBlock)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RichTextChildBlockVisitor interface {
	VisitVariablePromptBlock(*VariablePromptBlock) error
	VisitPlainTextPromptBlock(*PlainTextPromptBlock) error
}

func (r *RichTextChildBlock) Accept(visitor RichTextChildBlockVisitor) error {
	if r.VariablePromptBlock != nil {
		return visitor.VisitVariablePromptBlock(r.VariablePromptBlock)
	}
	if r.PlainTextPromptBlock != nil {
		return visitor.VisitPlainTextPromptBlock(r.PlainTextPromptBlock)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// A block that includes a combination of plain text and variable blocks.
type RichTextPromptBlock struct {
	State       *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	Blocks      []*RichTextChildBlock       `json:"blocks" url:"blocks"`
	blockType   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RichTextPromptBlock) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RichTextPromptBlock) BlockType() string {
	return r.blockType
}

func (r *RichTextPromptBlock) UnmarshalJSON(data []byte) error {
	type embed RichTextPromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RichTextPromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "RICH_TEXT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "RICH_TEXT", unmarshaler.BlockType)
	}
	r.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *r, "block_type")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RichTextPromptBlock) MarshalJSON() ([]byte, error) {
	type embed RichTextPromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*r),
		BlockType: "RICH_TEXT",
	}
	return json.Marshal(marshaler)
}

func (r *RichTextPromptBlock) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Sandbox Scenario
type SandboxScenario struct {
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// The inputs for the scenario
	Inputs []*ScenarioInput `json:"inputs" url:"inputs"`
	// The id of the scenario
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SandboxScenario) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SandboxScenario) UnmarshalJSON(data []byte) error {
	type unmarshaler SandboxScenario
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SandboxScenario(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SandboxScenario) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ScenarioInput struct {
	ScenarioInputStringVariableValue      *ScenarioInputStringVariableValue
	ScenarioInputJsonVariableValue        *ScenarioInputJsonVariableValue
	ScenarioInputChatHistoryVariableValue *ScenarioInputChatHistoryVariableValue
}

func (s *ScenarioInput) UnmarshalJSON(data []byte) error {
	valueScenarioInputStringVariableValue := new(ScenarioInputStringVariableValue)
	if err := json.Unmarshal(data, &valueScenarioInputStringVariableValue); err == nil {
		s.ScenarioInputStringVariableValue = valueScenarioInputStringVariableValue
		return nil
	}
	valueScenarioInputJsonVariableValue := new(ScenarioInputJsonVariableValue)
	if err := json.Unmarshal(data, &valueScenarioInputJsonVariableValue); err == nil {
		s.ScenarioInputJsonVariableValue = valueScenarioInputJsonVariableValue
		return nil
	}
	valueScenarioInputChatHistoryVariableValue := new(ScenarioInputChatHistoryVariableValue)
	if err := json.Unmarshal(data, &valueScenarioInputChatHistoryVariableValue); err == nil {
		s.ScenarioInputChatHistoryVariableValue = valueScenarioInputChatHistoryVariableValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ScenarioInput) MarshalJSON() ([]byte, error) {
	if s.ScenarioInputStringVariableValue != nil {
		return json.Marshal(s.ScenarioInputStringVariableValue)
	}
	if s.ScenarioInputJsonVariableValue != nil {
		return json.Marshal(s.ScenarioInputJsonVariableValue)
	}
	if s.ScenarioInputChatHistoryVariableValue != nil {
		return json.Marshal(s.ScenarioInputChatHistoryVariableValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ScenarioInputVisitor interface {
	VisitScenarioInputStringVariableValue(*ScenarioInputStringVariableValue) error
	VisitScenarioInputJsonVariableValue(*ScenarioInputJsonVariableValue) error
	VisitScenarioInputChatHistoryVariableValue(*ScenarioInputChatHistoryVariableValue) error
}

func (s *ScenarioInput) Accept(visitor ScenarioInputVisitor) error {
	if s.ScenarioInputStringVariableValue != nil {
		return visitor.VisitScenarioInputStringVariableValue(s.ScenarioInputStringVariableValue)
	}
	if s.ScenarioInputJsonVariableValue != nil {
		return visitor.VisitScenarioInputJsonVariableValue(s.ScenarioInputJsonVariableValue)
	}
	if s.ScenarioInputChatHistoryVariableValue != nil {
		return visitor.VisitScenarioInputChatHistoryVariableValue(s.ScenarioInputChatHistoryVariableValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// Prompt Sandbox Scenario input value that is of type CHAT_HISTORY
type ScenarioInputChatHistoryVariableValue struct {
	Value           []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	InputVariableId string         `json:"input_variable_id" url:"input_variable_id"`
	type_           string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ScenarioInputChatHistoryVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScenarioInputChatHistoryVariableValue) Type() string {
	return s.type_
}

func (s *ScenarioInputChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type embed ScenarioInputChatHistoryVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = ScenarioInputChatHistoryVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "CHAT_HISTORY", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputChatHistoryVariableValue) MarshalJSON() ([]byte, error) {
	type embed ScenarioInputChatHistoryVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (s *ScenarioInputChatHistoryVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Prompt Sandbox Scenario input value that is of type JSON
type ScenarioInputJsonVariableValue struct {
	Value           interface{} `json:"value" url:"value"`
	InputVariableId string      `json:"input_variable_id" url:"input_variable_id"`
	type_           string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ScenarioInputJsonVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScenarioInputJsonVariableValue) Type() string {
	return s.type_
}

func (s *ScenarioInputJsonVariableValue) UnmarshalJSON(data []byte) error {
	type embed ScenarioInputJsonVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = ScenarioInputJsonVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "JSON", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputJsonVariableValue) MarshalJSON() ([]byte, error) {
	type embed ScenarioInputJsonVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (s *ScenarioInputJsonVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Prompt Sandbox Scenario input value that is of type STRING
type ScenarioInputStringVariableValue struct {
	Value           *string `json:"value,omitempty" url:"value,omitempty"`
	InputVariableId string  `json:"input_variable_id" url:"input_variable_id"`
	type_           string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ScenarioInputStringVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScenarioInputStringVariableValue) Type() string {
	return s.type_
}

func (s *ScenarioInputStringVariableValue) UnmarshalJSON(data []byte) error {
	type embed ScenarioInputStringVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = ScenarioInputStringVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputStringVariableValue) MarshalJSON() ([]byte, error) {
	type embed ScenarioInputStringVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *ScenarioInputStringVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchFiltersRequest struct {
	// The document external IDs to filter by
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`
	// The metadata filters to apply to the search
	Metadata *MetadataFiltersRequest `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchFiltersRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchFiltersRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchFiltersRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchFiltersRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchFiltersRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A Node Result Event emitted from a Search Node.
type SearchNodeResult struct {
	Data  *SearchNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchNodeResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchNodeResult) Type() string {
	return s.type_
}

func (s *SearchNodeResult) UnmarshalJSON(data []byte) error {
	type embed SearchNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResult) MarshalJSON() ([]byte, error) {
	type embed SearchNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH",
	}
	return json.Marshal(marshaler)
}

func (s *SearchNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchNodeResultData struct {
	ResultsOutputId string `json:"results_output_id" url:"results_output_id"`
	// The results of the search. Each result represents a chunk that matches the search query.
	Results      []*SearchResult `json:"results" url:"results"`
	TextOutputId string          `json:"text_output_id" url:"text_output_id"`
	Text         *string         `json:"text,omitempty" url:"text,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchNodeResultData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchRequestOptionsRequest struct {
	// The maximum number of results to return.
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// The weights to use for the search. Must add up to 1.0.
	Weights *SearchWeightsRequest `json:"weights,omitempty" url:"weights,omitempty"`
	// The configuration for merging results.
	ResultMerging *SearchResultMergingRequest `json:"result_merging,omitempty" url:"result_merging,omitempty"`
	// The filters to apply to the search.
	Filters *SearchFiltersRequest `json:"filters,omitempty" url:"filters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchRequestOptionsRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchRequestOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchRequestOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchRequestOptionsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchRequestOptionsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResponse struct {
	// The results of the search. Each result represents a chunk that matches the search query.
	Results []*SearchResult `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResult struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords" url:"keywords"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocument `json:"document" url:"document"`
	// Additional information about the search result.
	Meta *SearchResultMeta `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocument struct {
	// The ID of the document.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultDocument) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocument(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocumentRequest struct {
	// The ID of the document.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultDocumentRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocumentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocumentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMergingRequest struct {
	// Whether to enable merging results
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMergingRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMergingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMergingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMergingRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMergingRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMeta struct {
	Source *ComponentsSchemasPdfSearchResultMetaSource `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMeta) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMeta) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMetaRequest struct {
	Source *ComponentsSchemasPdfSearchResultMetaSourceRequest `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMetaRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMetaRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultRequest struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords" url:"keywords"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocumentRequest `json:"document" url:"document"`
	// Additional information about the search result.
	Meta *SearchResultMetaRequest `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A user input representing a search results value
type SearchResultsInputRequest struct {
	// The variable's name
	Name  string                 `json:"name" url:"name"`
	Value []*SearchResultRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultsInputRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultsInputRequest) Type() string {
	return s.type_
}

func (s *SearchResultsInputRequest) UnmarshalJSON(data []byte) error {
	type embed SearchResultsInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchResultsInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH_RESULTS", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsInputRequest) MarshalJSON() ([]byte, error) {
	type embed SearchResultsInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (s *SearchResultsInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultsVariableValue struct {
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultsVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultsVariableValue) Type() string {
	return s.type_
}

func (s *SearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type embed SearchResultsVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchResultsVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH_RESULTS", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsVariableValue) MarshalJSON() ([]byte, error) {
	type embed SearchResultsVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (s *SearchResultsVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing Search Results.
type SearchResultsVellumValue struct {
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultsVellumValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultsVellumValue) Type() string {
	return s.type_
}

func (s *SearchResultsVellumValue) UnmarshalJSON(data []byte) error {
	type embed SearchResultsVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchResultsVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH_RESULTS", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsVellumValue) MarshalJSON() ([]byte, error) {
	type embed SearchResultsVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (s *SearchResultsVellumValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing Search Results.
type SearchResultsVellumValueRequest struct {
	Value []*SearchResultRequest `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultsVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultsVellumValueRequest) Type() string {
	return s.type_
}

func (s *SearchResultsVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed SearchResultsVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SearchResultsVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SEARCH_RESULTS", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed SearchResultsVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (s *SearchResultsVellumValueRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchWeightsRequest struct {
	// The relative weight to give to semantic similarity
	SemanticSimilarity *float64 `json:"semantic_similarity,omitempty" url:"semantic_similarity,omitempty"`
	// The relative weight to give to keywords
	Keywords *float64 `json:"keywords,omitempty" url:"keywords,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchWeightsRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchWeightsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchWeightsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchWeightsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchWeightsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// - `USER_DEFINED` - User Defined
// - `HMAC` - Hmac
// - `INTERNAL_API_KEY` - Internal Api Key
type SecretTypeEnum string

const (
	SecretTypeEnumUserDefined    SecretTypeEnum = "USER_DEFINED"
	SecretTypeEnumHmac           SecretTypeEnum = "HMAC"
	SecretTypeEnumInternalApiKey SecretTypeEnum = "INTERNAL_API_KEY"
)

func NewSecretTypeEnumFromString(s string) (SecretTypeEnum, error) {
	switch s {
	case "USER_DEFINED":
		return SecretTypeEnumUserDefined, nil
	case "HMAC":
		return SecretTypeEnumHmac, nil
	case "INTERNAL_API_KEY":
		return SecretTypeEnumInternalApiKey, nil
	}
	var t SecretTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SecretTypeEnum) Ptr() *SecretTypeEnum {
	return &s
}

// Configuration for sentence chunking
type SentenceChunkerConfig struct {
	CharacterLimit  *int     `json:"character_limit,omitempty" url:"character_limit,omitempty"`
	MinOverlapRatio *float64 `json:"min_overlap_ratio,omitempty" url:"min_overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunkerConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SentenceChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SentenceChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunkerConfig) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration for sentence chunking
type SentenceChunkerConfigRequest struct {
	CharacterLimit  *int     `json:"character_limit,omitempty" url:"character_limit,omitempty"`
	MinOverlapRatio *float64 `json:"min_overlap_ratio,omitempty" url:"min_overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunkerConfigRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunkerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SentenceChunkerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SentenceChunkerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunkerConfigRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Sentence chunking
type SentenceChunking struct {
	ChunkerConfig *SentenceChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunking) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunking) ChunkerName() string {
	return s.chunkerName
}

func (s *SentenceChunking) UnmarshalJSON(data []byte) error {
	type embed SentenceChunking
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SentenceChunking(unmarshaler.embed)
	if unmarshaler.ChunkerName != "sentence-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "sentence-chunker", unmarshaler.ChunkerName)
	}
	s.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *s, "chunker_name")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunking) MarshalJSON() ([]byte, error) {
	type embed SentenceChunking
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*s),
		ChunkerName: "sentence-chunker",
	}
	return json.Marshal(marshaler)
}

func (s *SentenceChunking) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Sentence chunking
type SentenceChunkingRequest struct {
	ChunkerConfig *SentenceChunkerConfigRequest `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunkingRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunkingRequest) ChunkerName() string {
	return s.chunkerName
}

func (s *SentenceChunkingRequest) UnmarshalJSON(data []byte) error {
	type embed SentenceChunkingRequest
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SentenceChunkingRequest(unmarshaler.embed)
	if unmarshaler.ChunkerName != "sentence-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "sentence-chunker", unmarshaler.ChunkerName)
	}
	s.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *s, "chunker_name")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunkingRequest) MarshalJSON() ([]byte, error) {
	type embed SentenceChunkingRequest
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*s),
		ChunkerName: "sentence-chunker",
	}
	return json.Marshal(marshaler)
}

func (s *SentenceChunkingRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimDeploymentRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum  `json:"environment,omitempty" url:"environment,omitempty"`
	LastDeployedOn time.Time         `json:"last_deployed_on" url:"last_deployed_on"`
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// A human-readable description of the deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimDeploymentRead) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimDeploymentRead) UnmarshalJSON(data []byte) error {
	type embed SlimDeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimDeploymentRead(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimDeploymentRead) MarshalJSON() ([]byte, error) {
	type embed SlimDeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*s),
		Created:        core.NewDateTime(s.Created),
		LastDeployedOn: core.NewDateTime(s.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (s *SlimDeploymentRead) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimDocument struct {
	// Vellum-generated ID that uniquely identifies this document.
	Id string `json:"id" url:"id"`
	// The external ID that was originally provided when uploading the document.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A timestamp representing when this document was most recently uploaded.
	LastUploadedAt time.Time `json:"last_uploaded_at" url:"last_uploaded_at"`
	// Human-friendly name for this document.
	Label string `json:"label" url:"label"`
	// An enum value representing where this document is along its processing lifecycle. Note that this is different than its indexing lifecycle.
	//
	// - `QUEUED` - Queued
	// - `PROCESSING` - Processing
	// - `PROCESSED` - Processed
	// - `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty" url:"processing_state,omitempty"`
	// An enum value representing why the document could not be processed. Is null unless processing_state is FAILED.
	//
	// - `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
	// - `INVALID_FILE` - Invalid File
	ProcessingFailureReason *ProcessingFailureReasonEnum `json:"processing_failure_reason,omitempty" url:"processing_failure_reason,omitempty"`
	// The document's current status.
	//
	// - `ACTIVE` - Active
	Status *DocumentStatus `json:"status,omitempty" url:"status,omitempty"`
	// A list of keywords associated with this document. Originally provided when uploading the document.
	Keywords []string `json:"keywords,omitempty" url:"keywords,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata                  map[string]interface{}             `json:"metadata,omitempty" url:"metadata,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes" url:"document_to_document_indexes"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimDocument) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimDocument) UnmarshalJSON(data []byte) error {
	type embed SlimDocument
	var unmarshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimDocument(unmarshaler.embed)
	s.LastUploadedAt = unmarshaler.LastUploadedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimDocument) MarshalJSON() ([]byte, error) {
	type embed SlimDocument
	var marshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed:          embed(*s),
		LastUploadedAt: core.NewDateTime(s.LastUploadedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SlimDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimWorkflowDeployment struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this workflow deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// The output variables this Workflow Deployment will produce when it is executed.
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`
	// A human-readable description of the workflow deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimWorkflowDeployment) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimWorkflowDeployment) UnmarshalJSON(data []byte) error {
	type embed SlimWorkflowDeployment
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimWorkflowDeployment(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimWorkflowDeployment) MarshalJSON() ([]byte, error) {
	type embed SlimWorkflowDeployment
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*s),
		Created:        core.NewDateTime(s.Created),
		LastDeployedOn: core.NewDateTime(s.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (s *SlimWorkflowDeployment) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The data returned for each delta during the prompt execution stream.
type StreamingAdHocExecutePromptEvent struct {
	Output      *PromptOutput                      `json:"output" url:"output"`
	OutputIndex int                                `json:"output_index" url:"output_index"`
	ExecutionId string                             `json:"execution_id" url:"execution_id"`
	Meta        *AdHocStreamingPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw   map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	state string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingAdHocExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingAdHocExecutePromptEvent) State() string {
	return s.state
}

func (s *StreamingAdHocExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed StreamingAdHocExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StreamingAdHocExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "STREAMING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STREAMING", unmarshaler.State)
	}
	s.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *s, "state")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingAdHocExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed StreamingAdHocExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*s),
		State: "STREAMING",
	}
	return json.Marshal(marshaler)
}

func (s *StreamingAdHocExecutePromptEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The data returned for each delta during the prompt execution stream.
type StreamingExecutePromptEvent struct {
	Output      *PromptOutput                 `json:"output" url:"output"`
	OutputIndex int                           `json:"output_index" url:"output_index"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *StreamingPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw   map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	state string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingExecutePromptEvent) State() string {
	return s.state
}

func (s *StreamingExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type embed StreamingExecutePromptEvent
	var unmarshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StreamingExecutePromptEvent(unmarshaler.embed)
	if unmarshaler.State != "STREAMING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STREAMING", unmarshaler.State)
	}
	s.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *s, "state")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingExecutePromptEvent) MarshalJSON() ([]byte, error) {
	type embed StreamingExecutePromptEvent
	var marshaler = struct {
		embed
		State string `json:"state"`
	}{
		embed: embed(*s),
		State: "STREAMING",
	}
	return json.Marshal(marshaler)
}

func (s *StreamingExecutePromptEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type StreamingPromptExecutionMeta struct {
	Latency *int `json:"latency,omitempty" url:"latency,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamingPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamingPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingPromptExecutionMeta) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// An event that indicates that the node has execution is in progress.
type StreamingWorkflowNodeResultEvent struct {
	Id                string                   `json:"id" url:"id"`
	NodeId            string                   `json:"node_id" url:"node_id"`
	NodeResultId      string                   `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time               `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData  `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                  `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Output            *NodeOutputCompiledValue `json:"output,omitempty" url:"output,omitempty"`
	OutputIndex       *int                     `json:"output_index,omitempty" url:"output_index,omitempty"`
	state             string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingWorkflowNodeResultEvent) State() string {
	return s.state
}

func (s *StreamingWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed StreamingWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StreamingWorkflowNodeResultEvent(unmarshaler.embed)
	s.Ts = unmarshaler.Ts.TimePtr()
	if unmarshaler.State != "STREAMING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STREAMING", unmarshaler.State)
	}
	s.state = unmarshaler.State

	extraProperties, err := core.ExtractExtraProperties(data, *s, "state")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed StreamingWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts    *core.DateTime `json:"ts,omitempty"`
		State string         `json:"state"`
	}{
		embed: embed(*s),
		Ts:    core.NewOptionalDateTime(s.Ts),
		State: "STREAMING",
	}
	return json.Marshal(marshaler)
}

func (s *StreamingWorkflowNodeResultEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContent struct {
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringChatMessageContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringChatMessageContent) Type() string {
	return s.type_
}

func (s *StringChatMessageContent) UnmarshalJSON(data []byte) error {
	type embed StringChatMessageContent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringChatMessageContent(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContent) MarshalJSON() ([]byte, error) {
	type embed StringChatMessageContent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringChatMessageContent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContentRequest struct {
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringChatMessageContentRequest) Type() string {
	return s.type_
}

func (s *StringChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type embed StringChatMessageContentRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringChatMessageContentRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	type embed StringChatMessageContentRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringChatMessageContentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A user input representing a string value
type StringInputRequest struct {
	// The variable's name
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringInputRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringInputRequest) Type() string {
	return s.type_
}

func (s *StringInputRequest) UnmarshalJSON(data []byte) error {
	type embed StringInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringInputRequest) MarshalJSON() ([]byte, error) {
	type embed StringInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringVariableValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVariableValue) Type() string {
	return s.type_
}

func (s *StringVariableValue) UnmarshalJSON(data []byte) error {
	type embed StringVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVariableValue) MarshalJSON() ([]byte, error) {
	type embed StringVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing a string.
type StringVellumValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVellumValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVellumValue) Type() string {
	return s.type_
}

func (s *StringVellumValue) UnmarshalJSON(data []byte) error {
	type embed StringVellumValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringVellumValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVellumValue) MarshalJSON() ([]byte, error) {
	type embed StringVellumValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringVellumValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing a string.
type StringVellumValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVellumValueRequest) Type() string {
	return s.type_
}

func (s *StringVellumValueRequest) UnmarshalJSON(data []byte) error {
	type embed StringVellumValueRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StringVellumValueRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "STRING", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVellumValueRequest) MarshalJSON() ([]byte, error) {
	type embed StringVellumValueRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (s *StringVellumValueRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitCompletionActualRequest struct {
	// The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// Text representing what the completion _should_ have been.
	Text *string `json:"text,omitempty" url:"text,omitempty"`
	// A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *time.Time `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubmitCompletionActualRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubmitCompletionActualRequest) UnmarshalJSON(data []byte) error {
	type embed SubmitCompletionActualRequest
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SubmitCompletionActualRequest(unmarshaler.embed)
	s.Timestamp = unmarshaler.Timestamp.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitCompletionActualRequest) MarshalJSON() ([]byte, error) {
	type embed SubmitCompletionActualRequest
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed:     embed(*s),
		Timestamp: core.NewOptionalDateTime(s.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (s *SubmitCompletionActualRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitWorkflowExecutionActualRequest struct {
	WorkflowExecutionActualStringRequest      *WorkflowExecutionActualStringRequest
	WorkflowExecutionActualJsonRequest        *WorkflowExecutionActualJsonRequest
	WorkflowExecutionActualChatHistoryRequest *WorkflowExecutionActualChatHistoryRequest
}

func (s *SubmitWorkflowExecutionActualRequest) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionActualStringRequest := new(WorkflowExecutionActualStringRequest)
	if err := json.Unmarshal(data, &valueWorkflowExecutionActualStringRequest); err == nil {
		s.WorkflowExecutionActualStringRequest = valueWorkflowExecutionActualStringRequest
		return nil
	}
	valueWorkflowExecutionActualJsonRequest := new(WorkflowExecutionActualJsonRequest)
	if err := json.Unmarshal(data, &valueWorkflowExecutionActualJsonRequest); err == nil {
		s.WorkflowExecutionActualJsonRequest = valueWorkflowExecutionActualJsonRequest
		return nil
	}
	valueWorkflowExecutionActualChatHistoryRequest := new(WorkflowExecutionActualChatHistoryRequest)
	if err := json.Unmarshal(data, &valueWorkflowExecutionActualChatHistoryRequest); err == nil {
		s.WorkflowExecutionActualChatHistoryRequest = valueWorkflowExecutionActualChatHistoryRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SubmitWorkflowExecutionActualRequest) MarshalJSON() ([]byte, error) {
	if s.WorkflowExecutionActualStringRequest != nil {
		return json.Marshal(s.WorkflowExecutionActualStringRequest)
	}
	if s.WorkflowExecutionActualJsonRequest != nil {
		return json.Marshal(s.WorkflowExecutionActualJsonRequest)
	}
	if s.WorkflowExecutionActualChatHistoryRequest != nil {
		return json.Marshal(s.WorkflowExecutionActualChatHistoryRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SubmitWorkflowExecutionActualRequestVisitor interface {
	VisitWorkflowExecutionActualStringRequest(*WorkflowExecutionActualStringRequest) error
	VisitWorkflowExecutionActualJsonRequest(*WorkflowExecutionActualJsonRequest) error
	VisitWorkflowExecutionActualChatHistoryRequest(*WorkflowExecutionActualChatHistoryRequest) error
}

func (s *SubmitWorkflowExecutionActualRequest) Accept(visitor SubmitWorkflowExecutionActualRequestVisitor) error {
	if s.WorkflowExecutionActualStringRequest != nil {
		return visitor.VisitWorkflowExecutionActualStringRequest(s.WorkflowExecutionActualStringRequest)
	}
	if s.WorkflowExecutionActualJsonRequest != nil {
		return visitor.VisitWorkflowExecutionActualJsonRequest(s.WorkflowExecutionActualJsonRequest)
	}
	if s.WorkflowExecutionActualChatHistoryRequest != nil {
		return visitor.VisitWorkflowExecutionActualChatHistoryRequest(s.WorkflowExecutionActualChatHistoryRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// A Node Result Event emitted from a Subworkflow Node.
type SubworkflowNodeResult struct {
	Data  *SubworkflowNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubworkflowNodeResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubworkflowNodeResult) Type() string {
	return s.type_
}

func (s *SubworkflowNodeResult) UnmarshalJSON(data []byte) error {
	type embed SubworkflowNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SubworkflowNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "SUBWORKFLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "SUBWORKFLOW", unmarshaler.Type)
	}
	s.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *s, "type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubworkflowNodeResult) MarshalJSON() ([]byte, error) {
	type embed SubworkflowNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*s),
		Type:  "SUBWORKFLOW",
	}
	return json.Marshal(marshaler)
}

func (s *SubworkflowNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubworkflowNodeResultData struct {
	ExecutionId *string `json:"execution_id,omitempty" url:"execution_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubworkflowNodeResultData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubworkflowNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SubworkflowNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubworkflowNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubworkflowNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TemplatingNodeArrayResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeArrayResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeArrayResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeArrayResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeArrayResult(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ARRAY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeArrayResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeArrayResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeChatHistoryResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeChatHistoryResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeChatHistoryResult(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CHAT_HISTORY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeChatHistoryResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeChatHistoryResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeErrorResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeErrorResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeErrorResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeErrorResult(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeErrorResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeErrorResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeFunctionCallResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeFunctionCallResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeFunctionCallResult(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "FUNCTION_CALL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeFunctionCallResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeFunctionCallResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeJsonResult struct {
	Id    string      `json:"id" url:"id"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeJsonResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeJsonResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeJsonResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeJsonResult(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeJsonResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeJsonResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeNumberResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeNumberResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeNumberResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeNumberResult(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeNumberResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeNumberResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Templating Node.
type TemplatingNodeResult struct {
	Data  *TemplatingNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "TEMPLATING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "TEMPLATING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "TEMPLATING",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultData struct {
	Output *TemplatingNodeResultOutput `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultOutput struct {
	TemplatingNodeStringResult        *TemplatingNodeStringResult
	TemplatingNodeNumberResult        *TemplatingNodeNumberResult
	TemplatingNodeJsonResult          *TemplatingNodeJsonResult
	TemplatingNodeChatHistoryResult   *TemplatingNodeChatHistoryResult
	TemplatingNodeSearchResultsResult *TemplatingNodeSearchResultsResult
	TemplatingNodeErrorResult         *TemplatingNodeErrorResult
	TemplatingNodeArrayResult         *TemplatingNodeArrayResult
	TemplatingNodeFunctionCallResult  *TemplatingNodeFunctionCallResult
}

func (t *TemplatingNodeResultOutput) UnmarshalJSON(data []byte) error {
	valueTemplatingNodeStringResult := new(TemplatingNodeStringResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeStringResult); err == nil {
		t.TemplatingNodeStringResult = valueTemplatingNodeStringResult
		return nil
	}
	valueTemplatingNodeNumberResult := new(TemplatingNodeNumberResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeNumberResult); err == nil {
		t.TemplatingNodeNumberResult = valueTemplatingNodeNumberResult
		return nil
	}
	valueTemplatingNodeJsonResult := new(TemplatingNodeJsonResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeJsonResult); err == nil {
		t.TemplatingNodeJsonResult = valueTemplatingNodeJsonResult
		return nil
	}
	valueTemplatingNodeChatHistoryResult := new(TemplatingNodeChatHistoryResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeChatHistoryResult); err == nil {
		t.TemplatingNodeChatHistoryResult = valueTemplatingNodeChatHistoryResult
		return nil
	}
	valueTemplatingNodeSearchResultsResult := new(TemplatingNodeSearchResultsResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeSearchResultsResult); err == nil {
		t.TemplatingNodeSearchResultsResult = valueTemplatingNodeSearchResultsResult
		return nil
	}
	valueTemplatingNodeErrorResult := new(TemplatingNodeErrorResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeErrorResult); err == nil {
		t.TemplatingNodeErrorResult = valueTemplatingNodeErrorResult
		return nil
	}
	valueTemplatingNodeArrayResult := new(TemplatingNodeArrayResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeArrayResult); err == nil {
		t.TemplatingNodeArrayResult = valueTemplatingNodeArrayResult
		return nil
	}
	valueTemplatingNodeFunctionCallResult := new(TemplatingNodeFunctionCallResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeFunctionCallResult); err == nil {
		t.TemplatingNodeFunctionCallResult = valueTemplatingNodeFunctionCallResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TemplatingNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.TemplatingNodeStringResult != nil {
		return json.Marshal(t.TemplatingNodeStringResult)
	}
	if t.TemplatingNodeNumberResult != nil {
		return json.Marshal(t.TemplatingNodeNumberResult)
	}
	if t.TemplatingNodeJsonResult != nil {
		return json.Marshal(t.TemplatingNodeJsonResult)
	}
	if t.TemplatingNodeChatHistoryResult != nil {
		return json.Marshal(t.TemplatingNodeChatHistoryResult)
	}
	if t.TemplatingNodeSearchResultsResult != nil {
		return json.Marshal(t.TemplatingNodeSearchResultsResult)
	}
	if t.TemplatingNodeErrorResult != nil {
		return json.Marshal(t.TemplatingNodeErrorResult)
	}
	if t.TemplatingNodeArrayResult != nil {
		return json.Marshal(t.TemplatingNodeArrayResult)
	}
	if t.TemplatingNodeFunctionCallResult != nil {
		return json.Marshal(t.TemplatingNodeFunctionCallResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TemplatingNodeResultOutputVisitor interface {
	VisitTemplatingNodeStringResult(*TemplatingNodeStringResult) error
	VisitTemplatingNodeNumberResult(*TemplatingNodeNumberResult) error
	VisitTemplatingNodeJsonResult(*TemplatingNodeJsonResult) error
	VisitTemplatingNodeChatHistoryResult(*TemplatingNodeChatHistoryResult) error
	VisitTemplatingNodeSearchResultsResult(*TemplatingNodeSearchResultsResult) error
	VisitTemplatingNodeErrorResult(*TemplatingNodeErrorResult) error
	VisitTemplatingNodeArrayResult(*TemplatingNodeArrayResult) error
	VisitTemplatingNodeFunctionCallResult(*TemplatingNodeFunctionCallResult) error
}

func (t *TemplatingNodeResultOutput) Accept(visitor TemplatingNodeResultOutputVisitor) error {
	if t.TemplatingNodeStringResult != nil {
		return visitor.VisitTemplatingNodeStringResult(t.TemplatingNodeStringResult)
	}
	if t.TemplatingNodeNumberResult != nil {
		return visitor.VisitTemplatingNodeNumberResult(t.TemplatingNodeNumberResult)
	}
	if t.TemplatingNodeJsonResult != nil {
		return visitor.VisitTemplatingNodeJsonResult(t.TemplatingNodeJsonResult)
	}
	if t.TemplatingNodeChatHistoryResult != nil {
		return visitor.VisitTemplatingNodeChatHistoryResult(t.TemplatingNodeChatHistoryResult)
	}
	if t.TemplatingNodeSearchResultsResult != nil {
		return visitor.VisitTemplatingNodeSearchResultsResult(t.TemplatingNodeSearchResultsResult)
	}
	if t.TemplatingNodeErrorResult != nil {
		return visitor.VisitTemplatingNodeErrorResult(t.TemplatingNodeErrorResult)
	}
	if t.TemplatingNodeArrayResult != nil {
		return visitor.VisitTemplatingNodeArrayResult(t.TemplatingNodeArrayResult)
	}
	if t.TemplatingNodeFunctionCallResult != nil {
		return visitor.VisitTemplatingNodeFunctionCallResult(t.TemplatingNodeFunctionCallResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TemplatingNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeSearchResultsResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeSearchResultsResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeSearchResultsResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "SEARCH_RESULTS", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeSearchResultsResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeSearchResultsResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeStringResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeStringResult) Type() string {
	return t.type_
}

func (t *TemplatingNodeStringResult) UnmarshalJSON(data []byte) error {
	type embed TemplatingNodeStringResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplatingNodeStringResult(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeStringResult) MarshalJSON() ([]byte, error) {
	type embed TemplatingNodeStringResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TemplatingNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeArrayResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string         `json:"name" url:"name"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeArrayResult) Type() string {
	return t.type_
}

func (t *TerminalNodeArrayResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeArrayResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeArrayResult(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ARRAY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeArrayResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeArrayResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeChatHistoryResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeChatHistoryResult) Type() string {
	return t.type_
}

func (t *TerminalNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeChatHistoryResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeChatHistoryResult(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CHAT_HISTORY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeChatHistoryResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeChatHistoryResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeErrorResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeErrorResult) Type() string {
	return t.type_
}

func (t *TerminalNodeErrorResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeErrorResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeErrorResult(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeErrorResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeErrorResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeFunctionCallResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeFunctionCallResult) Type() string {
	return t.type_
}

func (t *TerminalNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeFunctionCallResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeFunctionCallResult(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "FUNCTION_CALL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeFunctionCallResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeFunctionCallResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeJsonResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeJsonResult) Type() string {
	return t.type_
}

func (t *TerminalNodeJsonResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeJsonResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeJsonResult(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeJsonResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeJsonResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeNumberResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeNumberResult) Type() string {
	return t.type_
}

func (t *TerminalNodeNumberResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeNumberResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeNumberResult(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeNumberResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeNumberResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Terminal Node.
type TerminalNodeResult struct {
	Data  *TerminalNodeResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeResult) Type() string {
	return t.type_
}

func (t *TerminalNodeResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeResult(unmarshaler.embed)
	if unmarshaler.Type != "TERMINAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "TERMINAL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "TERMINAL",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultData struct {
	Output *TerminalNodeResultOutput `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultOutput struct {
	TerminalNodeStringResult        *TerminalNodeStringResult
	TerminalNodeNumberResult        *TerminalNodeNumberResult
	TerminalNodeJsonResult          *TerminalNodeJsonResult
	TerminalNodeChatHistoryResult   *TerminalNodeChatHistoryResult
	TerminalNodeSearchResultsResult *TerminalNodeSearchResultsResult
	TerminalNodeErrorResult         *TerminalNodeErrorResult
	TerminalNodeArrayResult         *TerminalNodeArrayResult
	TerminalNodeFunctionCallResult  *TerminalNodeFunctionCallResult
}

func (t *TerminalNodeResultOutput) UnmarshalJSON(data []byte) error {
	valueTerminalNodeStringResult := new(TerminalNodeStringResult)
	if err := json.Unmarshal(data, &valueTerminalNodeStringResult); err == nil {
		t.TerminalNodeStringResult = valueTerminalNodeStringResult
		return nil
	}
	valueTerminalNodeNumberResult := new(TerminalNodeNumberResult)
	if err := json.Unmarshal(data, &valueTerminalNodeNumberResult); err == nil {
		t.TerminalNodeNumberResult = valueTerminalNodeNumberResult
		return nil
	}
	valueTerminalNodeJsonResult := new(TerminalNodeJsonResult)
	if err := json.Unmarshal(data, &valueTerminalNodeJsonResult); err == nil {
		t.TerminalNodeJsonResult = valueTerminalNodeJsonResult
		return nil
	}
	valueTerminalNodeChatHistoryResult := new(TerminalNodeChatHistoryResult)
	if err := json.Unmarshal(data, &valueTerminalNodeChatHistoryResult); err == nil {
		t.TerminalNodeChatHistoryResult = valueTerminalNodeChatHistoryResult
		return nil
	}
	valueTerminalNodeSearchResultsResult := new(TerminalNodeSearchResultsResult)
	if err := json.Unmarshal(data, &valueTerminalNodeSearchResultsResult); err == nil {
		t.TerminalNodeSearchResultsResult = valueTerminalNodeSearchResultsResult
		return nil
	}
	valueTerminalNodeErrorResult := new(TerminalNodeErrorResult)
	if err := json.Unmarshal(data, &valueTerminalNodeErrorResult); err == nil {
		t.TerminalNodeErrorResult = valueTerminalNodeErrorResult
		return nil
	}
	valueTerminalNodeArrayResult := new(TerminalNodeArrayResult)
	if err := json.Unmarshal(data, &valueTerminalNodeArrayResult); err == nil {
		t.TerminalNodeArrayResult = valueTerminalNodeArrayResult
		return nil
	}
	valueTerminalNodeFunctionCallResult := new(TerminalNodeFunctionCallResult)
	if err := json.Unmarshal(data, &valueTerminalNodeFunctionCallResult); err == nil {
		t.TerminalNodeFunctionCallResult = valueTerminalNodeFunctionCallResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TerminalNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.TerminalNodeStringResult != nil {
		return json.Marshal(t.TerminalNodeStringResult)
	}
	if t.TerminalNodeNumberResult != nil {
		return json.Marshal(t.TerminalNodeNumberResult)
	}
	if t.TerminalNodeJsonResult != nil {
		return json.Marshal(t.TerminalNodeJsonResult)
	}
	if t.TerminalNodeChatHistoryResult != nil {
		return json.Marshal(t.TerminalNodeChatHistoryResult)
	}
	if t.TerminalNodeSearchResultsResult != nil {
		return json.Marshal(t.TerminalNodeSearchResultsResult)
	}
	if t.TerminalNodeErrorResult != nil {
		return json.Marshal(t.TerminalNodeErrorResult)
	}
	if t.TerminalNodeArrayResult != nil {
		return json.Marshal(t.TerminalNodeArrayResult)
	}
	if t.TerminalNodeFunctionCallResult != nil {
		return json.Marshal(t.TerminalNodeFunctionCallResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TerminalNodeResultOutputVisitor interface {
	VisitTerminalNodeStringResult(*TerminalNodeStringResult) error
	VisitTerminalNodeNumberResult(*TerminalNodeNumberResult) error
	VisitTerminalNodeJsonResult(*TerminalNodeJsonResult) error
	VisitTerminalNodeChatHistoryResult(*TerminalNodeChatHistoryResult) error
	VisitTerminalNodeSearchResultsResult(*TerminalNodeSearchResultsResult) error
	VisitTerminalNodeErrorResult(*TerminalNodeErrorResult) error
	VisitTerminalNodeArrayResult(*TerminalNodeArrayResult) error
	VisitTerminalNodeFunctionCallResult(*TerminalNodeFunctionCallResult) error
}

func (t *TerminalNodeResultOutput) Accept(visitor TerminalNodeResultOutputVisitor) error {
	if t.TerminalNodeStringResult != nil {
		return visitor.VisitTerminalNodeStringResult(t.TerminalNodeStringResult)
	}
	if t.TerminalNodeNumberResult != nil {
		return visitor.VisitTerminalNodeNumberResult(t.TerminalNodeNumberResult)
	}
	if t.TerminalNodeJsonResult != nil {
		return visitor.VisitTerminalNodeJsonResult(t.TerminalNodeJsonResult)
	}
	if t.TerminalNodeChatHistoryResult != nil {
		return visitor.VisitTerminalNodeChatHistoryResult(t.TerminalNodeChatHistoryResult)
	}
	if t.TerminalNodeSearchResultsResult != nil {
		return visitor.VisitTerminalNodeSearchResultsResult(t.TerminalNodeSearchResultsResult)
	}
	if t.TerminalNodeErrorResult != nil {
		return visitor.VisitTerminalNodeErrorResult(t.TerminalNodeErrorResult)
	}
	if t.TerminalNodeArrayResult != nil {
		return visitor.VisitTerminalNodeArrayResult(t.TerminalNodeArrayResult)
	}
	if t.TerminalNodeFunctionCallResult != nil {
		return visitor.VisitTerminalNodeFunctionCallResult(t.TerminalNodeFunctionCallResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TerminalNodeSearchResultsResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeSearchResultsResult) Type() string {
	return t.type_
}

func (t *TerminalNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeSearchResultsResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeSearchResultsResult(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "SEARCH_RESULTS", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeSearchResultsResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeSearchResultsResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeStringResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeStringResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeStringResult) Type() string {
	return t.type_
}

func (t *TerminalNodeStringResult) UnmarshalJSON(data []byte) error {
	type embed TerminalNodeStringResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TerminalNodeStringResult(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeStringResult) MarshalJSON() ([]byte, error) {
	type embed TerminalNodeStringResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TerminalNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// An Array value for a variable in a Test Case.
type TestCaseArrayVariableValue struct {
	VariableId string         `json:"variable_id" url:"variable_id"`
	Name       string         `json:"name" url:"name"`
	Value      []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseArrayVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseArrayVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseArrayVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseArrayVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseArrayVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ARRAY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseArrayVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseArrayVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseArrayVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A chat history value for a variable in a Test Case.
type TestCaseChatHistoryVariableValue struct {
	VariableId string         `json:"variable_id" url:"variable_id"`
	Name       string         `json:"name" url:"name"`
	Value      []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseChatHistoryVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseChatHistoryVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseChatHistoryVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseChatHistoryVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CHAT_HISTORY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseChatHistoryVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseChatHistoryVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseChatHistoryVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// An error value for a variable in a Test Case.
type TestCaseErrorVariableValue struct {
	VariableId string       `json:"variable_id" url:"variable_id"`
	Name       string       `json:"name" url:"name"`
	Value      *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseErrorVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseErrorVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseErrorVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseErrorVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseErrorVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseErrorVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseErrorVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseErrorVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A function call value for a variable in a Test Case.
type TestCaseFunctionCallVariableValue struct {
	VariableId string        `json:"variable_id" url:"variable_id"`
	Name       string        `json:"name" url:"name"`
	Value      *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseFunctionCallVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseFunctionCallVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseFunctionCallVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseFunctionCallVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseFunctionCallVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "FUNCTION_CALL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseFunctionCallVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseFunctionCallVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseFunctionCallVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A JSON value for a variable in a Test Case.
type TestCaseJsonVariableValue struct {
	VariableId string      `json:"variable_id" url:"variable_id"`
	Name       string      `json:"name" url:"name"`
	Value      interface{} `json:"value" url:"value"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseJsonVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseJsonVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseJsonVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseJsonVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseJsonVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseJsonVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseJsonVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseJsonVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A numerical value for a variable in a Test Case.
type TestCaseNumberVariableValue struct {
	VariableId string   `json:"variable_id" url:"variable_id"`
	Name       string   `json:"name" url:"name"`
	Value      *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseNumberVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseNumberVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseNumberVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseNumberVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseNumberVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseNumberVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseNumberVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseNumberVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A search results value for a variable in a Test Case.
type TestCaseSearchResultsVariableValue struct {
	VariableId string          `json:"variable_id" url:"variable_id"`
	Name       string          `json:"name" url:"name"`
	Value      []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseSearchResultsVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseSearchResultsVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseSearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseSearchResultsVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseSearchResultsVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "SEARCH_RESULTS", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseSearchResultsVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseSearchResultsVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseSearchResultsVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A string value for a variable in a Test Case.
type TestCaseStringVariableValue struct {
	VariableId string  `json:"variable_id" url:"variable_id"`
	Name       string  `json:"name" url:"name"`
	Value      *string `json:"value,omitempty" url:"value,omitempty"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseStringVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseStringVariableValue) Type() string {
	return t.type_
}

func (t *TestCaseStringVariableValue) UnmarshalJSON(data []byte) error {
	type embed TestCaseStringVariableValue
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestCaseStringVariableValue(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseStringVariableValue) MarshalJSON() ([]byte, error) {
	type embed TestCaseStringVariableValue
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TestCaseStringVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseVariableValue struct {
	TestCaseStringVariableValue        *TestCaseStringVariableValue
	TestCaseNumberVariableValue        *TestCaseNumberVariableValue
	TestCaseJsonVariableValue          *TestCaseJsonVariableValue
	TestCaseChatHistoryVariableValue   *TestCaseChatHistoryVariableValue
	TestCaseSearchResultsVariableValue *TestCaseSearchResultsVariableValue
	TestCaseErrorVariableValue         *TestCaseErrorVariableValue
	TestCaseFunctionCallVariableValue  *TestCaseFunctionCallVariableValue
	TestCaseArrayVariableValue         *TestCaseArrayVariableValue
}

func (t *TestCaseVariableValue) UnmarshalJSON(data []byte) error {
	valueTestCaseStringVariableValue := new(TestCaseStringVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseStringVariableValue); err == nil {
		t.TestCaseStringVariableValue = valueTestCaseStringVariableValue
		return nil
	}
	valueTestCaseNumberVariableValue := new(TestCaseNumberVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseNumberVariableValue); err == nil {
		t.TestCaseNumberVariableValue = valueTestCaseNumberVariableValue
		return nil
	}
	valueTestCaseJsonVariableValue := new(TestCaseJsonVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseJsonVariableValue); err == nil {
		t.TestCaseJsonVariableValue = valueTestCaseJsonVariableValue
		return nil
	}
	valueTestCaseChatHistoryVariableValue := new(TestCaseChatHistoryVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseChatHistoryVariableValue); err == nil {
		t.TestCaseChatHistoryVariableValue = valueTestCaseChatHistoryVariableValue
		return nil
	}
	valueTestCaseSearchResultsVariableValue := new(TestCaseSearchResultsVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseSearchResultsVariableValue); err == nil {
		t.TestCaseSearchResultsVariableValue = valueTestCaseSearchResultsVariableValue
		return nil
	}
	valueTestCaseErrorVariableValue := new(TestCaseErrorVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseErrorVariableValue); err == nil {
		t.TestCaseErrorVariableValue = valueTestCaseErrorVariableValue
		return nil
	}
	valueTestCaseFunctionCallVariableValue := new(TestCaseFunctionCallVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseFunctionCallVariableValue); err == nil {
		t.TestCaseFunctionCallVariableValue = valueTestCaseFunctionCallVariableValue
		return nil
	}
	valueTestCaseArrayVariableValue := new(TestCaseArrayVariableValue)
	if err := json.Unmarshal(data, &valueTestCaseArrayVariableValue); err == nil {
		t.TestCaseArrayVariableValue = valueTestCaseArrayVariableValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestCaseVariableValue) MarshalJSON() ([]byte, error) {
	if t.TestCaseStringVariableValue != nil {
		return json.Marshal(t.TestCaseStringVariableValue)
	}
	if t.TestCaseNumberVariableValue != nil {
		return json.Marshal(t.TestCaseNumberVariableValue)
	}
	if t.TestCaseJsonVariableValue != nil {
		return json.Marshal(t.TestCaseJsonVariableValue)
	}
	if t.TestCaseChatHistoryVariableValue != nil {
		return json.Marshal(t.TestCaseChatHistoryVariableValue)
	}
	if t.TestCaseSearchResultsVariableValue != nil {
		return json.Marshal(t.TestCaseSearchResultsVariableValue)
	}
	if t.TestCaseErrorVariableValue != nil {
		return json.Marshal(t.TestCaseErrorVariableValue)
	}
	if t.TestCaseFunctionCallVariableValue != nil {
		return json.Marshal(t.TestCaseFunctionCallVariableValue)
	}
	if t.TestCaseArrayVariableValue != nil {
		return json.Marshal(t.TestCaseArrayVariableValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestCaseVariableValueVisitor interface {
	VisitTestCaseStringVariableValue(*TestCaseStringVariableValue) error
	VisitTestCaseNumberVariableValue(*TestCaseNumberVariableValue) error
	VisitTestCaseJsonVariableValue(*TestCaseJsonVariableValue) error
	VisitTestCaseChatHistoryVariableValue(*TestCaseChatHistoryVariableValue) error
	VisitTestCaseSearchResultsVariableValue(*TestCaseSearchResultsVariableValue) error
	VisitTestCaseErrorVariableValue(*TestCaseErrorVariableValue) error
	VisitTestCaseFunctionCallVariableValue(*TestCaseFunctionCallVariableValue) error
	VisitTestCaseArrayVariableValue(*TestCaseArrayVariableValue) error
}

func (t *TestCaseVariableValue) Accept(visitor TestCaseVariableValueVisitor) error {
	if t.TestCaseStringVariableValue != nil {
		return visitor.VisitTestCaseStringVariableValue(t.TestCaseStringVariableValue)
	}
	if t.TestCaseNumberVariableValue != nil {
		return visitor.VisitTestCaseNumberVariableValue(t.TestCaseNumberVariableValue)
	}
	if t.TestCaseJsonVariableValue != nil {
		return visitor.VisitTestCaseJsonVariableValue(t.TestCaseJsonVariableValue)
	}
	if t.TestCaseChatHistoryVariableValue != nil {
		return visitor.VisitTestCaseChatHistoryVariableValue(t.TestCaseChatHistoryVariableValue)
	}
	if t.TestCaseSearchResultsVariableValue != nil {
		return visitor.VisitTestCaseSearchResultsVariableValue(t.TestCaseSearchResultsVariableValue)
	}
	if t.TestCaseErrorVariableValue != nil {
		return visitor.VisitTestCaseErrorVariableValue(t.TestCaseErrorVariableValue)
	}
	if t.TestCaseFunctionCallVariableValue != nil {
		return visitor.VisitTestCaseFunctionCallVariableValue(t.TestCaseFunctionCallVariableValue)
	}
	if t.TestCaseArrayVariableValue != nil {
		return visitor.VisitTestCaseArrayVariableValue(t.TestCaseArrayVariableValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// Execution configuration for running a Test Suite against a Prompt Deployment
type TestSuiteRunDeploymentReleaseTagExecConfig struct {
	Data *TestSuiteRunDeploymentReleaseTagExecConfigData `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) Type() string {
	return t.type_
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunDeploymentReleaseTagExecConfig
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfig(unmarshaler.embed)
	if unmarshaler.Type != "DEPLOYMENT_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "DEPLOYMENT_RELEASE_TAG", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunDeploymentReleaseTagExecConfig
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "DEPLOYMENT_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunDeploymentReleaseTagExecConfigData struct {
	// The ID of the Prompt Deployment to run the Test Suite against.
	DeploymentId string `json:"deployment_id" url:"deployment_id"`
	// A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunDeploymentReleaseTagExecConfigDataRequest struct {
	// The ID of the Prompt Deployment to run the Test Suite against.
	DeploymentId string `json:"deployment_id" url:"deployment_id"`
	// A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Prompt Deployment
type TestSuiteRunDeploymentReleaseTagExecConfigRequest struct {
	Data *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) Type() string {
	return t.type_
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunDeploymentReleaseTagExecConfigRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigRequest(unmarshaler.embed)
	if unmarshaler.Type != "DEPLOYMENT_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "DEPLOYMENT_RELEASE_TAG", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunDeploymentReleaseTagExecConfigRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "DEPLOYMENT_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecConfig struct {
	TestSuiteRunDeploymentReleaseTagExecConfig *TestSuiteRunDeploymentReleaseTagExecConfig
	TestSuiteRunWorkflowReleaseTagExecConfig   *TestSuiteRunWorkflowReleaseTagExecConfig
	TestSuiteRunExternalExecConfig             *TestSuiteRunExternalExecConfig
}

func (t *TestSuiteRunExecConfig) UnmarshalJSON(data []byte) error {
	valueTestSuiteRunDeploymentReleaseTagExecConfig := new(TestSuiteRunDeploymentReleaseTagExecConfig)
	if err := json.Unmarshal(data, &valueTestSuiteRunDeploymentReleaseTagExecConfig); err == nil {
		t.TestSuiteRunDeploymentReleaseTagExecConfig = valueTestSuiteRunDeploymentReleaseTagExecConfig
		return nil
	}
	valueTestSuiteRunWorkflowReleaseTagExecConfig := new(TestSuiteRunWorkflowReleaseTagExecConfig)
	if err := json.Unmarshal(data, &valueTestSuiteRunWorkflowReleaseTagExecConfig); err == nil {
		t.TestSuiteRunWorkflowReleaseTagExecConfig = valueTestSuiteRunWorkflowReleaseTagExecConfig
		return nil
	}
	valueTestSuiteRunExternalExecConfig := new(TestSuiteRunExternalExecConfig)
	if err := json.Unmarshal(data, &valueTestSuiteRunExternalExecConfig); err == nil {
		t.TestSuiteRunExternalExecConfig = valueTestSuiteRunExternalExecConfig
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestSuiteRunExecConfig) MarshalJSON() ([]byte, error) {
	if t.TestSuiteRunDeploymentReleaseTagExecConfig != nil {
		return json.Marshal(t.TestSuiteRunDeploymentReleaseTagExecConfig)
	}
	if t.TestSuiteRunWorkflowReleaseTagExecConfig != nil {
		return json.Marshal(t.TestSuiteRunWorkflowReleaseTagExecConfig)
	}
	if t.TestSuiteRunExternalExecConfig != nil {
		return json.Marshal(t.TestSuiteRunExternalExecConfig)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteRunExecConfigVisitor interface {
	VisitTestSuiteRunDeploymentReleaseTagExecConfig(*TestSuiteRunDeploymentReleaseTagExecConfig) error
	VisitTestSuiteRunWorkflowReleaseTagExecConfig(*TestSuiteRunWorkflowReleaseTagExecConfig) error
	VisitTestSuiteRunExternalExecConfig(*TestSuiteRunExternalExecConfig) error
}

func (t *TestSuiteRunExecConfig) Accept(visitor TestSuiteRunExecConfigVisitor) error {
	if t.TestSuiteRunDeploymentReleaseTagExecConfig != nil {
		return visitor.VisitTestSuiteRunDeploymentReleaseTagExecConfig(t.TestSuiteRunDeploymentReleaseTagExecConfig)
	}
	if t.TestSuiteRunWorkflowReleaseTagExecConfig != nil {
		return visitor.VisitTestSuiteRunWorkflowReleaseTagExecConfig(t.TestSuiteRunWorkflowReleaseTagExecConfig)
	}
	if t.TestSuiteRunExternalExecConfig != nil {
		return visitor.VisitTestSuiteRunExternalExecConfig(t.TestSuiteRunExternalExecConfig)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteRunExecConfigRequest struct {
	TestSuiteRunDeploymentReleaseTagExecConfigRequest *TestSuiteRunDeploymentReleaseTagExecConfigRequest
	TestSuiteRunWorkflowReleaseTagExecConfigRequest   *TestSuiteRunWorkflowReleaseTagExecConfigRequest
	TestSuiteRunExternalExecConfigRequest             *TestSuiteRunExternalExecConfigRequest
}

func (t *TestSuiteRunExecConfigRequest) UnmarshalJSON(data []byte) error {
	valueTestSuiteRunDeploymentReleaseTagExecConfigRequest := new(TestSuiteRunDeploymentReleaseTagExecConfigRequest)
	if err := json.Unmarshal(data, &valueTestSuiteRunDeploymentReleaseTagExecConfigRequest); err == nil {
		t.TestSuiteRunDeploymentReleaseTagExecConfigRequest = valueTestSuiteRunDeploymentReleaseTagExecConfigRequest
		return nil
	}
	valueTestSuiteRunWorkflowReleaseTagExecConfigRequest := new(TestSuiteRunWorkflowReleaseTagExecConfigRequest)
	if err := json.Unmarshal(data, &valueTestSuiteRunWorkflowReleaseTagExecConfigRequest); err == nil {
		t.TestSuiteRunWorkflowReleaseTagExecConfigRequest = valueTestSuiteRunWorkflowReleaseTagExecConfigRequest
		return nil
	}
	valueTestSuiteRunExternalExecConfigRequest := new(TestSuiteRunExternalExecConfigRequest)
	if err := json.Unmarshal(data, &valueTestSuiteRunExternalExecConfigRequest); err == nil {
		t.TestSuiteRunExternalExecConfigRequest = valueTestSuiteRunExternalExecConfigRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestSuiteRunExecConfigRequest) MarshalJSON() ([]byte, error) {
	if t.TestSuiteRunDeploymentReleaseTagExecConfigRequest != nil {
		return json.Marshal(t.TestSuiteRunDeploymentReleaseTagExecConfigRequest)
	}
	if t.TestSuiteRunWorkflowReleaseTagExecConfigRequest != nil {
		return json.Marshal(t.TestSuiteRunWorkflowReleaseTagExecConfigRequest)
	}
	if t.TestSuiteRunExternalExecConfigRequest != nil {
		return json.Marshal(t.TestSuiteRunExternalExecConfigRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteRunExecConfigRequestVisitor interface {
	VisitTestSuiteRunDeploymentReleaseTagExecConfigRequest(*TestSuiteRunDeploymentReleaseTagExecConfigRequest) error
	VisitTestSuiteRunWorkflowReleaseTagExecConfigRequest(*TestSuiteRunWorkflowReleaseTagExecConfigRequest) error
	VisitTestSuiteRunExternalExecConfigRequest(*TestSuiteRunExternalExecConfigRequest) error
}

func (t *TestSuiteRunExecConfigRequest) Accept(visitor TestSuiteRunExecConfigRequestVisitor) error {
	if t.TestSuiteRunDeploymentReleaseTagExecConfigRequest != nil {
		return visitor.VisitTestSuiteRunDeploymentReleaseTagExecConfigRequest(t.TestSuiteRunDeploymentReleaseTagExecConfigRequest)
	}
	if t.TestSuiteRunWorkflowReleaseTagExecConfigRequest != nil {
		return visitor.VisitTestSuiteRunWorkflowReleaseTagExecConfigRequest(t.TestSuiteRunWorkflowReleaseTagExecConfigRequest)
	}
	if t.TestSuiteRunExternalExecConfigRequest != nil {
		return visitor.VisitTestSuiteRunExternalExecConfigRequest(t.TestSuiteRunExternalExecConfigRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteRunExecution struct {
	Id            string                               `json:"id" url:"id"`
	TestCaseId    string                               `json:"test_case_id" url:"test_case_id"`
	Outputs       []*TestSuiteRunExecutionOutput       `json:"outputs" url:"outputs"`
	MetricResults []*TestSuiteRunExecutionMetricResult `json:"metric_results" url:"metric_results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecution) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecution) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecution
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecution(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecution) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type ARRAY
type TestSuiteRunExecutionArrayOutput struct {
	Name             string         `json:"name" url:"name"`
	Value            []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string         `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionArrayOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionArrayOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionArrayOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionArrayOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionArrayOutput(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ARRAY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionArrayOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionArrayOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionArrayOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type CHAT_HISTORY
type TestSuiteRunExecutionChatHistoryOutput struct {
	Name             string         `json:"name" url:"name"`
	Value            []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string         `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionChatHistoryOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionChatHistoryOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionChatHistoryOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionChatHistoryOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionChatHistoryOutput(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CHAT_HISTORY", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionChatHistoryOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionChatHistoryOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionChatHistoryOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type ERROR
type TestSuiteRunExecutionErrorOutput struct {
	Name             string       `json:"name" url:"name"`
	Value            *VellumError `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string       `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionErrorOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionErrorOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionErrorOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionErrorOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionErrorOutput(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionErrorOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionErrorOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionErrorOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type FUNCTION_CALL
type TestSuiteRunExecutionFunctionCallOutput struct {
	Name             string        `json:"name" url:"name"`
	Value            *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string        `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionFunctionCallOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionFunctionCallOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionFunctionCallOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionFunctionCallOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionFunctionCallOutput(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "FUNCTION_CALL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionFunctionCallOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionFunctionCallOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionFunctionCallOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type JSON
type TestSuiteRunExecutionJsonOutput struct {
	Name             string      `json:"name" url:"name"`
	Value            interface{} `json:"value" url:"value"`
	OutputVariableId string      `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionJsonOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionJsonOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionJsonOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionJsonOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionJsonOutput(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionJsonOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionJsonOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionJsonOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionMetricDefinition struct {
	Id    *string `json:"id,omitempty" url:"id,omitempty"`
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionMetricDefinition) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionMetricDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionMetricDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionMetricDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionMetricDefinition) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionMetricResult struct {
	MetricId         string                                 `json:"metric_id" url:"metric_id"`
	Outputs          []*TestSuiteRunMetricOutput            `json:"outputs" url:"outputs"`
	MetricLabel      *string                                `json:"metric_label,omitempty" url:"metric_label,omitempty"`
	MetricDefinition *TestSuiteRunExecutionMetricDefinition `json:"metric_definition,omitempty" url:"metric_definition,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionMetricResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionMetricResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionMetricResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionMetricResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionMetricResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type NUMBER
type TestSuiteRunExecutionNumberOutput struct {
	Name             string   `json:"name" url:"name"`
	Value            *float64 `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string   `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionNumberOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionNumberOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionNumberOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionNumberOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionNumberOutput(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionNumberOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionNumberOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionNumberOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionOutput struct {
	TestSuiteRunExecutionStringOutput        *TestSuiteRunExecutionStringOutput
	TestSuiteRunExecutionNumberOutput        *TestSuiteRunExecutionNumberOutput
	TestSuiteRunExecutionJsonOutput          *TestSuiteRunExecutionJsonOutput
	TestSuiteRunExecutionChatHistoryOutput   *TestSuiteRunExecutionChatHistoryOutput
	TestSuiteRunExecutionSearchResultsOutput *TestSuiteRunExecutionSearchResultsOutput
	TestSuiteRunExecutionErrorOutput         *TestSuiteRunExecutionErrorOutput
	TestSuiteRunExecutionFunctionCallOutput  *TestSuiteRunExecutionFunctionCallOutput
	TestSuiteRunExecutionArrayOutput         *TestSuiteRunExecutionArrayOutput
}

func (t *TestSuiteRunExecutionOutput) UnmarshalJSON(data []byte) error {
	valueTestSuiteRunExecutionStringOutput := new(TestSuiteRunExecutionStringOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionStringOutput); err == nil {
		t.TestSuiteRunExecutionStringOutput = valueTestSuiteRunExecutionStringOutput
		return nil
	}
	valueTestSuiteRunExecutionNumberOutput := new(TestSuiteRunExecutionNumberOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionNumberOutput); err == nil {
		t.TestSuiteRunExecutionNumberOutput = valueTestSuiteRunExecutionNumberOutput
		return nil
	}
	valueTestSuiteRunExecutionJsonOutput := new(TestSuiteRunExecutionJsonOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionJsonOutput); err == nil {
		t.TestSuiteRunExecutionJsonOutput = valueTestSuiteRunExecutionJsonOutput
		return nil
	}
	valueTestSuiteRunExecutionChatHistoryOutput := new(TestSuiteRunExecutionChatHistoryOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionChatHistoryOutput); err == nil {
		t.TestSuiteRunExecutionChatHistoryOutput = valueTestSuiteRunExecutionChatHistoryOutput
		return nil
	}
	valueTestSuiteRunExecutionSearchResultsOutput := new(TestSuiteRunExecutionSearchResultsOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionSearchResultsOutput); err == nil {
		t.TestSuiteRunExecutionSearchResultsOutput = valueTestSuiteRunExecutionSearchResultsOutput
		return nil
	}
	valueTestSuiteRunExecutionErrorOutput := new(TestSuiteRunExecutionErrorOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionErrorOutput); err == nil {
		t.TestSuiteRunExecutionErrorOutput = valueTestSuiteRunExecutionErrorOutput
		return nil
	}
	valueTestSuiteRunExecutionFunctionCallOutput := new(TestSuiteRunExecutionFunctionCallOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionFunctionCallOutput); err == nil {
		t.TestSuiteRunExecutionFunctionCallOutput = valueTestSuiteRunExecutionFunctionCallOutput
		return nil
	}
	valueTestSuiteRunExecutionArrayOutput := new(TestSuiteRunExecutionArrayOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunExecutionArrayOutput); err == nil {
		t.TestSuiteRunExecutionArrayOutput = valueTestSuiteRunExecutionArrayOutput
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestSuiteRunExecutionOutput) MarshalJSON() ([]byte, error) {
	if t.TestSuiteRunExecutionStringOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionStringOutput)
	}
	if t.TestSuiteRunExecutionNumberOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionNumberOutput)
	}
	if t.TestSuiteRunExecutionJsonOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionJsonOutput)
	}
	if t.TestSuiteRunExecutionChatHistoryOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionChatHistoryOutput)
	}
	if t.TestSuiteRunExecutionSearchResultsOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionSearchResultsOutput)
	}
	if t.TestSuiteRunExecutionErrorOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionErrorOutput)
	}
	if t.TestSuiteRunExecutionFunctionCallOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionFunctionCallOutput)
	}
	if t.TestSuiteRunExecutionArrayOutput != nil {
		return json.Marshal(t.TestSuiteRunExecutionArrayOutput)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteRunExecutionOutputVisitor interface {
	VisitTestSuiteRunExecutionStringOutput(*TestSuiteRunExecutionStringOutput) error
	VisitTestSuiteRunExecutionNumberOutput(*TestSuiteRunExecutionNumberOutput) error
	VisitTestSuiteRunExecutionJsonOutput(*TestSuiteRunExecutionJsonOutput) error
	VisitTestSuiteRunExecutionChatHistoryOutput(*TestSuiteRunExecutionChatHistoryOutput) error
	VisitTestSuiteRunExecutionSearchResultsOutput(*TestSuiteRunExecutionSearchResultsOutput) error
	VisitTestSuiteRunExecutionErrorOutput(*TestSuiteRunExecutionErrorOutput) error
	VisitTestSuiteRunExecutionFunctionCallOutput(*TestSuiteRunExecutionFunctionCallOutput) error
	VisitTestSuiteRunExecutionArrayOutput(*TestSuiteRunExecutionArrayOutput) error
}

func (t *TestSuiteRunExecutionOutput) Accept(visitor TestSuiteRunExecutionOutputVisitor) error {
	if t.TestSuiteRunExecutionStringOutput != nil {
		return visitor.VisitTestSuiteRunExecutionStringOutput(t.TestSuiteRunExecutionStringOutput)
	}
	if t.TestSuiteRunExecutionNumberOutput != nil {
		return visitor.VisitTestSuiteRunExecutionNumberOutput(t.TestSuiteRunExecutionNumberOutput)
	}
	if t.TestSuiteRunExecutionJsonOutput != nil {
		return visitor.VisitTestSuiteRunExecutionJsonOutput(t.TestSuiteRunExecutionJsonOutput)
	}
	if t.TestSuiteRunExecutionChatHistoryOutput != nil {
		return visitor.VisitTestSuiteRunExecutionChatHistoryOutput(t.TestSuiteRunExecutionChatHistoryOutput)
	}
	if t.TestSuiteRunExecutionSearchResultsOutput != nil {
		return visitor.VisitTestSuiteRunExecutionSearchResultsOutput(t.TestSuiteRunExecutionSearchResultsOutput)
	}
	if t.TestSuiteRunExecutionErrorOutput != nil {
		return visitor.VisitTestSuiteRunExecutionErrorOutput(t.TestSuiteRunExecutionErrorOutput)
	}
	if t.TestSuiteRunExecutionFunctionCallOutput != nil {
		return visitor.VisitTestSuiteRunExecutionFunctionCallOutput(t.TestSuiteRunExecutionFunctionCallOutput)
	}
	if t.TestSuiteRunExecutionArrayOutput != nil {
		return visitor.VisitTestSuiteRunExecutionArrayOutput(t.TestSuiteRunExecutionArrayOutput)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type SEARCH_RESULTS
type TestSuiteRunExecutionSearchResultsOutput struct {
	Name             string          `json:"name" url:"name"`
	Value            []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string          `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionSearchResultsOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionSearchResultsOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionSearchResultsOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionSearchResultsOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionSearchResultsOutput(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "SEARCH_RESULTS", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionSearchResultsOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionSearchResultsOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionSearchResultsOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type STRING
type TestSuiteRunExecutionStringOutput struct {
	Name             string  `json:"name" url:"name"`
	Value            *string `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string  `json:"output_variable_id" url:"output_variable_id"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionStringOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionStringOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunExecutionStringOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExecutionStringOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionStringOutput(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionStringOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExecutionStringOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExecutionStringOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Vellum Test Suite against an external callable
type TestSuiteRunExternalExecConfig struct {
	Data *TestSuiteRunExternalExecConfigData `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfig) Type() string {
	return t.type_
}

func (t *TestSuiteRunExternalExecConfig) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExternalExecConfig
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfig(unmarshaler.embed)
	if unmarshaler.Type != "EXTERNAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "EXTERNAL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfig) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExternalExecConfig
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "EXTERNAL",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExternalExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExternalExecConfigData struct {
	// The executions of some callable external to Vellum whose outputs you would like to evaluate.
	Executions []*ExternalTestCaseExecution `json:"executions" url:"executions"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfigData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExternalExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfigData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExternalExecConfigDataRequest struct {
	// The executions of some callable external to Vellum whose outputs you would like to evaluate.
	Executions []*ExternalTestCaseExecutionRequest `json:"executions" url:"executions"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfigDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExternalExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfigDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Vellum Test Suite against an external callable
type TestSuiteRunExternalExecConfigRequest struct {
	Data *TestSuiteRunExternalExecConfigDataRequest `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfigRequest) Type() string {
	return t.type_
}

func (t *TestSuiteRunExternalExecConfigRequest) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunExternalExecConfigRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfigRequest(unmarshaler.embed)
	if unmarshaler.Type != "EXTERNAL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "EXTERNAL", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfigRequest) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunExternalExecConfigRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "EXTERNAL",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunExternalExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type ERROR
type TestSuiteRunMetricErrorOutput struct {
	Value *VellumError `json:"value" url:"value"`
	Name  string       `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricErrorOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricErrorOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricErrorOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricErrorOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricErrorOutput(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "ERROR", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricErrorOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricErrorOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricErrorOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type NUMBER
type TestSuiteRunMetricJsonOutput struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricJsonOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricJsonOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricJsonOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricJsonOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricJsonOutput(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "JSON", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricJsonOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricJsonOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricJsonOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type NUMBER
type TestSuiteRunMetricNumberOutput struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricNumberOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricNumberOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricNumberOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricNumberOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricNumberOutput(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "NUMBER", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricNumberOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricNumberOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricNumberOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunMetricOutput struct {
	TestSuiteRunMetricStringOutput *TestSuiteRunMetricStringOutput
	TestSuiteRunMetricNumberOutput *TestSuiteRunMetricNumberOutput
	TestSuiteRunMetricJsonOutput   *TestSuiteRunMetricJsonOutput
	TestSuiteRunMetricErrorOutput  *TestSuiteRunMetricErrorOutput
}

func (t *TestSuiteRunMetricOutput) UnmarshalJSON(data []byte) error {
	valueTestSuiteRunMetricStringOutput := new(TestSuiteRunMetricStringOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricStringOutput); err == nil {
		t.TestSuiteRunMetricStringOutput = valueTestSuiteRunMetricStringOutput
		return nil
	}
	valueTestSuiteRunMetricNumberOutput := new(TestSuiteRunMetricNumberOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricNumberOutput); err == nil {
		t.TestSuiteRunMetricNumberOutput = valueTestSuiteRunMetricNumberOutput
		return nil
	}
	valueTestSuiteRunMetricJsonOutput := new(TestSuiteRunMetricJsonOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricJsonOutput); err == nil {
		t.TestSuiteRunMetricJsonOutput = valueTestSuiteRunMetricJsonOutput
		return nil
	}
	valueTestSuiteRunMetricErrorOutput := new(TestSuiteRunMetricErrorOutput)
	if err := json.Unmarshal(data, &valueTestSuiteRunMetricErrorOutput); err == nil {
		t.TestSuiteRunMetricErrorOutput = valueTestSuiteRunMetricErrorOutput
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestSuiteRunMetricOutput) MarshalJSON() ([]byte, error) {
	if t.TestSuiteRunMetricStringOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricStringOutput)
	}
	if t.TestSuiteRunMetricNumberOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricNumberOutput)
	}
	if t.TestSuiteRunMetricJsonOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricJsonOutput)
	}
	if t.TestSuiteRunMetricErrorOutput != nil {
		return json.Marshal(t.TestSuiteRunMetricErrorOutput)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteRunMetricOutputVisitor interface {
	VisitTestSuiteRunMetricStringOutput(*TestSuiteRunMetricStringOutput) error
	VisitTestSuiteRunMetricNumberOutput(*TestSuiteRunMetricNumberOutput) error
	VisitTestSuiteRunMetricJsonOutput(*TestSuiteRunMetricJsonOutput) error
	VisitTestSuiteRunMetricErrorOutput(*TestSuiteRunMetricErrorOutput) error
}

func (t *TestSuiteRunMetricOutput) Accept(visitor TestSuiteRunMetricOutputVisitor) error {
	if t.TestSuiteRunMetricStringOutput != nil {
		return visitor.VisitTestSuiteRunMetricStringOutput(t.TestSuiteRunMetricStringOutput)
	}
	if t.TestSuiteRunMetricNumberOutput != nil {
		return visitor.VisitTestSuiteRunMetricNumberOutput(t.TestSuiteRunMetricNumberOutput)
	}
	if t.TestSuiteRunMetricJsonOutput != nil {
		return visitor.VisitTestSuiteRunMetricJsonOutput(t.TestSuiteRunMetricJsonOutput)
	}
	if t.TestSuiteRunMetricErrorOutput != nil {
		return visitor.VisitTestSuiteRunMetricErrorOutput(t.TestSuiteRunMetricErrorOutput)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// Output for a test suite run metric that is of type STRING
type TestSuiteRunMetricStringOutput struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricStringOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricStringOutput) Type() string {
	return t.type_
}

func (t *TestSuiteRunMetricStringOutput) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunMetricStringOutput
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunMetricStringOutput(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "STRING", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricStringOutput) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunMetricStringOutput
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunMetricStringOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunRead struct {
	Id        string                 `json:"id" url:"id"`
	Created   time.Time              `json:"created" url:"created"`
	TestSuite *TestSuiteRunTestSuite `json:"test_suite" url:"test_suite"`
	// The current state of this run
	//
	// - `QUEUED` - Queued
	// - `RUNNING` - Running
	// - `COMPLETE` - Complete
	// - `FAILED` - Failed
	// - `CANCELLED` - Cancelled
	State TestSuiteRunState `json:"state" url:"state"`
	// Configuration that defines how the Test Suite should be run
	ExecConfig *TestSuiteRunExecConfig `json:"exec_config,omitempty" url:"exec_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunRead) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunRead) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunRead
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunRead(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunRead) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunRead
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*t),
		Created: core.NewDateTime(t.Created),
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunRead) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// - `QUEUED` - Queued
// - `RUNNING` - Running
// - `COMPLETE` - Complete
// - `FAILED` - Failed
// - `CANCELLED` - Cancelled
type TestSuiteRunState string

const (
	TestSuiteRunStateQueued    TestSuiteRunState = "QUEUED"
	TestSuiteRunStateRunning   TestSuiteRunState = "RUNNING"
	TestSuiteRunStateComplete  TestSuiteRunState = "COMPLETE"
	TestSuiteRunStateFailed    TestSuiteRunState = "FAILED"
	TestSuiteRunStateCancelled TestSuiteRunState = "CANCELLED"
)

func NewTestSuiteRunStateFromString(s string) (TestSuiteRunState, error) {
	switch s {
	case "QUEUED":
		return TestSuiteRunStateQueued, nil
	case "RUNNING":
		return TestSuiteRunStateRunning, nil
	case "COMPLETE":
		return TestSuiteRunStateComplete, nil
	case "FAILED":
		return TestSuiteRunStateFailed, nil
	case "CANCELLED":
		return TestSuiteRunStateCancelled, nil
	}
	var t TestSuiteRunState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TestSuiteRunState) Ptr() *TestSuiteRunState {
	return &t
}

type TestSuiteRunTestSuite struct {
	Id            string `json:"id" url:"id"`
	HistoryItemId string `json:"history_item_id" url:"history_item_id"`
	Label         string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunTestSuite) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunTestSuite) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunTestSuite
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunTestSuite(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunTestSuite) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Workflow Deployment
type TestSuiteRunWorkflowReleaseTagExecConfig struct {
	Data *TestSuiteRunWorkflowReleaseTagExecConfigData `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) Type() string {
	return t.type_
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunWorkflowReleaseTagExecConfig
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfig(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "WORKFLOW_RELEASE_TAG", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunWorkflowReleaseTagExecConfig
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "WORKFLOW_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunWorkflowReleaseTagExecConfigData struct {
	// The ID of the Workflow Deployment to run the Test Suite against.
	WorkflowDeploymentId string `json:"workflow_deployment_id" url:"workflow_deployment_id"`
	// A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunWorkflowReleaseTagExecConfigDataRequest struct {
	// The ID of the Workflow Deployment to run the Test Suite against.
	WorkflowDeploymentId string `json:"workflow_deployment_id" url:"workflow_deployment_id"`
	// A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Workflow Deployment
type TestSuiteRunWorkflowReleaseTagExecConfigRequest struct {
	Data *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) Type() string {
	return t.type_
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunWorkflowReleaseTagExecConfigRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigRequest(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW_RELEASE_TAG" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "WORKFLOW_RELEASE_TAG", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunWorkflowReleaseTagExecConfigRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "WORKFLOW_RELEASE_TAG",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestCase struct {
	Id               *string                  `json:"id,omitempty" url:"id,omitempty"`
	ExternalId       *string                  `json:"external_id,omitempty" url:"external_id,omitempty"`
	Label            *string                  `json:"label,omitempty" url:"label,omitempty"`
	InputValues      []*TestCaseVariableValue `json:"input_values" url:"input_values"`
	EvaluationValues []*TestCaseVariableValue `json:"evaluation_values" url:"evaluation_values"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCase) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCase) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCase(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCase) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestCaseBulkOperationRequest struct {
	TestSuiteTestCaseCreateBulkOperationRequest  *TestSuiteTestCaseCreateBulkOperationRequest
	TestSuiteTestCaseReplaceBulkOperationRequest *TestSuiteTestCaseReplaceBulkOperationRequest
	TestSuiteTestCaseUpsertBulkOperationRequest  *TestSuiteTestCaseUpsertBulkOperationRequest
	TestSuiteTestCaseDeleteBulkOperationRequest  *TestSuiteTestCaseDeleteBulkOperationRequest
}

func (t *TestSuiteTestCaseBulkOperationRequest) UnmarshalJSON(data []byte) error {
	valueTestSuiteTestCaseCreateBulkOperationRequest := new(TestSuiteTestCaseCreateBulkOperationRequest)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseCreateBulkOperationRequest); err == nil {
		t.TestSuiteTestCaseCreateBulkOperationRequest = valueTestSuiteTestCaseCreateBulkOperationRequest
		return nil
	}
	valueTestSuiteTestCaseReplaceBulkOperationRequest := new(TestSuiteTestCaseReplaceBulkOperationRequest)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseReplaceBulkOperationRequest); err == nil {
		t.TestSuiteTestCaseReplaceBulkOperationRequest = valueTestSuiteTestCaseReplaceBulkOperationRequest
		return nil
	}
	valueTestSuiteTestCaseUpsertBulkOperationRequest := new(TestSuiteTestCaseUpsertBulkOperationRequest)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseUpsertBulkOperationRequest); err == nil {
		t.TestSuiteTestCaseUpsertBulkOperationRequest = valueTestSuiteTestCaseUpsertBulkOperationRequest
		return nil
	}
	valueTestSuiteTestCaseDeleteBulkOperationRequest := new(TestSuiteTestCaseDeleteBulkOperationRequest)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseDeleteBulkOperationRequest); err == nil {
		t.TestSuiteTestCaseDeleteBulkOperationRequest = valueTestSuiteTestCaseDeleteBulkOperationRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestSuiteTestCaseBulkOperationRequest) MarshalJSON() ([]byte, error) {
	if t.TestSuiteTestCaseCreateBulkOperationRequest != nil {
		return json.Marshal(t.TestSuiteTestCaseCreateBulkOperationRequest)
	}
	if t.TestSuiteTestCaseReplaceBulkOperationRequest != nil {
		return json.Marshal(t.TestSuiteTestCaseReplaceBulkOperationRequest)
	}
	if t.TestSuiteTestCaseUpsertBulkOperationRequest != nil {
		return json.Marshal(t.TestSuiteTestCaseUpsertBulkOperationRequest)
	}
	if t.TestSuiteTestCaseDeleteBulkOperationRequest != nil {
		return json.Marshal(t.TestSuiteTestCaseDeleteBulkOperationRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteTestCaseBulkOperationRequestVisitor interface {
	VisitTestSuiteTestCaseCreateBulkOperationRequest(*TestSuiteTestCaseCreateBulkOperationRequest) error
	VisitTestSuiteTestCaseReplaceBulkOperationRequest(*TestSuiteTestCaseReplaceBulkOperationRequest) error
	VisitTestSuiteTestCaseUpsertBulkOperationRequest(*TestSuiteTestCaseUpsertBulkOperationRequest) error
	VisitTestSuiteTestCaseDeleteBulkOperationRequest(*TestSuiteTestCaseDeleteBulkOperationRequest) error
}

func (t *TestSuiteTestCaseBulkOperationRequest) Accept(visitor TestSuiteTestCaseBulkOperationRequestVisitor) error {
	if t.TestSuiteTestCaseCreateBulkOperationRequest != nil {
		return visitor.VisitTestSuiteTestCaseCreateBulkOperationRequest(t.TestSuiteTestCaseCreateBulkOperationRequest)
	}
	if t.TestSuiteTestCaseReplaceBulkOperationRequest != nil {
		return visitor.VisitTestSuiteTestCaseReplaceBulkOperationRequest(t.TestSuiteTestCaseReplaceBulkOperationRequest)
	}
	if t.TestSuiteTestCaseUpsertBulkOperationRequest != nil {
		return visitor.VisitTestSuiteTestCaseUpsertBulkOperationRequest(t.TestSuiteTestCaseUpsertBulkOperationRequest)
	}
	if t.TestSuiteTestCaseDeleteBulkOperationRequest != nil {
		return visitor.VisitTestSuiteTestCaseDeleteBulkOperationRequest(t.TestSuiteTestCaseDeleteBulkOperationRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteTestCaseBulkResult struct {
	TestSuiteTestCaseCreatedBulkResult  *TestSuiteTestCaseCreatedBulkResult
	TestSuiteTestCaseReplacedBulkResult *TestSuiteTestCaseReplacedBulkResult
	TestSuiteTestCaseDeletedBulkResult  *TestSuiteTestCaseDeletedBulkResult
	TestSuiteTestCaseRejectedBulkResult *TestSuiteTestCaseRejectedBulkResult
}

func (t *TestSuiteTestCaseBulkResult) UnmarshalJSON(data []byte) error {
	valueTestSuiteTestCaseCreatedBulkResult := new(TestSuiteTestCaseCreatedBulkResult)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseCreatedBulkResult); err == nil {
		t.TestSuiteTestCaseCreatedBulkResult = valueTestSuiteTestCaseCreatedBulkResult
		return nil
	}
	valueTestSuiteTestCaseReplacedBulkResult := new(TestSuiteTestCaseReplacedBulkResult)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseReplacedBulkResult); err == nil {
		t.TestSuiteTestCaseReplacedBulkResult = valueTestSuiteTestCaseReplacedBulkResult
		return nil
	}
	valueTestSuiteTestCaseDeletedBulkResult := new(TestSuiteTestCaseDeletedBulkResult)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseDeletedBulkResult); err == nil {
		t.TestSuiteTestCaseDeletedBulkResult = valueTestSuiteTestCaseDeletedBulkResult
		return nil
	}
	valueTestSuiteTestCaseRejectedBulkResult := new(TestSuiteTestCaseRejectedBulkResult)
	if err := json.Unmarshal(data, &valueTestSuiteTestCaseRejectedBulkResult); err == nil {
		t.TestSuiteTestCaseRejectedBulkResult = valueTestSuiteTestCaseRejectedBulkResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestSuiteTestCaseBulkResult) MarshalJSON() ([]byte, error) {
	if t.TestSuiteTestCaseCreatedBulkResult != nil {
		return json.Marshal(t.TestSuiteTestCaseCreatedBulkResult)
	}
	if t.TestSuiteTestCaseReplacedBulkResult != nil {
		return json.Marshal(t.TestSuiteTestCaseReplacedBulkResult)
	}
	if t.TestSuiteTestCaseDeletedBulkResult != nil {
		return json.Marshal(t.TestSuiteTestCaseDeletedBulkResult)
	}
	if t.TestSuiteTestCaseRejectedBulkResult != nil {
		return json.Marshal(t.TestSuiteTestCaseRejectedBulkResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TestSuiteTestCaseBulkResultVisitor interface {
	VisitTestSuiteTestCaseCreatedBulkResult(*TestSuiteTestCaseCreatedBulkResult) error
	VisitTestSuiteTestCaseReplacedBulkResult(*TestSuiteTestCaseReplacedBulkResult) error
	VisitTestSuiteTestCaseDeletedBulkResult(*TestSuiteTestCaseDeletedBulkResult) error
	VisitTestSuiteTestCaseRejectedBulkResult(*TestSuiteTestCaseRejectedBulkResult) error
}

func (t *TestSuiteTestCaseBulkResult) Accept(visitor TestSuiteTestCaseBulkResultVisitor) error {
	if t.TestSuiteTestCaseCreatedBulkResult != nil {
		return visitor.VisitTestSuiteTestCaseCreatedBulkResult(t.TestSuiteTestCaseCreatedBulkResult)
	}
	if t.TestSuiteTestCaseReplacedBulkResult != nil {
		return visitor.VisitTestSuiteTestCaseReplacedBulkResult(t.TestSuiteTestCaseReplacedBulkResult)
	}
	if t.TestSuiteTestCaseDeletedBulkResult != nil {
		return visitor.VisitTestSuiteTestCaseDeletedBulkResult(t.TestSuiteTestCaseDeletedBulkResult)
	}
	if t.TestSuiteTestCaseRejectedBulkResult != nil {
		return visitor.VisitTestSuiteTestCaseRejectedBulkResult(t.TestSuiteTestCaseRejectedBulkResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

// A bulk operation that represents the creation of a Test Case.
type TestSuiteTestCaseCreateBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id    string                          `json:"id" url:"id"`
	Data  *CreateTestSuiteTestCaseRequest `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseCreateBulkOperationRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseCreateBulkOperationRequest(unmarshaler.embed)
	if unmarshaler.Type != "CREATE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CREATE", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseCreateBulkOperationRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CREATE",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that created a Test Case.
type TestSuiteTestCaseCreatedBulkResult struct {
	Id    string                                  `json:"id" url:"id"`
	Data  *TestSuiteTestCaseCreatedBulkResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseCreatedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseCreatedBulkResult) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseCreatedBulkResult) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseCreatedBulkResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseCreatedBulkResult(unmarshaler.embed)
	if unmarshaler.Type != "CREATED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "CREATED", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseCreatedBulkResult) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseCreatedBulkResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "CREATED",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseCreatedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Information about the Test Case that was created.
type TestSuiteTestCaseCreatedBulkResultData struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseCreatedBulkResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseCreatedBulkResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseCreatedBulkResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseCreatedBulkResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseCreatedBulkResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestCaseDeleteBulkOperationDataRequest struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeleteBulkOperationDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeleteBulkOperationDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseDeleteBulkOperationDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeleteBulkOperationDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeleteBulkOperationDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A bulk operation that represents the deletion of a Test Case.
type TestSuiteTestCaseDeleteBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id string `json:"id" url:"id"`
	// Information about the Test Case to delete
	Data  *TestSuiteTestCaseDeleteBulkOperationDataRequest `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseDeleteBulkOperationRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeleteBulkOperationRequest(unmarshaler.embed)
	if unmarshaler.Type != "DELETE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "DELETE", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseDeleteBulkOperationRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "DELETE",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that deleted a Test Case.
type TestSuiteTestCaseDeletedBulkResult struct {
	// An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.
	Id    string                                  `json:"id" url:"id"`
	Data  *TestSuiteTestCaseDeletedBulkResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeletedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeletedBulkResult) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseDeletedBulkResult) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseDeletedBulkResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeletedBulkResult(unmarshaler.embed)
	if unmarshaler.Type != "DELETED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "DELETED", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeletedBulkResult) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseDeletedBulkResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "DELETED",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseDeletedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Information about the Test Case that was deleted
type TestSuiteTestCaseDeletedBulkResultData struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeletedBulkResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeletedBulkResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseDeletedBulkResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeletedBulkResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeletedBulkResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that failed to operate on a Test Case.
type TestSuiteTestCaseRejectedBulkResult struct {
	// An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Details about the error that occurred
	Data  map[string]interface{} `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseRejectedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseRejectedBulkResult) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseRejectedBulkResult) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseRejectedBulkResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseRejectedBulkResult(unmarshaler.embed)
	if unmarshaler.Type != "REJECTED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "REJECTED", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseRejectedBulkResult) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseRejectedBulkResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "REJECTED",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseRejectedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A bulk operation that represents the replacing of a Test Case.
type TestSuiteTestCaseReplaceBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id    string                           `json:"id" url:"id"`
	Data  *ReplaceTestSuiteTestCaseRequest `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseReplaceBulkOperationRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseReplaceBulkOperationRequest(unmarshaler.embed)
	if unmarshaler.Type != "REPLACE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "REPLACE", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseReplaceBulkOperationRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "REPLACE",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that replaced a Test Case.
type TestSuiteTestCaseReplacedBulkResult struct {
	// An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.
	Id    string                                   `json:"id" url:"id"`
	Data  *TestSuiteTestCaseReplacedBulkResultData `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseReplacedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseReplacedBulkResult) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseReplacedBulkResult) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseReplacedBulkResult
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseReplacedBulkResult(unmarshaler.embed)
	if unmarshaler.Type != "REPLACED" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "REPLACED", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseReplacedBulkResult) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseReplacedBulkResult
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "REPLACED",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseReplacedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Information about the Test Case that was replaced
type TestSuiteTestCaseReplacedBulkResultData struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseReplacedBulkResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseReplacedBulkResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseReplacedBulkResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseReplacedBulkResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseReplacedBulkResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A bulk operation that represents the upserting of a Test Case.
type TestSuiteTestCaseUpsertBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id    string                          `json:"id" url:"id"`
	Data  *UpsertTestSuiteTestCaseRequest `json:"data" url:"data"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) Type() string {
	return t.type_
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type embed TestSuiteTestCaseUpsertBulkOperationRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteTestCaseUpsertBulkOperationRequest(unmarshaler.embed)
	if unmarshaler.Type != "UPSERT" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "UPSERT", unmarshaler.Type)
	}
	t.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *t, "type")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) MarshalJSON() ([]byte, error) {
	type embed TestSuiteTestCaseUpsertBulkOperationRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*t),
		Type:  "UPSERT",
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Configuration for token overlapping window chunking
type TokenOverlappingWindowChunkerConfig struct {
	TokenLimit   *int     `json:"token_limit,omitempty" url:"token_limit,omitempty"`
	OverlapRatio *float64 `json:"overlap_ratio,omitempty" url:"overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunkerConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenOverlappingWindowChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunkerConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Configuration for token overlapping window chunking
type TokenOverlappingWindowChunkerConfigRequest struct {
	TokenLimit   *int     `json:"token_limit,omitempty" url:"token_limit,omitempty"`
	OverlapRatio *float64 `json:"overlap_ratio,omitempty" url:"overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunkerConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunkerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenOverlappingWindowChunkerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunkerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunkerConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Token overlapping window chunking
type TokenOverlappingWindowChunking struct {
	ChunkerConfig *TokenOverlappingWindowChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunking) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunking) ChunkerName() string {
	return t.chunkerName
}

func (t *TokenOverlappingWindowChunking) UnmarshalJSON(data []byte) error {
	type embed TokenOverlappingWindowChunking
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunking(unmarshaler.embed)
	if unmarshaler.ChunkerName != "token-overlapping-window-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "token-overlapping-window-chunker", unmarshaler.ChunkerName)
	}
	t.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *t, "chunker_name")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunking) MarshalJSON() ([]byte, error) {
	type embed TokenOverlappingWindowChunking
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*t),
		ChunkerName: "token-overlapping-window-chunker",
	}
	return json.Marshal(marshaler)
}

func (t *TokenOverlappingWindowChunking) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Token overlapping window chunking
type TokenOverlappingWindowChunkingRequest struct {
	ChunkerConfig *TokenOverlappingWindowChunkerConfigRequest `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`
	chunkerName   string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunkingRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunkingRequest) ChunkerName() string {
	return t.chunkerName
}

func (t *TokenOverlappingWindowChunkingRequest) UnmarshalJSON(data []byte) error {
	type embed TokenOverlappingWindowChunkingRequest
	var unmarshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunkingRequest(unmarshaler.embed)
	if unmarshaler.ChunkerName != "token-overlapping-window-chunker" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "token-overlapping-window-chunker", unmarshaler.ChunkerName)
	}
	t.chunkerName = unmarshaler.ChunkerName

	extraProperties, err := core.ExtractExtraProperties(data, *t, "chunker_name")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunkingRequest) MarshalJSON() ([]byte, error) {
	type embed TokenOverlappingWindowChunkingRequest
	var marshaler = struct {
		embed
		ChunkerName string `json:"chunker_name"`
	}{
		embed:       embed(*t),
		ChunkerName: "token-overlapping-window-chunker",
	}
	return json.Marshal(marshaler)
}

func (t *TokenOverlappingWindowChunkingRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// - `USD` - USD
type UnitEnum = string

type UploadDocumentResponse struct {
	// The ID of the newly created document.
	DocumentId string `json:"document_id" url:"document_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UploadDocumentResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UploadDocumentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UploadDocumentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UploadDocumentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UploadDocumentResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertTestSuiteTestCaseRequest struct {
	// The Vellum-generated ID of an existing Test Case whose data you'd like to replace. If specified and no Test Case exists with this ID, a 404 will be returned.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// An ID external to Vellum that uniquely identifies the Test Case that you'd like to create/update. If there's a match on a Test Case that was previously created with the same external_id, it will be updated. Otherwise, a new Test Case will be created with this value as its external_id. If no external_id is specified, then a new Test Case will always be created.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A human-readable label used to convey the intention of this Test Case
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// Values for each of the Test Case's input variables
	InputValues []*NamedTestCaseVariableValueRequest `json:"input_values" url:"input_values"`
	// Values for each of the Test Case's evaluation variables
	EvaluationValues []*NamedTestCaseVariableValueRequest `json:"evaluation_values" url:"evaluation_values"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertTestSuiteTestCaseRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertTestSuiteTestCaseRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertTestSuiteTestCaseRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertTestSuiteTestCaseRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertTestSuiteTestCaseRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// A block that represents a variable in a prompt template.
type VariablePromptBlock struct {
	State           *PromptBlockState           `json:"state,omitempty" url:"state,omitempty"`
	CacheConfig     *EphemeralPromptCacheConfig `json:"cache_config,omitempty" url:"cache_config,omitempty"`
	InputVariableId string                      `json:"input_variable_id" url:"input_variable_id"`
	blockType       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VariablePromptBlock) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VariablePromptBlock) BlockType() string {
	return v.blockType
}

func (v *VariablePromptBlock) UnmarshalJSON(data []byte) error {
	type embed VariablePromptBlock
	var unmarshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VariablePromptBlock(unmarshaler.embed)
	if unmarshaler.BlockType != "VARIABLE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "VARIABLE", unmarshaler.BlockType)
	}
	v.blockType = unmarshaler.BlockType

	extraProperties, err := core.ExtractExtraProperties(data, *v, "block_type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VariablePromptBlock) MarshalJSON() ([]byte, error) {
	type embed VariablePromptBlock
	var marshaler = struct {
		embed
		BlockType string `json:"block_type"`
	}{
		embed:     embed(*v),
		BlockType: "VARIABLE",
	}
	return json.Marshal(marshaler)
}

func (v *VariablePromptBlock) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumAudio struct {
	// A valid data URL containing the audio data.
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumAudio) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumAudio) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumAudio
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumAudio(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumAudio) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumAudioRequest struct {
	// A valid data URL containing the audio data.
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumAudioRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumAudioRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumAudioRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumAudioRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumAudioRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumError struct {
	Message string              `json:"message" url:"message"`
	Code    VellumErrorCodeEnum `json:"code" url:"code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumError) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// - `INVALID_REQUEST` - INVALID_REQUEST
// - `PROVIDER_ERROR` - PROVIDER_ERROR
// - `REQUEST_TIMEOUT` - REQUEST_TIMEOUT
// - `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// - `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
type VellumErrorCodeEnum string

const (
	VellumErrorCodeEnumInvalidRequest      VellumErrorCodeEnum = "INVALID_REQUEST"
	VellumErrorCodeEnumProviderError       VellumErrorCodeEnum = "PROVIDER_ERROR"
	VellumErrorCodeEnumRequestTimeout      VellumErrorCodeEnum = "REQUEST_TIMEOUT"
	VellumErrorCodeEnumInternalServerError VellumErrorCodeEnum = "INTERNAL_SERVER_ERROR"
	VellumErrorCodeEnumUserDefinedError    VellumErrorCodeEnum = "USER_DEFINED_ERROR"
)

func NewVellumErrorCodeEnumFromString(s string) (VellumErrorCodeEnum, error) {
	switch s {
	case "INVALID_REQUEST":
		return VellumErrorCodeEnumInvalidRequest, nil
	case "PROVIDER_ERROR":
		return VellumErrorCodeEnumProviderError, nil
	case "REQUEST_TIMEOUT":
		return VellumErrorCodeEnumRequestTimeout, nil
	case "INTERNAL_SERVER_ERROR":
		return VellumErrorCodeEnumInternalServerError, nil
	case "USER_DEFINED_ERROR":
		return VellumErrorCodeEnumUserDefinedError, nil
	}
	var t VellumErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumErrorCodeEnum) Ptr() *VellumErrorCodeEnum {
	return &v
}

type VellumErrorRequest struct {
	Message string              `json:"message" url:"message"`
	Code    VellumErrorCodeEnum `json:"code" url:"code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumErrorRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumErrorRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumErrorRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumErrorRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumErrorRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImage struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumImage) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumImage) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImage) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImageRequest struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumImageRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumImageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImageRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImageRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumValue struct {
	StringVellumValue        *StringVellumValue
	NumberVellumValue        *NumberVellumValue
	JsonVellumValue          *JsonVellumValue
	ImageVellumValue         *ImageVellumValue
	AudioVellumValue         *AudioVellumValue
	FunctionCallVellumValue  *FunctionCallVellumValue
	ErrorVellumValue         *ErrorVellumValue
	ArrayVellumValue         *ArrayVellumValue
	ChatHistoryVellumValue   *ChatHistoryVellumValue
	SearchResultsVellumValue *SearchResultsVellumValue
}

func (v *VellumValue) UnmarshalJSON(data []byte) error {
	valueStringVellumValue := new(StringVellumValue)
	if err := json.Unmarshal(data, &valueStringVellumValue); err == nil {
		v.StringVellumValue = valueStringVellumValue
		return nil
	}
	valueNumberVellumValue := new(NumberVellumValue)
	if err := json.Unmarshal(data, &valueNumberVellumValue); err == nil {
		v.NumberVellumValue = valueNumberVellumValue
		return nil
	}
	valueJsonVellumValue := new(JsonVellumValue)
	if err := json.Unmarshal(data, &valueJsonVellumValue); err == nil {
		v.JsonVellumValue = valueJsonVellumValue
		return nil
	}
	valueImageVellumValue := new(ImageVellumValue)
	if err := json.Unmarshal(data, &valueImageVellumValue); err == nil {
		v.ImageVellumValue = valueImageVellumValue
		return nil
	}
	valueAudioVellumValue := new(AudioVellumValue)
	if err := json.Unmarshal(data, &valueAudioVellumValue); err == nil {
		v.AudioVellumValue = valueAudioVellumValue
		return nil
	}
	valueFunctionCallVellumValue := new(FunctionCallVellumValue)
	if err := json.Unmarshal(data, &valueFunctionCallVellumValue); err == nil {
		v.FunctionCallVellumValue = valueFunctionCallVellumValue
		return nil
	}
	valueErrorVellumValue := new(ErrorVellumValue)
	if err := json.Unmarshal(data, &valueErrorVellumValue); err == nil {
		v.ErrorVellumValue = valueErrorVellumValue
		return nil
	}
	valueArrayVellumValue := new(ArrayVellumValue)
	if err := json.Unmarshal(data, &valueArrayVellumValue); err == nil {
		v.ArrayVellumValue = valueArrayVellumValue
		return nil
	}
	valueChatHistoryVellumValue := new(ChatHistoryVellumValue)
	if err := json.Unmarshal(data, &valueChatHistoryVellumValue); err == nil {
		v.ChatHistoryVellumValue = valueChatHistoryVellumValue
		return nil
	}
	valueSearchResultsVellumValue := new(SearchResultsVellumValue)
	if err := json.Unmarshal(data, &valueSearchResultsVellumValue); err == nil {
		v.SearchResultsVellumValue = valueSearchResultsVellumValue
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumValue) MarshalJSON() ([]byte, error) {
	if v.StringVellumValue != nil {
		return json.Marshal(v.StringVellumValue)
	}
	if v.NumberVellumValue != nil {
		return json.Marshal(v.NumberVellumValue)
	}
	if v.JsonVellumValue != nil {
		return json.Marshal(v.JsonVellumValue)
	}
	if v.ImageVellumValue != nil {
		return json.Marshal(v.ImageVellumValue)
	}
	if v.AudioVellumValue != nil {
		return json.Marshal(v.AudioVellumValue)
	}
	if v.FunctionCallVellumValue != nil {
		return json.Marshal(v.FunctionCallVellumValue)
	}
	if v.ErrorVellumValue != nil {
		return json.Marshal(v.ErrorVellumValue)
	}
	if v.ArrayVellumValue != nil {
		return json.Marshal(v.ArrayVellumValue)
	}
	if v.ChatHistoryVellumValue != nil {
		return json.Marshal(v.ChatHistoryVellumValue)
	}
	if v.SearchResultsVellumValue != nil {
		return json.Marshal(v.SearchResultsVellumValue)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueVisitor interface {
	VisitStringVellumValue(*StringVellumValue) error
	VisitNumberVellumValue(*NumberVellumValue) error
	VisitJsonVellumValue(*JsonVellumValue) error
	VisitImageVellumValue(*ImageVellumValue) error
	VisitAudioVellumValue(*AudioVellumValue) error
	VisitFunctionCallVellumValue(*FunctionCallVellumValue) error
	VisitErrorVellumValue(*ErrorVellumValue) error
	VisitArrayVellumValue(*ArrayVellumValue) error
	VisitChatHistoryVellumValue(*ChatHistoryVellumValue) error
	VisitSearchResultsVellumValue(*SearchResultsVellumValue) error
}

func (v *VellumValue) Accept(visitor VellumValueVisitor) error {
	if v.StringVellumValue != nil {
		return visitor.VisitStringVellumValue(v.StringVellumValue)
	}
	if v.NumberVellumValue != nil {
		return visitor.VisitNumberVellumValue(v.NumberVellumValue)
	}
	if v.JsonVellumValue != nil {
		return visitor.VisitJsonVellumValue(v.JsonVellumValue)
	}
	if v.ImageVellumValue != nil {
		return visitor.VisitImageVellumValue(v.ImageVellumValue)
	}
	if v.AudioVellumValue != nil {
		return visitor.VisitAudioVellumValue(v.AudioVellumValue)
	}
	if v.FunctionCallVellumValue != nil {
		return visitor.VisitFunctionCallVellumValue(v.FunctionCallVellumValue)
	}
	if v.ErrorVellumValue != nil {
		return visitor.VisitErrorVellumValue(v.ErrorVellumValue)
	}
	if v.ArrayVellumValue != nil {
		return visitor.VisitArrayVellumValue(v.ArrayVellumValue)
	}
	if v.ChatHistoryVellumValue != nil {
		return visitor.VisitChatHistoryVellumValue(v.ChatHistoryVellumValue)
	}
	if v.SearchResultsVellumValue != nil {
		return visitor.VisitSearchResultsVellumValue(v.SearchResultsVellumValue)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// A higher-order condition that combines one or more basic conditions or other higher-order conditions.
type VellumValueLogicalConditionGroupRequest struct {
	Conditions []*VellumValueLogicalExpressionRequest `json:"conditions" url:"conditions"`
	Combinator ConditionCombinator                    `json:"combinator" url:"combinator"`
	Negated    bool                                   `json:"negated" url:"negated"`
	type_      string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumValueLogicalConditionGroupRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumValueLogicalConditionGroupRequest) Type() string {
	return v.type_
}

func (v *VellumValueLogicalConditionGroupRequest) UnmarshalJSON(data []byte) error {
	type embed VellumValueLogicalConditionGroupRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VellumValueLogicalConditionGroupRequest(unmarshaler.embed)
	if unmarshaler.Type != "LOGICAL_CONDITION_GROUP" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "LOGICAL_CONDITION_GROUP", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumValueLogicalConditionGroupRequest) MarshalJSON() ([]byte, error) {
	type embed VellumValueLogicalConditionGroupRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "LOGICAL_CONDITION_GROUP",
	}
	return json.Marshal(marshaler)
}

func (v *VellumValueLogicalConditionGroupRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A basic condition comparing two Vellum values.
type VellumValueLogicalConditionRequest struct {
	LhsVariable *VellumValueRequest `json:"lhs_variable" url:"lhs_variable"`
	Operator    LogicalOperator     `json:"operator" url:"operator"`
	RhsVariable *VellumValueRequest `json:"rhs_variable" url:"rhs_variable"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumValueLogicalConditionRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumValueLogicalConditionRequest) Type() string {
	return v.type_
}

func (v *VellumValueLogicalConditionRequest) UnmarshalJSON(data []byte) error {
	type embed VellumValueLogicalConditionRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VellumValueLogicalConditionRequest(unmarshaler.embed)
	if unmarshaler.Type != "LOGICAL_CONDITION" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", v, "LOGICAL_CONDITION", unmarshaler.Type)
	}
	v.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *v, "type")
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumValueLogicalConditionRequest) MarshalJSON() ([]byte, error) {
	type embed VellumValueLogicalConditionRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*v),
		Type:  "LOGICAL_CONDITION",
	}
	return json.Marshal(marshaler)
}

func (v *VellumValueLogicalConditionRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumValueLogicalExpressionRequest struct {
	VellumValueLogicalConditionRequest      *VellumValueLogicalConditionRequest
	VellumValueLogicalConditionGroupRequest *VellumValueLogicalConditionGroupRequest
}

func (v *VellumValueLogicalExpressionRequest) UnmarshalJSON(data []byte) error {
	valueVellumValueLogicalConditionRequest := new(VellumValueLogicalConditionRequest)
	if err := json.Unmarshal(data, &valueVellumValueLogicalConditionRequest); err == nil {
		v.VellumValueLogicalConditionRequest = valueVellumValueLogicalConditionRequest
		return nil
	}
	valueVellumValueLogicalConditionGroupRequest := new(VellumValueLogicalConditionGroupRequest)
	if err := json.Unmarshal(data, &valueVellumValueLogicalConditionGroupRequest); err == nil {
		v.VellumValueLogicalConditionGroupRequest = valueVellumValueLogicalConditionGroupRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumValueLogicalExpressionRequest) MarshalJSON() ([]byte, error) {
	if v.VellumValueLogicalConditionRequest != nil {
		return json.Marshal(v.VellumValueLogicalConditionRequest)
	}
	if v.VellumValueLogicalConditionGroupRequest != nil {
		return json.Marshal(v.VellumValueLogicalConditionGroupRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueLogicalExpressionRequestVisitor interface {
	VisitVellumValueLogicalConditionRequest(*VellumValueLogicalConditionRequest) error
	VisitVellumValueLogicalConditionGroupRequest(*VellumValueLogicalConditionGroupRequest) error
}

func (v *VellumValueLogicalExpressionRequest) Accept(visitor VellumValueLogicalExpressionRequestVisitor) error {
	if v.VellumValueLogicalConditionRequest != nil {
		return visitor.VisitVellumValueLogicalConditionRequest(v.VellumValueLogicalConditionRequest)
	}
	if v.VellumValueLogicalConditionGroupRequest != nil {
		return visitor.VisitVellumValueLogicalConditionGroupRequest(v.VellumValueLogicalConditionGroupRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueRequest struct {
	StringVellumValueRequest        *StringVellumValueRequest
	NumberVellumValueRequest        *NumberVellumValueRequest
	JsonVellumValueRequest          *JsonVellumValueRequest
	ImageVellumValueRequest         *ImageVellumValueRequest
	AudioVellumValueRequest         *AudioVellumValueRequest
	FunctionCallVellumValueRequest  *FunctionCallVellumValueRequest
	ErrorVellumValueRequest         *ErrorVellumValueRequest
	ArrayVellumValueRequest         *ArrayVellumValueRequest
	ChatHistoryVellumValueRequest   *ChatHistoryVellumValueRequest
	SearchResultsVellumValueRequest *SearchResultsVellumValueRequest
}

func (v *VellumValueRequest) UnmarshalJSON(data []byte) error {
	valueStringVellumValueRequest := new(StringVellumValueRequest)
	if err := json.Unmarshal(data, &valueStringVellumValueRequest); err == nil {
		v.StringVellumValueRequest = valueStringVellumValueRequest
		return nil
	}
	valueNumberVellumValueRequest := new(NumberVellumValueRequest)
	if err := json.Unmarshal(data, &valueNumberVellumValueRequest); err == nil {
		v.NumberVellumValueRequest = valueNumberVellumValueRequest
		return nil
	}
	valueJsonVellumValueRequest := new(JsonVellumValueRequest)
	if err := json.Unmarshal(data, &valueJsonVellumValueRequest); err == nil {
		v.JsonVellumValueRequest = valueJsonVellumValueRequest
		return nil
	}
	valueImageVellumValueRequest := new(ImageVellumValueRequest)
	if err := json.Unmarshal(data, &valueImageVellumValueRequest); err == nil {
		v.ImageVellumValueRequest = valueImageVellumValueRequest
		return nil
	}
	valueAudioVellumValueRequest := new(AudioVellumValueRequest)
	if err := json.Unmarshal(data, &valueAudioVellumValueRequest); err == nil {
		v.AudioVellumValueRequest = valueAudioVellumValueRequest
		return nil
	}
	valueFunctionCallVellumValueRequest := new(FunctionCallVellumValueRequest)
	if err := json.Unmarshal(data, &valueFunctionCallVellumValueRequest); err == nil {
		v.FunctionCallVellumValueRequest = valueFunctionCallVellumValueRequest
		return nil
	}
	valueErrorVellumValueRequest := new(ErrorVellumValueRequest)
	if err := json.Unmarshal(data, &valueErrorVellumValueRequest); err == nil {
		v.ErrorVellumValueRequest = valueErrorVellumValueRequest
		return nil
	}
	valueArrayVellumValueRequest := new(ArrayVellumValueRequest)
	if err := json.Unmarshal(data, &valueArrayVellumValueRequest); err == nil {
		v.ArrayVellumValueRequest = valueArrayVellumValueRequest
		return nil
	}
	valueChatHistoryVellumValueRequest := new(ChatHistoryVellumValueRequest)
	if err := json.Unmarshal(data, &valueChatHistoryVellumValueRequest); err == nil {
		v.ChatHistoryVellumValueRequest = valueChatHistoryVellumValueRequest
		return nil
	}
	valueSearchResultsVellumValueRequest := new(SearchResultsVellumValueRequest)
	if err := json.Unmarshal(data, &valueSearchResultsVellumValueRequest); err == nil {
		v.SearchResultsVellumValueRequest = valueSearchResultsVellumValueRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VellumValueRequest) MarshalJSON() ([]byte, error) {
	if v.StringVellumValueRequest != nil {
		return json.Marshal(v.StringVellumValueRequest)
	}
	if v.NumberVellumValueRequest != nil {
		return json.Marshal(v.NumberVellumValueRequest)
	}
	if v.JsonVellumValueRequest != nil {
		return json.Marshal(v.JsonVellumValueRequest)
	}
	if v.ImageVellumValueRequest != nil {
		return json.Marshal(v.ImageVellumValueRequest)
	}
	if v.AudioVellumValueRequest != nil {
		return json.Marshal(v.AudioVellumValueRequest)
	}
	if v.FunctionCallVellumValueRequest != nil {
		return json.Marshal(v.FunctionCallVellumValueRequest)
	}
	if v.ErrorVellumValueRequest != nil {
		return json.Marshal(v.ErrorVellumValueRequest)
	}
	if v.ArrayVellumValueRequest != nil {
		return json.Marshal(v.ArrayVellumValueRequest)
	}
	if v.ChatHistoryVellumValueRequest != nil {
		return json.Marshal(v.ChatHistoryVellumValueRequest)
	}
	if v.SearchResultsVellumValueRequest != nil {
		return json.Marshal(v.SearchResultsVellumValueRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumValueRequestVisitor interface {
	VisitStringVellumValueRequest(*StringVellumValueRequest) error
	VisitNumberVellumValueRequest(*NumberVellumValueRequest) error
	VisitJsonVellumValueRequest(*JsonVellumValueRequest) error
	VisitImageVellumValueRequest(*ImageVellumValueRequest) error
	VisitAudioVellumValueRequest(*AudioVellumValueRequest) error
	VisitFunctionCallVellumValueRequest(*FunctionCallVellumValueRequest) error
	VisitErrorVellumValueRequest(*ErrorVellumValueRequest) error
	VisitArrayVellumValueRequest(*ArrayVellumValueRequest) error
	VisitChatHistoryVellumValueRequest(*ChatHistoryVellumValueRequest) error
	VisitSearchResultsVellumValueRequest(*SearchResultsVellumValueRequest) error
}

func (v *VellumValueRequest) Accept(visitor VellumValueRequestVisitor) error {
	if v.StringVellumValueRequest != nil {
		return visitor.VisitStringVellumValueRequest(v.StringVellumValueRequest)
	}
	if v.NumberVellumValueRequest != nil {
		return visitor.VisitNumberVellumValueRequest(v.NumberVellumValueRequest)
	}
	if v.JsonVellumValueRequest != nil {
		return visitor.VisitJsonVellumValueRequest(v.JsonVellumValueRequest)
	}
	if v.ImageVellumValueRequest != nil {
		return visitor.VisitImageVellumValueRequest(v.ImageVellumValueRequest)
	}
	if v.AudioVellumValueRequest != nil {
		return visitor.VisitAudioVellumValueRequest(v.AudioVellumValueRequest)
	}
	if v.FunctionCallVellumValueRequest != nil {
		return visitor.VisitFunctionCallVellumValueRequest(v.FunctionCallVellumValueRequest)
	}
	if v.ErrorVellumValueRequest != nil {
		return visitor.VisitErrorVellumValueRequest(v.ErrorVellumValueRequest)
	}
	if v.ArrayVellumValueRequest != nil {
		return visitor.VisitArrayVellumValueRequest(v.ArrayVellumValueRequest)
	}
	if v.ChatHistoryVellumValueRequest != nil {
		return visitor.VisitChatHistoryVellumValueRequest(v.ChatHistoryVellumValueRequest)
	}
	if v.SearchResultsVellumValueRequest != nil {
		return visitor.VisitSearchResultsVellumValueRequest(v.SearchResultsVellumValueRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VellumVariable struct {
	Id         string                    `json:"id" url:"id"`
	Key        string                    `json:"key" url:"key"`
	Type       VellumVariableType        `json:"type" url:"type"`
	Required   *bool                     `json:"required,omitempty" url:"required,omitempty"`
	Default    *VellumValue              `json:"default,omitempty" url:"default,omitempty"`
	Extensions *VellumVariableExtensions `json:"extensions,omitempty" url:"extensions,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumVariable) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumVariable) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVariable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVariable(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVariable) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A set of fields with additional properties for use in Vellum Variables.
type VellumVariableExtensions struct {
	Color *string `json:"color,omitempty" url:"color,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumVariableExtensions) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumVariableExtensions) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVariableExtensions
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVariableExtensions(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVariableExtensions) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// - `STRING` - STRING
// - `NUMBER` - NUMBER
// - `JSON` - JSON
// - `CHAT_HISTORY` - CHAT_HISTORY
// - `SEARCH_RESULTS` - SEARCH_RESULTS
// - `ERROR` - ERROR
// - `ARRAY` - ARRAY
// - `FUNCTION_CALL` - FUNCTION_CALL
// - `IMAGE` - IMAGE
// - `AUDIO` - AUDIO
// - `NULL` - NULL
type VellumVariableType string

const (
	VellumVariableTypeString        VellumVariableType = "STRING"
	VellumVariableTypeNumber        VellumVariableType = "NUMBER"
	VellumVariableTypeJson          VellumVariableType = "JSON"
	VellumVariableTypeChatHistory   VellumVariableType = "CHAT_HISTORY"
	VellumVariableTypeSearchResults VellumVariableType = "SEARCH_RESULTS"
	VellumVariableTypeError         VellumVariableType = "ERROR"
	VellumVariableTypeArray         VellumVariableType = "ARRAY"
	VellumVariableTypeFunctionCall  VellumVariableType = "FUNCTION_CALL"
	VellumVariableTypeImage         VellumVariableType = "IMAGE"
	VellumVariableTypeAudio         VellumVariableType = "AUDIO"
	VellumVariableTypeNull          VellumVariableType = "NULL"
)

func NewVellumVariableTypeFromString(s string) (VellumVariableType, error) {
	switch s {
	case "STRING":
		return VellumVariableTypeString, nil
	case "NUMBER":
		return VellumVariableTypeNumber, nil
	case "JSON":
		return VellumVariableTypeJson, nil
	case "CHAT_HISTORY":
		return VellumVariableTypeChatHistory, nil
	case "SEARCH_RESULTS":
		return VellumVariableTypeSearchResults, nil
	case "ERROR":
		return VellumVariableTypeError, nil
	case "ARRAY":
		return VellumVariableTypeArray, nil
	case "FUNCTION_CALL":
		return VellumVariableTypeFunctionCall, nil
	case "IMAGE":
		return VellumVariableTypeImage, nil
	case "AUDIO":
		return VellumVariableTypeAudio, nil
	case "NULL":
		return VellumVariableTypeNull, nil
	}
	var t VellumVariableType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumVariableType) Ptr() *VellumVariableType {
	return &v
}

type WorkflowDeploymentRead struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this workflow deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The ID of the history item associated with this Workflow Deployment's LATEST Release Tag
	LastDeployedHistoryItemId string `json:"last_deployed_history_item_id" url:"last_deployed_history_item_id"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// The output variables this Workflow Deployment produces values for when it's executed.
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`
	// A human-readable description of the workflow deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentRead) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentRead(unmarshaler.embed)
	w.Created = unmarshaler.Created.Time()
	w.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentRead) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*w),
		Created:        core.NewDateTime(w.Created),
		LastDeployedOn: core.NewDateTime(w.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowEventError struct {
	Message string                          `json:"message" url:"message"`
	Code    WorkflowExecutionEventErrorCode `json:"code" url:"code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowEventError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowEventError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowEventError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowEventError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowEventError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualChatHistoryRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue []*ChatMessageRequest `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`
	outputType         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualChatHistoryRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualChatHistoryRequest) OutputType() string {
	return w.outputType
}

func (w *WorkflowExecutionActualChatHistoryRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionActualChatHistoryRequest
	var unmarshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionActualChatHistoryRequest(unmarshaler.embed)
	if unmarshaler.OutputType != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.OutputType)
	}
	w.outputType = unmarshaler.OutputType

	extraProperties, err := core.ExtractExtraProperties(data, *w, "output_type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualChatHistoryRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionActualChatHistoryRequest
	var marshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed:      embed(*w),
		OutputType: "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionActualChatHistoryRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualJsonRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue map[string]interface{} `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`
	outputType         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualJsonRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualJsonRequest) OutputType() string {
	return w.outputType
}

func (w *WorkflowExecutionActualJsonRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionActualJsonRequest
	var unmarshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionActualJsonRequest(unmarshaler.embed)
	if unmarshaler.OutputType != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.OutputType)
	}
	w.outputType = unmarshaler.OutputType

	extraProperties, err := core.ExtractExtraProperties(data, *w, "output_type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualJsonRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionActualJsonRequest
	var marshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed:      embed(*w),
		OutputType: "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionActualJsonRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualStringRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue *string `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`
	outputType         string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualStringRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualStringRequest) OutputType() string {
	return w.outputType
}

func (w *WorkflowExecutionActualStringRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionActualStringRequest
	var unmarshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionActualStringRequest(unmarshaler.embed)
	if unmarshaler.OutputType != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.OutputType)
	}
	w.outputType = unmarshaler.OutputType

	extraProperties, err := core.ExtractExtraProperties(data, *w, "output_type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualStringRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionActualStringRequest
	var marshaler = struct {
		embed
		OutputType string `json:"output_type"`
	}{
		embed:      embed(*w),
		OutputType: "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionActualStringRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// - `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION
// - `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED
// - `NODE_EXECUTION_COUNT_LIMIT_REACHED` - NODE_EXECUTION_COUNT_LIMIT_REACHED
// - `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// - `NODE_EXECUTION` - NODE_EXECUTION
// - `LLM_PROVIDER` - LLM_PROVIDER
// - `INVALID_TEMPLATE` - INVALID_TEMPLATE
// - `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
type WorkflowExecutionEventErrorCode string

const (
	WorkflowExecutionEventErrorCodeWorkflowInitialization         WorkflowExecutionEventErrorCode = "WORKFLOW_INITIALIZATION"
	WorkflowExecutionEventErrorCodeWorkflowCancelled              WorkflowExecutionEventErrorCode = "WORKFLOW_CANCELLED"
	WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached WorkflowExecutionEventErrorCode = "NODE_EXECUTION_COUNT_LIMIT_REACHED"
	WorkflowExecutionEventErrorCodeInternalServerError            WorkflowExecutionEventErrorCode = "INTERNAL_SERVER_ERROR"
	WorkflowExecutionEventErrorCodeNodeExecution                  WorkflowExecutionEventErrorCode = "NODE_EXECUTION"
	WorkflowExecutionEventErrorCodeLlmProvider                    WorkflowExecutionEventErrorCode = "LLM_PROVIDER"
	WorkflowExecutionEventErrorCodeInvalidTemplate                WorkflowExecutionEventErrorCode = "INVALID_TEMPLATE"
	WorkflowExecutionEventErrorCodeUserDefinedError               WorkflowExecutionEventErrorCode = "USER_DEFINED_ERROR"
)

func NewWorkflowExecutionEventErrorCodeFromString(s string) (WorkflowExecutionEventErrorCode, error) {
	switch s {
	case "WORKFLOW_INITIALIZATION":
		return WorkflowExecutionEventErrorCodeWorkflowInitialization, nil
	case "WORKFLOW_CANCELLED":
		return WorkflowExecutionEventErrorCodeWorkflowCancelled, nil
	case "NODE_EXECUTION_COUNT_LIMIT_REACHED":
		return WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached, nil
	case "INTERNAL_SERVER_ERROR":
		return WorkflowExecutionEventErrorCodeInternalServerError, nil
	case "NODE_EXECUTION":
		return WorkflowExecutionEventErrorCodeNodeExecution, nil
	case "LLM_PROVIDER":
		return WorkflowExecutionEventErrorCodeLlmProvider, nil
	case "INVALID_TEMPLATE":
		return WorkflowExecutionEventErrorCodeInvalidTemplate, nil
	case "USER_DEFINED_ERROR":
		return WorkflowExecutionEventErrorCodeUserDefinedError, nil
	}
	var t WorkflowExecutionEventErrorCode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventErrorCode) Ptr() *WorkflowExecutionEventErrorCode {
	return &w
}

// - `NODE` - NODE
// - `WORKFLOW` - WORKFLOW
type WorkflowExecutionEventType string

const (
	WorkflowExecutionEventTypeNode     WorkflowExecutionEventType = "NODE"
	WorkflowExecutionEventTypeWorkflow WorkflowExecutionEventType = "WORKFLOW"
)

func NewWorkflowExecutionEventTypeFromString(s string) (WorkflowExecutionEventType, error) {
	switch s {
	case "NODE":
		return WorkflowExecutionEventTypeNode, nil
	case "WORKFLOW":
		return WorkflowExecutionEventTypeWorkflow, nil
	}
	var t WorkflowExecutionEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventType) Ptr() *WorkflowExecutionEventType {
	return &w
}

// A NODE-level event emitted from the workflow's execution.
type WorkflowExecutionNodeResultEvent struct {
	ExecutionId string                   `json:"execution_id" url:"execution_id"`
	RunId       *string                  `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                  `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowNodeResultEvent `json:"data" url:"data"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionNodeResultEvent) Type() string {
	return w.type_
}

func (w *WorkflowExecutionNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionNodeResultEvent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionNodeResultEvent(unmarshaler.embed)
	if unmarshaler.Type != "NODE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NODE", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionNodeResultEvent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NODE",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionNodeResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A WORKFLOW-level event emitted from the workflow's execution.
type WorkflowExecutionWorkflowResultEvent struct {
	ExecutionId string               `json:"execution_id" url:"execution_id"`
	RunId       *string              `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string              `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowResultEvent `json:"data" url:"data"`
	type_       string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionWorkflowResultEvent) Type() string {
	return w.type_
}

func (w *WorkflowExecutionWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowExecutionWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowExecutionWorkflowResultEvent(unmarshaler.embed)
	if unmarshaler.Type != "WORKFLOW" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "WORKFLOW", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowExecutionWorkflowResultEvent
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "WORKFLOW",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowExecutionWorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExpandMetaRequest struct {
	// If enabled, the Prompt Node FULFILLED events will include model host usage tracking. This may increase latency for some model hosts.
	Usage *bool `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExpandMetaRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExpandMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExpandMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExpandMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExpandMetaRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowNodeResultData struct {
	PromptNodeResult        *PromptNodeResult
	SearchNodeResult        *SearchNodeResult
	TemplatingNodeResult    *TemplatingNodeResult
	CodeExecutionNodeResult *CodeExecutionNodeResult
	ConditionalNodeResult   *ConditionalNodeResult
	ApiNodeResult           *ApiNodeResult
	TerminalNodeResult      *TerminalNodeResult
	MergeNodeResult         *MergeNodeResult
	SubworkflowNodeResult   *SubworkflowNodeResult
	MetricNodeResult        *MetricNodeResult
	MapNodeResult           *MapNodeResult
}

func (w *WorkflowNodeResultData) UnmarshalJSON(data []byte) error {
	valuePromptNodeResult := new(PromptNodeResult)
	if err := json.Unmarshal(data, &valuePromptNodeResult); err == nil {
		w.PromptNodeResult = valuePromptNodeResult
		return nil
	}
	valueSearchNodeResult := new(SearchNodeResult)
	if err := json.Unmarshal(data, &valueSearchNodeResult); err == nil {
		w.SearchNodeResult = valueSearchNodeResult
		return nil
	}
	valueTemplatingNodeResult := new(TemplatingNodeResult)
	if err := json.Unmarshal(data, &valueTemplatingNodeResult); err == nil {
		w.TemplatingNodeResult = valueTemplatingNodeResult
		return nil
	}
	valueCodeExecutionNodeResult := new(CodeExecutionNodeResult)
	if err := json.Unmarshal(data, &valueCodeExecutionNodeResult); err == nil {
		w.CodeExecutionNodeResult = valueCodeExecutionNodeResult
		return nil
	}
	valueConditionalNodeResult := new(ConditionalNodeResult)
	if err := json.Unmarshal(data, &valueConditionalNodeResult); err == nil {
		w.ConditionalNodeResult = valueConditionalNodeResult
		return nil
	}
	valueApiNodeResult := new(ApiNodeResult)
	if err := json.Unmarshal(data, &valueApiNodeResult); err == nil {
		w.ApiNodeResult = valueApiNodeResult
		return nil
	}
	valueTerminalNodeResult := new(TerminalNodeResult)
	if err := json.Unmarshal(data, &valueTerminalNodeResult); err == nil {
		w.TerminalNodeResult = valueTerminalNodeResult
		return nil
	}
	valueMergeNodeResult := new(MergeNodeResult)
	if err := json.Unmarshal(data, &valueMergeNodeResult); err == nil {
		w.MergeNodeResult = valueMergeNodeResult
		return nil
	}
	valueSubworkflowNodeResult := new(SubworkflowNodeResult)
	if err := json.Unmarshal(data, &valueSubworkflowNodeResult); err == nil {
		w.SubworkflowNodeResult = valueSubworkflowNodeResult
		return nil
	}
	valueMetricNodeResult := new(MetricNodeResult)
	if err := json.Unmarshal(data, &valueMetricNodeResult); err == nil {
		w.MetricNodeResult = valueMetricNodeResult
		return nil
	}
	valueMapNodeResult := new(MapNodeResult)
	if err := json.Unmarshal(data, &valueMapNodeResult); err == nil {
		w.MapNodeResult = valueMapNodeResult
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowNodeResultData) MarshalJSON() ([]byte, error) {
	if w.PromptNodeResult != nil {
		return json.Marshal(w.PromptNodeResult)
	}
	if w.SearchNodeResult != nil {
		return json.Marshal(w.SearchNodeResult)
	}
	if w.TemplatingNodeResult != nil {
		return json.Marshal(w.TemplatingNodeResult)
	}
	if w.CodeExecutionNodeResult != nil {
		return json.Marshal(w.CodeExecutionNodeResult)
	}
	if w.ConditionalNodeResult != nil {
		return json.Marshal(w.ConditionalNodeResult)
	}
	if w.ApiNodeResult != nil {
		return json.Marshal(w.ApiNodeResult)
	}
	if w.TerminalNodeResult != nil {
		return json.Marshal(w.TerminalNodeResult)
	}
	if w.MergeNodeResult != nil {
		return json.Marshal(w.MergeNodeResult)
	}
	if w.SubworkflowNodeResult != nil {
		return json.Marshal(w.SubworkflowNodeResult)
	}
	if w.MetricNodeResult != nil {
		return json.Marshal(w.MetricNodeResult)
	}
	if w.MapNodeResult != nil {
		return json.Marshal(w.MapNodeResult)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodeResultDataVisitor interface {
	VisitPromptNodeResult(*PromptNodeResult) error
	VisitSearchNodeResult(*SearchNodeResult) error
	VisitTemplatingNodeResult(*TemplatingNodeResult) error
	VisitCodeExecutionNodeResult(*CodeExecutionNodeResult) error
	VisitConditionalNodeResult(*ConditionalNodeResult) error
	VisitApiNodeResult(*ApiNodeResult) error
	VisitTerminalNodeResult(*TerminalNodeResult) error
	VisitMergeNodeResult(*MergeNodeResult) error
	VisitSubworkflowNodeResult(*SubworkflowNodeResult) error
	VisitMetricNodeResult(*MetricNodeResult) error
	VisitMapNodeResult(*MapNodeResult) error
}

func (w *WorkflowNodeResultData) Accept(visitor WorkflowNodeResultDataVisitor) error {
	if w.PromptNodeResult != nil {
		return visitor.VisitPromptNodeResult(w.PromptNodeResult)
	}
	if w.SearchNodeResult != nil {
		return visitor.VisitSearchNodeResult(w.SearchNodeResult)
	}
	if w.TemplatingNodeResult != nil {
		return visitor.VisitTemplatingNodeResult(w.TemplatingNodeResult)
	}
	if w.CodeExecutionNodeResult != nil {
		return visitor.VisitCodeExecutionNodeResult(w.CodeExecutionNodeResult)
	}
	if w.ConditionalNodeResult != nil {
		return visitor.VisitConditionalNodeResult(w.ConditionalNodeResult)
	}
	if w.ApiNodeResult != nil {
		return visitor.VisitApiNodeResult(w.ApiNodeResult)
	}
	if w.TerminalNodeResult != nil {
		return visitor.VisitTerminalNodeResult(w.TerminalNodeResult)
	}
	if w.MergeNodeResult != nil {
		return visitor.VisitMergeNodeResult(w.MergeNodeResult)
	}
	if w.SubworkflowNodeResult != nil {
		return visitor.VisitSubworkflowNodeResult(w.SubworkflowNodeResult)
	}
	if w.MetricNodeResult != nil {
		return visitor.VisitMetricNodeResult(w.MetricNodeResult)
	}
	if w.MapNodeResult != nil {
		return visitor.VisitMapNodeResult(w.MapNodeResult)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodeResultEvent struct {
	InitiatedWorkflowNodeResultEvent *InitiatedWorkflowNodeResultEvent
	StreamingWorkflowNodeResultEvent *StreamingWorkflowNodeResultEvent
	FulfilledWorkflowNodeResultEvent *FulfilledWorkflowNodeResultEvent
	RejectedWorkflowNodeResultEvent  *RejectedWorkflowNodeResultEvent
}

func (w *WorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	valueInitiatedWorkflowNodeResultEvent := new(InitiatedWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueInitiatedWorkflowNodeResultEvent); err == nil {
		w.InitiatedWorkflowNodeResultEvent = valueInitiatedWorkflowNodeResultEvent
		return nil
	}
	valueStreamingWorkflowNodeResultEvent := new(StreamingWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueStreamingWorkflowNodeResultEvent); err == nil {
		w.StreamingWorkflowNodeResultEvent = valueStreamingWorkflowNodeResultEvent
		return nil
	}
	valueFulfilledWorkflowNodeResultEvent := new(FulfilledWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueFulfilledWorkflowNodeResultEvent); err == nil {
		w.FulfilledWorkflowNodeResultEvent = valueFulfilledWorkflowNodeResultEvent
		return nil
	}
	valueRejectedWorkflowNodeResultEvent := new(RejectedWorkflowNodeResultEvent)
	if err := json.Unmarshal(data, &valueRejectedWorkflowNodeResultEvent); err == nil {
		w.RejectedWorkflowNodeResultEvent = valueRejectedWorkflowNodeResultEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	if w.InitiatedWorkflowNodeResultEvent != nil {
		return json.Marshal(w.InitiatedWorkflowNodeResultEvent)
	}
	if w.StreamingWorkflowNodeResultEvent != nil {
		return json.Marshal(w.StreamingWorkflowNodeResultEvent)
	}
	if w.FulfilledWorkflowNodeResultEvent != nil {
		return json.Marshal(w.FulfilledWorkflowNodeResultEvent)
	}
	if w.RejectedWorkflowNodeResultEvent != nil {
		return json.Marshal(w.RejectedWorkflowNodeResultEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowNodeResultEventVisitor interface {
	VisitInitiatedWorkflowNodeResultEvent(*InitiatedWorkflowNodeResultEvent) error
	VisitStreamingWorkflowNodeResultEvent(*StreamingWorkflowNodeResultEvent) error
	VisitFulfilledWorkflowNodeResultEvent(*FulfilledWorkflowNodeResultEvent) error
	VisitRejectedWorkflowNodeResultEvent(*RejectedWorkflowNodeResultEvent) error
}

func (w *WorkflowNodeResultEvent) Accept(visitor WorkflowNodeResultEventVisitor) error {
	if w.InitiatedWorkflowNodeResultEvent != nil {
		return visitor.VisitInitiatedWorkflowNodeResultEvent(w.InitiatedWorkflowNodeResultEvent)
	}
	if w.StreamingWorkflowNodeResultEvent != nil {
		return visitor.VisitStreamingWorkflowNodeResultEvent(w.StreamingWorkflowNodeResultEvent)
	}
	if w.FulfilledWorkflowNodeResultEvent != nil {
		return visitor.VisitFulfilledWorkflowNodeResultEvent(w.FulfilledWorkflowNodeResultEvent)
	}
	if w.RejectedWorkflowNodeResultEvent != nil {
		return visitor.VisitRejectedWorkflowNodeResultEvent(w.RejectedWorkflowNodeResultEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// - `INITIATED` - INITIATED
// - `STREAMING` - STREAMING
// - `FULFILLED` - FULFILLED
// - `REJECTED` - REJECTED
type WorkflowNodeResultEventState string

const (
	WorkflowNodeResultEventStateInitiated WorkflowNodeResultEventState = "INITIATED"
	WorkflowNodeResultEventStateStreaming WorkflowNodeResultEventState = "STREAMING"
	WorkflowNodeResultEventStateFulfilled WorkflowNodeResultEventState = "FULFILLED"
	WorkflowNodeResultEventStateRejected  WorkflowNodeResultEventState = "REJECTED"
)

func NewWorkflowNodeResultEventStateFromString(s string) (WorkflowNodeResultEventState, error) {
	switch s {
	case "INITIATED":
		return WorkflowNodeResultEventStateInitiated, nil
	case "STREAMING":
		return WorkflowNodeResultEventStateStreaming, nil
	case "FULFILLED":
		return WorkflowNodeResultEventStateFulfilled, nil
	case "REJECTED":
		return WorkflowNodeResultEventStateRejected, nil
	}
	var t WorkflowNodeResultEventState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowNodeResultEventState) Ptr() *WorkflowNodeResultEventState {
	return &w
}

type WorkflowOutput struct {
	WorkflowOutputString        *WorkflowOutputString
	WorkflowOutputNumber        *WorkflowOutputNumber
	WorkflowOutputJson          *WorkflowOutputJson
	WorkflowOutputChatHistory   *WorkflowOutputChatHistory
	WorkflowOutputSearchResults *WorkflowOutputSearchResults
	WorkflowOutputArray         *WorkflowOutputArray
	WorkflowOutputError         *WorkflowOutputError
	WorkflowOutputFunctionCall  *WorkflowOutputFunctionCall
	WorkflowOutputImage         *WorkflowOutputImage
}

func (w *WorkflowOutput) UnmarshalJSON(data []byte) error {
	valueWorkflowOutputString := new(WorkflowOutputString)
	if err := json.Unmarshal(data, &valueWorkflowOutputString); err == nil {
		w.WorkflowOutputString = valueWorkflowOutputString
		return nil
	}
	valueWorkflowOutputNumber := new(WorkflowOutputNumber)
	if err := json.Unmarshal(data, &valueWorkflowOutputNumber); err == nil {
		w.WorkflowOutputNumber = valueWorkflowOutputNumber
		return nil
	}
	valueWorkflowOutputJson := new(WorkflowOutputJson)
	if err := json.Unmarshal(data, &valueWorkflowOutputJson); err == nil {
		w.WorkflowOutputJson = valueWorkflowOutputJson
		return nil
	}
	valueWorkflowOutputChatHistory := new(WorkflowOutputChatHistory)
	if err := json.Unmarshal(data, &valueWorkflowOutputChatHistory); err == nil {
		w.WorkflowOutputChatHistory = valueWorkflowOutputChatHistory
		return nil
	}
	valueWorkflowOutputSearchResults := new(WorkflowOutputSearchResults)
	if err := json.Unmarshal(data, &valueWorkflowOutputSearchResults); err == nil {
		w.WorkflowOutputSearchResults = valueWorkflowOutputSearchResults
		return nil
	}
	valueWorkflowOutputArray := new(WorkflowOutputArray)
	if err := json.Unmarshal(data, &valueWorkflowOutputArray); err == nil {
		w.WorkflowOutputArray = valueWorkflowOutputArray
		return nil
	}
	valueWorkflowOutputError := new(WorkflowOutputError)
	if err := json.Unmarshal(data, &valueWorkflowOutputError); err == nil {
		w.WorkflowOutputError = valueWorkflowOutputError
		return nil
	}
	valueWorkflowOutputFunctionCall := new(WorkflowOutputFunctionCall)
	if err := json.Unmarshal(data, &valueWorkflowOutputFunctionCall); err == nil {
		w.WorkflowOutputFunctionCall = valueWorkflowOutputFunctionCall
		return nil
	}
	valueWorkflowOutputImage := new(WorkflowOutputImage)
	if err := json.Unmarshal(data, &valueWorkflowOutputImage); err == nil {
		w.WorkflowOutputImage = valueWorkflowOutputImage
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowOutput) MarshalJSON() ([]byte, error) {
	if w.WorkflowOutputString != nil {
		return json.Marshal(w.WorkflowOutputString)
	}
	if w.WorkflowOutputNumber != nil {
		return json.Marshal(w.WorkflowOutputNumber)
	}
	if w.WorkflowOutputJson != nil {
		return json.Marshal(w.WorkflowOutputJson)
	}
	if w.WorkflowOutputChatHistory != nil {
		return json.Marshal(w.WorkflowOutputChatHistory)
	}
	if w.WorkflowOutputSearchResults != nil {
		return json.Marshal(w.WorkflowOutputSearchResults)
	}
	if w.WorkflowOutputArray != nil {
		return json.Marshal(w.WorkflowOutputArray)
	}
	if w.WorkflowOutputError != nil {
		return json.Marshal(w.WorkflowOutputError)
	}
	if w.WorkflowOutputFunctionCall != nil {
		return json.Marshal(w.WorkflowOutputFunctionCall)
	}
	if w.WorkflowOutputImage != nil {
		return json.Marshal(w.WorkflowOutputImage)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowOutputVisitor interface {
	VisitWorkflowOutputString(*WorkflowOutputString) error
	VisitWorkflowOutputNumber(*WorkflowOutputNumber) error
	VisitWorkflowOutputJson(*WorkflowOutputJson) error
	VisitWorkflowOutputChatHistory(*WorkflowOutputChatHistory) error
	VisitWorkflowOutputSearchResults(*WorkflowOutputSearchResults) error
	VisitWorkflowOutputArray(*WorkflowOutputArray) error
	VisitWorkflowOutputError(*WorkflowOutputError) error
	VisitWorkflowOutputFunctionCall(*WorkflowOutputFunctionCall) error
	VisitWorkflowOutputImage(*WorkflowOutputImage) error
}

func (w *WorkflowOutput) Accept(visitor WorkflowOutputVisitor) error {
	if w.WorkflowOutputString != nil {
		return visitor.VisitWorkflowOutputString(w.WorkflowOutputString)
	}
	if w.WorkflowOutputNumber != nil {
		return visitor.VisitWorkflowOutputNumber(w.WorkflowOutputNumber)
	}
	if w.WorkflowOutputJson != nil {
		return visitor.VisitWorkflowOutputJson(w.WorkflowOutputJson)
	}
	if w.WorkflowOutputChatHistory != nil {
		return visitor.VisitWorkflowOutputChatHistory(w.WorkflowOutputChatHistory)
	}
	if w.WorkflowOutputSearchResults != nil {
		return visitor.VisitWorkflowOutputSearchResults(w.WorkflowOutputSearchResults)
	}
	if w.WorkflowOutputArray != nil {
		return visitor.VisitWorkflowOutputArray(w.WorkflowOutputArray)
	}
	if w.WorkflowOutputError != nil {
		return visitor.VisitWorkflowOutputError(w.WorkflowOutputError)
	}
	if w.WorkflowOutputFunctionCall != nil {
		return visitor.VisitWorkflowOutputFunctionCall(w.WorkflowOutputFunctionCall)
	}
	if w.WorkflowOutputImage != nil {
		return visitor.VisitWorkflowOutputImage(w.WorkflowOutputImage)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// An array output from a Workflow execution.
type WorkflowOutputArray struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string         `json:"name" url:"name"`
	Value []*VellumValue `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputArray) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputArray) Type() string {
	return w.type_
}

func (w *WorkflowOutputArray) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputArray
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputArray(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ARRAY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputArray) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputArray
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A chat history output from a Workflow execution.
type WorkflowOutputChatHistory struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputChatHistory) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputChatHistory) Type() string {
	return w.type_
}

func (w *WorkflowOutputChatHistory) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputChatHistory
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputChatHistory(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputChatHistory) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputChatHistory
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An error output from a Workflow execution.
type WorkflowOutputError struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputError) Type() string {
	return w.type_
}

func (w *WorkflowOutputError) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputError
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputError(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ERROR", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputError) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputError
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A function call output from a Workflow execution.
type WorkflowOutputFunctionCall struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputFunctionCall) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputFunctionCall) Type() string {
	return w.type_
}

func (w *WorkflowOutputFunctionCall) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputFunctionCall
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputFunctionCall(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "FUNCTION_CALL", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputFunctionCall) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputFunctionCall
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An image output from a Workflow execution.
type WorkflowOutputImage struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputImage) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputImage) Type() string {
	return w.type_
}

func (w *WorkflowOutputImage) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputImage
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputImage(unmarshaler.embed)
	if unmarshaler.Type != "IMAGE" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "IMAGE", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputImage) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputImage
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "IMAGE",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputImage) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output from a Workflow execution.
type WorkflowOutputJson struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputJson) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputJson) Type() string {
	return w.type_
}

func (w *WorkflowOutputJson) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputJson
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputJson(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputJson) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputJson
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output from a Workflow execution.
type WorkflowOutputNumber struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputNumber) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputNumber) Type() string {
	return w.type_
}

func (w *WorkflowOutputNumber) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputNumber
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputNumber(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NUMBER", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputNumber) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputNumber
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A search results output from a Workflow execution.
type WorkflowOutputSearchResults struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputSearchResults) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputSearchResults) Type() string {
	return w.type_
}

func (w *WorkflowOutputSearchResults) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputSearchResults
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputSearchResults(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "SEARCH_RESULTS", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputSearchResults) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputSearchResults
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output from a Workflow execution.
type WorkflowOutputString struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputString) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputString) Type() string {
	return w.type_
}

func (w *WorkflowOutputString) UnmarshalJSON(data []byte) error {
	type embed WorkflowOutputString
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowOutputString(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputString) MarshalJSON() ([]byte, error) {
	type embed WorkflowOutputString
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowOutputString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowPushDeploymentConfigRequest struct {
	Label       *string  `json:"label,omitempty" url:"label,omitempty"`
	Name        *string  `json:"name,omitempty" url:"name,omitempty"`
	Description *string  `json:"description,omitempty" url:"description,omitempty"`
	ReleaseTags []string `json:"release_tags,omitempty" url:"release_tags,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowPushDeploymentConfigRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowPushDeploymentConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowPushDeploymentConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowPushDeploymentConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowPushDeploymentConfigRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowPushExecConfig = map[string]interface{}

type WorkflowPushResponse struct {
	WorkflowSandboxId    string  `json:"workflow_sandbox_id" url:"workflow_sandbox_id"`
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"workflow_deployment_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowPushResponse) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowPushResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowPushResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowPushResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowPushResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowReleaseTagRead struct {
	// The name of the Release Tag
	Name string `json:"name" url:"name"`
	// The source of how the Release Tag was originally created
	//
	// - `SYSTEM` - System
	// - `USER` - User
	Source ReleaseTagSource `json:"source" url:"source"`
	// The Workflow Deployment History Item that this Release Tag is associated with
	HistoryItem *WorkflowReleaseTagWorkflowDeploymentHistoryItem `json:"history_item" url:"history_item"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowReleaseTagRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowReleaseTagRead) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowReleaseTagRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowReleaseTagRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowReleaseTagRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowReleaseTagWorkflowDeploymentHistoryItem struct {
	// The ID of the Workflow Deployment History Item
	Id string `json:"id" url:"id"`
	// The timestamp representing when this History Item was created
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) UnmarshalJSON(data []byte) error {
	type embed WorkflowReleaseTagWorkflowDeploymentHistoryItem
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowReleaseTagWorkflowDeploymentHistoryItem(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) MarshalJSON() ([]byte, error) {
	type embed WorkflowReleaseTagWorkflowDeploymentHistoryItem
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a chat history variable in a Workflow.
type WorkflowRequestChatHistoryInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestChatHistoryInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestChatHistoryInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestChatHistoryInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestChatHistoryInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestChatHistoryInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestChatHistoryInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestChatHistoryInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowRequestInputRequest struct {
	WorkflowRequestStringInputRequest      *WorkflowRequestStringInputRequest
	WorkflowRequestJsonInputRequest        *WorkflowRequestJsonInputRequest
	WorkflowRequestChatHistoryInputRequest *WorkflowRequestChatHistoryInputRequest
	WorkflowRequestNumberInputRequest      *WorkflowRequestNumberInputRequest
}

func (w *WorkflowRequestInputRequest) UnmarshalJSON(data []byte) error {
	valueWorkflowRequestStringInputRequest := new(WorkflowRequestStringInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestStringInputRequest); err == nil {
		w.WorkflowRequestStringInputRequest = valueWorkflowRequestStringInputRequest
		return nil
	}
	valueWorkflowRequestJsonInputRequest := new(WorkflowRequestJsonInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestJsonInputRequest); err == nil {
		w.WorkflowRequestJsonInputRequest = valueWorkflowRequestJsonInputRequest
		return nil
	}
	valueWorkflowRequestChatHistoryInputRequest := new(WorkflowRequestChatHistoryInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestChatHistoryInputRequest); err == nil {
		w.WorkflowRequestChatHistoryInputRequest = valueWorkflowRequestChatHistoryInputRequest
		return nil
	}
	valueWorkflowRequestNumberInputRequest := new(WorkflowRequestNumberInputRequest)
	if err := json.Unmarshal(data, &valueWorkflowRequestNumberInputRequest); err == nil {
		w.WorkflowRequestNumberInputRequest = valueWorkflowRequestNumberInputRequest
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowRequestInputRequest) MarshalJSON() ([]byte, error) {
	if w.WorkflowRequestStringInputRequest != nil {
		return json.Marshal(w.WorkflowRequestStringInputRequest)
	}
	if w.WorkflowRequestJsonInputRequest != nil {
		return json.Marshal(w.WorkflowRequestJsonInputRequest)
	}
	if w.WorkflowRequestChatHistoryInputRequest != nil {
		return json.Marshal(w.WorkflowRequestChatHistoryInputRequest)
	}
	if w.WorkflowRequestNumberInputRequest != nil {
		return json.Marshal(w.WorkflowRequestNumberInputRequest)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowRequestInputRequestVisitor interface {
	VisitWorkflowRequestStringInputRequest(*WorkflowRequestStringInputRequest) error
	VisitWorkflowRequestJsonInputRequest(*WorkflowRequestJsonInputRequest) error
	VisitWorkflowRequestChatHistoryInputRequest(*WorkflowRequestChatHistoryInputRequest) error
	VisitWorkflowRequestNumberInputRequest(*WorkflowRequestNumberInputRequest) error
}

func (w *WorkflowRequestInputRequest) Accept(visitor WorkflowRequestInputRequestVisitor) error {
	if w.WorkflowRequestStringInputRequest != nil {
		return visitor.VisitWorkflowRequestStringInputRequest(w.WorkflowRequestStringInputRequest)
	}
	if w.WorkflowRequestJsonInputRequest != nil {
		return visitor.VisitWorkflowRequestJsonInputRequest(w.WorkflowRequestJsonInputRequest)
	}
	if w.WorkflowRequestChatHistoryInputRequest != nil {
		return visitor.VisitWorkflowRequestChatHistoryInputRequest(w.WorkflowRequestChatHistoryInputRequest)
	}
	if w.WorkflowRequestNumberInputRequest != nil {
		return visitor.VisitWorkflowRequestNumberInputRequest(w.WorkflowRequestNumberInputRequest)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// The input for a JSON variable in a Workflow.
type WorkflowRequestJsonInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestJsonInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestJsonInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestJsonInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestJsonInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestJsonInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestJsonInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestJsonInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestJsonInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a number variable in a Workflow.
type WorkflowRequestNumberInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string  `json:"name" url:"name"`
	Value float64 `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestNumberInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestNumberInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestNumberInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestNumberInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestNumberInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NUMBER", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestNumberInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestNumberInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestNumberInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a string variable in a Workflow.
type WorkflowRequestStringInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestStringInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestStringInputRequest) Type() string {
	return w.type_
}

func (w *WorkflowRequestStringInputRequest) UnmarshalJSON(data []byte) error {
	type embed WorkflowRequestStringInputRequest
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowRequestStringInputRequest(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestStringInputRequest) MarshalJSON() ([]byte, error) {
	type embed WorkflowRequestStringInputRequest
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowRequestStringInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEvent struct {
	Id      string                         `json:"id" url:"id"`
	State   WorkflowNodeResultEventState   `json:"state" url:"state"`
	Ts      time.Time                      `json:"ts" url:"ts"`
	Output  *WorkflowResultEventOutputData `json:"output,omitempty" url:"output,omitempty"`
	Error   *WorkflowEventError            `json:"error,omitempty" url:"error,omitempty"`
	Outputs []*WorkflowOutput              `json:"outputs,omitempty" url:"outputs,omitempty"`
	Inputs  []*ExecutionVellumValue        `json:"inputs,omitempty" url:"inputs,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEvent(unmarshaler.embed)
	w.Ts = unmarshaler.Ts.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
		Ts:    core.NewDateTime(w.Ts),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputData struct {
	WorkflowResultEventOutputDataString        *WorkflowResultEventOutputDataString
	WorkflowResultEventOutputDataNumber        *WorkflowResultEventOutputDataNumber
	WorkflowResultEventOutputDataJson          *WorkflowResultEventOutputDataJson
	WorkflowResultEventOutputDataChatHistory   *WorkflowResultEventOutputDataChatHistory
	WorkflowResultEventOutputDataSearchResults *WorkflowResultEventOutputDataSearchResults
	WorkflowResultEventOutputDataArray         *WorkflowResultEventOutputDataArray
	WorkflowResultEventOutputDataFunctionCall  *WorkflowResultEventOutputDataFunctionCall
	WorkflowResultEventOutputDataError         *WorkflowResultEventOutputDataError
}

func (w *WorkflowResultEventOutputData) UnmarshalJSON(data []byte) error {
	valueWorkflowResultEventOutputDataString := new(WorkflowResultEventOutputDataString)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataString); err == nil {
		w.WorkflowResultEventOutputDataString = valueWorkflowResultEventOutputDataString
		return nil
	}
	valueWorkflowResultEventOutputDataNumber := new(WorkflowResultEventOutputDataNumber)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataNumber); err == nil {
		w.WorkflowResultEventOutputDataNumber = valueWorkflowResultEventOutputDataNumber
		return nil
	}
	valueWorkflowResultEventOutputDataJson := new(WorkflowResultEventOutputDataJson)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataJson); err == nil {
		w.WorkflowResultEventOutputDataJson = valueWorkflowResultEventOutputDataJson
		return nil
	}
	valueWorkflowResultEventOutputDataChatHistory := new(WorkflowResultEventOutputDataChatHistory)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataChatHistory); err == nil {
		w.WorkflowResultEventOutputDataChatHistory = valueWorkflowResultEventOutputDataChatHistory
		return nil
	}
	valueWorkflowResultEventOutputDataSearchResults := new(WorkflowResultEventOutputDataSearchResults)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataSearchResults); err == nil {
		w.WorkflowResultEventOutputDataSearchResults = valueWorkflowResultEventOutputDataSearchResults
		return nil
	}
	valueWorkflowResultEventOutputDataArray := new(WorkflowResultEventOutputDataArray)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataArray); err == nil {
		w.WorkflowResultEventOutputDataArray = valueWorkflowResultEventOutputDataArray
		return nil
	}
	valueWorkflowResultEventOutputDataFunctionCall := new(WorkflowResultEventOutputDataFunctionCall)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataFunctionCall); err == nil {
		w.WorkflowResultEventOutputDataFunctionCall = valueWorkflowResultEventOutputDataFunctionCall
		return nil
	}
	valueWorkflowResultEventOutputDataError := new(WorkflowResultEventOutputDataError)
	if err := json.Unmarshal(data, &valueWorkflowResultEventOutputDataError); err == nil {
		w.WorkflowResultEventOutputDataError = valueWorkflowResultEventOutputDataError
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowResultEventOutputData) MarshalJSON() ([]byte, error) {
	if w.WorkflowResultEventOutputDataString != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataString)
	}
	if w.WorkflowResultEventOutputDataNumber != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataNumber)
	}
	if w.WorkflowResultEventOutputDataJson != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataJson)
	}
	if w.WorkflowResultEventOutputDataChatHistory != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataChatHistory)
	}
	if w.WorkflowResultEventOutputDataSearchResults != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataSearchResults)
	}
	if w.WorkflowResultEventOutputDataArray != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataArray)
	}
	if w.WorkflowResultEventOutputDataFunctionCall != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataFunctionCall)
	}
	if w.WorkflowResultEventOutputDataError != nil {
		return json.Marshal(w.WorkflowResultEventOutputDataError)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowResultEventOutputDataVisitor interface {
	VisitWorkflowResultEventOutputDataString(*WorkflowResultEventOutputDataString) error
	VisitWorkflowResultEventOutputDataNumber(*WorkflowResultEventOutputDataNumber) error
	VisitWorkflowResultEventOutputDataJson(*WorkflowResultEventOutputDataJson) error
	VisitWorkflowResultEventOutputDataChatHistory(*WorkflowResultEventOutputDataChatHistory) error
	VisitWorkflowResultEventOutputDataSearchResults(*WorkflowResultEventOutputDataSearchResults) error
	VisitWorkflowResultEventOutputDataArray(*WorkflowResultEventOutputDataArray) error
	VisitWorkflowResultEventOutputDataFunctionCall(*WorkflowResultEventOutputDataFunctionCall) error
	VisitWorkflowResultEventOutputDataError(*WorkflowResultEventOutputDataError) error
}

func (w *WorkflowResultEventOutputData) Accept(visitor WorkflowResultEventOutputDataVisitor) error {
	if w.WorkflowResultEventOutputDataString != nil {
		return visitor.VisitWorkflowResultEventOutputDataString(w.WorkflowResultEventOutputDataString)
	}
	if w.WorkflowResultEventOutputDataNumber != nil {
		return visitor.VisitWorkflowResultEventOutputDataNumber(w.WorkflowResultEventOutputDataNumber)
	}
	if w.WorkflowResultEventOutputDataJson != nil {
		return visitor.VisitWorkflowResultEventOutputDataJson(w.WorkflowResultEventOutputDataJson)
	}
	if w.WorkflowResultEventOutputDataChatHistory != nil {
		return visitor.VisitWorkflowResultEventOutputDataChatHistory(w.WorkflowResultEventOutputDataChatHistory)
	}
	if w.WorkflowResultEventOutputDataSearchResults != nil {
		return visitor.VisitWorkflowResultEventOutputDataSearchResults(w.WorkflowResultEventOutputDataSearchResults)
	}
	if w.WorkflowResultEventOutputDataArray != nil {
		return visitor.VisitWorkflowResultEventOutputDataArray(w.WorkflowResultEventOutputDataArray)
	}
	if w.WorkflowResultEventOutputDataFunctionCall != nil {
		return visitor.VisitWorkflowResultEventOutputDataFunctionCall(w.WorkflowResultEventOutputDataFunctionCall)
	}
	if w.WorkflowResultEventOutputDataError != nil {
		return visitor.VisitWorkflowResultEventOutputDataError(w.WorkflowResultEventOutputDataError)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

// An Array output returned from a Workflow execution.
type WorkflowResultEventOutputDataArray struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string                   `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataArray) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataArray) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataArray) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataArray
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataArray(unmarshaler.embed)
	if unmarshaler.Type != "ARRAY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ARRAY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataArray) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataArray
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ARRAY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Chat History output streamed from a Workflow execution.
type WorkflowResultEventOutputDataChatHistory struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string        `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataChatHistory) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataChatHistory) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataChatHistory) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataChatHistory
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataChatHistory(unmarshaler.embed)
	if unmarshaler.Type != "CHAT_HISTORY" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "CHAT_HISTORY", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataChatHistory) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataChatHistory
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "CHAT_HISTORY",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An Error output streamed from a Workflow execution.
type WorkflowResultEventOutputDataError struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string      `json:"delta,omitempty" url:"delta,omitempty"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataError) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataError) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataError
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataError(unmarshaler.embed)
	if unmarshaler.Type != "ERROR" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "ERROR", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataError) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataError
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "ERROR",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Function Call output returned from a Workflow execution.
type WorkflowResultEventOutputDataFunctionCall struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string       `json:"delta,omitempty" url:"delta,omitempty"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataFunctionCall) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataFunctionCall) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataFunctionCall) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataFunctionCall
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataFunctionCall(unmarshaler.embed)
	if unmarshaler.Type != "FUNCTION_CALL" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "FUNCTION_CALL", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataFunctionCall) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataFunctionCall
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "FUNCTION_CALL",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output streamed from a Workflow execution.
type WorkflowResultEventOutputDataJson struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string     `json:"delta,omitempty" url:"delta,omitempty"`
	Value interface{} `json:"value" url:"value"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataJson) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataJson) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataJson) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataJson
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataJson(unmarshaler.embed)
	if unmarshaler.Type != "JSON" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "JSON", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataJson) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataJson
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "JSON",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output streamed from a Workflow execution.
type WorkflowResultEventOutputDataNumber struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string  `json:"delta,omitempty" url:"delta,omitempty"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataNumber) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataNumber) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataNumber) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataNumber
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataNumber(unmarshaler.embed)
	if unmarshaler.Type != "NUMBER" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "NUMBER", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataNumber) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataNumber
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "NUMBER",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Search Results output streamed from a Workflow execution.
type WorkflowResultEventOutputDataSearchResults struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string         `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataSearchResults) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataSearchResults) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataSearchResults) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataSearchResults
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataSearchResults(unmarshaler.embed)
	if unmarshaler.Type != "SEARCH_RESULTS" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "SEARCH_RESULTS", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataSearchResults) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataSearchResults
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "SEARCH_RESULTS",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output streamed from a Workflow execution.
type WorkflowResultEventOutputDataString struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING.
	Delta *string `json:"delta,omitempty" url:"delta,omitempty"`
	// The entire string value. Will be non-null for events of state FULFILLED.
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	type_ string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataString) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataString) Type() string {
	return w.type_
}

func (w *WorkflowResultEventOutputDataString) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEventOutputDataString
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataString(unmarshaler.embed)
	if unmarshaler.Type != "STRING" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "STRING", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataString) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEventOutputDataString
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "STRING",
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEventOutputDataString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowStreamEvent struct {
	WorkflowExecutionWorkflowResultEvent *WorkflowExecutionWorkflowResultEvent
	WorkflowExecutionNodeResultEvent     *WorkflowExecutionNodeResultEvent
}

func (w *WorkflowStreamEvent) UnmarshalJSON(data []byte) error {
	valueWorkflowExecutionWorkflowResultEvent := new(WorkflowExecutionWorkflowResultEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionWorkflowResultEvent); err == nil {
		w.WorkflowExecutionWorkflowResultEvent = valueWorkflowExecutionWorkflowResultEvent
		return nil
	}
	valueWorkflowExecutionNodeResultEvent := new(WorkflowExecutionNodeResultEvent)
	if err := json.Unmarshal(data, &valueWorkflowExecutionNodeResultEvent); err == nil {
		w.WorkflowExecutionNodeResultEvent = valueWorkflowExecutionNodeResultEvent
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, w)
}

func (w WorkflowStreamEvent) MarshalJSON() ([]byte, error) {
	if w.WorkflowExecutionWorkflowResultEvent != nil {
		return json.Marshal(w.WorkflowExecutionWorkflowResultEvent)
	}
	if w.WorkflowExecutionNodeResultEvent != nil {
		return json.Marshal(w.WorkflowExecutionNodeResultEvent)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkflowStreamEventVisitor interface {
	VisitWorkflowExecutionWorkflowResultEvent(*WorkflowExecutionWorkflowResultEvent) error
	VisitWorkflowExecutionNodeResultEvent(*WorkflowExecutionNodeResultEvent) error
}

func (w *WorkflowStreamEvent) Accept(visitor WorkflowStreamEventVisitor) error {
	if w.WorkflowExecutionWorkflowResultEvent != nil {
		return visitor.VisitWorkflowExecutionWorkflowResultEvent(w.WorkflowExecutionWorkflowResultEvent)
	}
	if w.WorkflowExecutionNodeResultEvent != nil {
		return visitor.VisitWorkflowExecutionNodeResultEvent(w.WorkflowExecutionNodeResultEvent)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", w)
}

type WorkspaceSecretRead struct {
	Id         string         `json:"id" url:"id"`
	Modified   time.Time      `json:"modified" url:"modified"`
	Name       string         `json:"name" url:"name"`
	Label      string         `json:"label" url:"label"`
	SecretType SecretTypeEnum `json:"secret_type" url:"secret_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkspaceSecretRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkspaceSecretRead) UnmarshalJSON(data []byte) error {
	type embed WorkspaceSecretRead
	var unmarshaler = struct {
		embed
		Modified *core.DateTime `json:"modified"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkspaceSecretRead(unmarshaler.embed)
	w.Modified = unmarshaler.Modified.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkspaceSecretRead) MarshalJSON() ([]byte, error) {
	type embed WorkspaceSecretRead
	var marshaler = struct {
		embed
		Modified *core.DateTime `json:"modified"`
	}{
		embed:    embed(*w),
		Modified: core.NewDateTime(w.Modified),
	}
	return json.Marshal(marshaler)
}

func (w *WorkspaceSecretRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
