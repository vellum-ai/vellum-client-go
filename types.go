// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
	time "time"
)

type ExecutePromptRequest struct {
	// A list consisting of the Prompt Deployment's input variables and their values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"-"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"-"`
	// The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.
	ExpandMeta *PromptDeploymentExpandMetaRequestRequest `json:"expand_meta,omitempty" url:"-"`
	// Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.
	RawOverrides *RawPromptExecutionOverridesRequest `json:"raw_overrides,omitempty" url:"-"`
	// A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.
	ExpandRaw []string `json:"expand_raw,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type ExecutePromptStreamRequest struct {
	// A list consisting of the Prompt Deployment's input variables and their values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"-"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"-"`
	// The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.
	ExpandMeta *PromptDeploymentExpandMetaRequestRequest `json:"expand_meta,omitempty" url:"-"`
	// Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.
	RawOverrides *RawPromptExecutionOverridesRequest `json:"raw_overrides,omitempty" url:"-"`
	// A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.
	ExpandRaw []string `json:"expand_raw,omitempty" url:"-"`
	// Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type ExecuteWorkflowRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.
	ExpandMeta *WorkflowExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"-"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
}

type ExecuteWorkflowStreamRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"-"`
	// An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.
	ExpandMeta *WorkflowExpandMetaRequest `json:"expand_meta,omitempty" url:"-"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"-"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"-"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"-"`
	// Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
	// Optionally specify which events you want to receive. Defaults to only WORKFLOW events. Note that the schema of non-WORKFLOW events is unstable and should be used with caution.
	EventTypes []WorkflowExecutionEventType `json:"event_types,omitempty" url:"-"`
}

type GenerateBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"-"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"-"`
}

type GenerateStreamBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"-"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"-"`
}

type SearchRequestBodyRequest struct {
	// The ID of the index to search against. Must provide either this or index_name.
	IndexId *string `json:"index_id,omitempty" url:"-"`
	// The name of the index to search against. Must provide either this or index_id.
	IndexName *string `json:"index_name,omitempty" url:"-"`
	// The query to search for.
	Query string `json:"query" url:"-"`
	// Configuration options for the search.
	Options *SearchRequestOptionsRequest `json:"options,omitempty" url:"-"`
}

type SubmitCompletionActualsRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"-"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"-"`
	// Feedback regarding the quality of previously generated completions
	Actuals []*SubmitCompletionActualRequest `json:"actuals,omitempty" url:"-"`
}

type SubmitWorkflowExecutionActualsRequest struct {
	// Feedback regarding the quality of an output on a previously executed workflow.
	Actuals []*SubmitWorkflowExecutionActualRequest `json:"actuals,omitempty" url:"-"`
	// The Vellum-generated ID of a previously executed workflow. Must provide either this or external_id.
	ExecutionId *string `json:"execution_id,omitempty" url:"-"`
	// The external ID that was originally provided by when executing the workflow, if applicable, that you'd now like to submit actuals for. Must provide either this or execution_id.
	ExternalId *string `json:"external_id,omitempty" url:"-"`
}

// - `True` - True
type AddOpenaiApiKeyEnum = bool

// A Node Result Event emitted from an API Node.
type ApiNodeResult struct {
	Data *ApiNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiNodeResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiNodeResultData struct {
	TextOutputId       string                 `json:"text_output_id" url:"text_output_id"`
	Text               *string                `json:"text,omitempty" url:"text,omitempty"`
	JsonOutputId       string                 `json:"json_output_id" url:"json_output_id"`
	Json               map[string]interface{} `json:"json,omitempty" url:"json,omitempty"`
	StatusCodeOutputId string                 `json:"status_code_output_id" url:"status_code_output_id"`
	StatusCode         int                    `json:"status_code" url:"status_code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiNodeResultData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResultData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A list of chat message content items.
type ArrayChatMessageContent struct {
	Value []*ArrayChatMessageContentItem `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayChatMessageContent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ArrayChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ArrayChatMessageContent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayChatMessageContentItem struct {
	Type         string
	String       *StringChatMessageContent
	FunctionCall *FunctionCallChatMessageContent
	Image        *ImageChatMessageContent
}

func (a *ArrayChatMessageContentItem) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "IMAGE":
		value := new(ImageChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	}
	return nil
}

func (a ArrayChatMessageContentItem) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		return core.MarshalJSONWithExtraProperty(a.String, "type", "STRING")
	}
	if a.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(a.FunctionCall, "type", "FUNCTION_CALL")
	}
	if a.Image != nil {
		return core.MarshalJSONWithExtraProperty(a.Image, "type", "IMAGE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayChatMessageContentItemVisitor interface {
	VisitString(*StringChatMessageContent) error
	VisitFunctionCall(*FunctionCallChatMessageContent) error
	VisitImage(*ImageChatMessageContent) error
}

func (a *ArrayChatMessageContentItem) Accept(visitor ArrayChatMessageContentItemVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayChatMessageContentItemRequest struct {
	Type         string
	String       *StringChatMessageContentRequest
	FunctionCall *FunctionCallChatMessageContentRequest
	Image        *ImageChatMessageContentRequest
}

func (a *ArrayChatMessageContentItemRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "IMAGE":
		value := new(ImageChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	}
	return nil
}

func (a ArrayChatMessageContentItemRequest) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		return core.MarshalJSONWithExtraProperty(a.String, "type", "STRING")
	}
	if a.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(a.FunctionCall, "type", "FUNCTION_CALL")
	}
	if a.Image != nil {
		return core.MarshalJSONWithExtraProperty(a.Image, "type", "IMAGE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayChatMessageContentItemRequestVisitor interface {
	VisitString(*StringChatMessageContentRequest) error
	VisitFunctionCall(*FunctionCallChatMessageContentRequest) error
	VisitImage(*ImageChatMessageContentRequest) error
}

func (a *ArrayChatMessageContentItemRequest) Accept(visitor ArrayChatMessageContentItemRequestVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

// A list of chat message content items.
type ArrayChatMessageContentRequest struct {
	Value []*ArrayChatMessageContentItemRequest `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ArrayChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ArrayChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ArrayChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ArrayChatMessageContentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayVariableValueItem struct {
	Type         string
	String       *StringVariableValue
	Number       *NumberVariableValue
	Json         *JsonVariableValue
	Error        *ErrorVariableValue
	FunctionCall *FunctionCallVariableValue
	Image        *ImageVariableValue
}

func (a *ArrayVariableValueItem) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "NUMBER":
		value := new(NumberVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Number = value
	case "JSON":
		value := new(JsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Json = value
	case "ERROR":
		value := new(ErrorVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Error = value
	case "FUNCTION_CALL":
		value := new(FunctionCallVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "IMAGE":
		value := new(ImageVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	}
	return nil
}

func (a ArrayVariableValueItem) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		return core.MarshalJSONWithExtraProperty(a.String, "type", "STRING")
	}
	if a.Number != nil {
		return core.MarshalJSONWithExtraProperty(a.Number, "type", "NUMBER")
	}
	if a.Json != nil {
		return core.MarshalJSONWithExtraProperty(a.Json, "type", "JSON")
	}
	if a.Error != nil {
		return core.MarshalJSONWithExtraProperty(a.Error, "type", "ERROR")
	}
	if a.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(a.FunctionCall, "type", "FUNCTION_CALL")
	}
	if a.Image != nil {
		return core.MarshalJSONWithExtraProperty(a.Image, "type", "IMAGE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayVariableValueItemVisitor interface {
	VisitString(*StringVariableValue) error
	VisitNumber(*NumberVariableValue) error
	VisitJson(*JsonVariableValue) error
	VisitError(*ErrorVariableValue) error
	VisitFunctionCall(*FunctionCallVariableValue) error
	VisitImage(*ImageVariableValue) error
}

func (a *ArrayVariableValueItem) Accept(visitor ArrayVariableValueItemVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.Number != nil {
		return visitor.VisitNumber(a.Number)
	}
	if a.Json != nil {
		return visitor.VisitJson(a.Json)
	}
	if a.Error != nil {
		return visitor.VisitError(a.Error)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayVellumValueItem struct {
	Type         string
	String       *StringVellumValue
	Number       *NumberVellumValue
	Json         *JsonVellumValue
	Image        *ImageVellumValue
	FunctionCall *FunctionCallVellumValue
	Error        *ErrorVellumValue
}

func (a *ArrayVellumValueItem) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "NUMBER":
		value := new(NumberVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Number = value
	case "JSON":
		value := new(JsonVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Json = value
	case "IMAGE":
		value := new(ImageVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	case "FUNCTION_CALL":
		value := new(FunctionCallVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "ERROR":
		value := new(ErrorVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Error = value
	}
	return nil
}

func (a ArrayVellumValueItem) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		return core.MarshalJSONWithExtraProperty(a.String, "type", "STRING")
	}
	if a.Number != nil {
		return core.MarshalJSONWithExtraProperty(a.Number, "type", "NUMBER")
	}
	if a.Json != nil {
		return core.MarshalJSONWithExtraProperty(a.Json, "type", "JSON")
	}
	if a.Image != nil {
		return core.MarshalJSONWithExtraProperty(a.Image, "type", "IMAGE")
	}
	if a.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(a.FunctionCall, "type", "FUNCTION_CALL")
	}
	if a.Error != nil {
		return core.MarshalJSONWithExtraProperty(a.Error, "type", "ERROR")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayVellumValueItemVisitor interface {
	VisitString(*StringVellumValue) error
	VisitNumber(*NumberVellumValue) error
	VisitJson(*JsonVellumValue) error
	VisitImage(*ImageVellumValue) error
	VisitFunctionCall(*FunctionCallVellumValue) error
	VisitError(*ErrorVellumValue) error
}

func (a *ArrayVellumValueItem) Accept(visitor ArrayVellumValueItemVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.Number != nil {
		return visitor.VisitNumber(a.Number)
	}
	if a.Json != nil {
		return visitor.VisitJson(a.Json)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Error != nil {
		return visitor.VisitError(a.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayVellumValueItemRequest struct {
	Type         string
	String       *StringVellumValueRequest
	Number       *NumberVellumValueRequest
	Json         *JsonVellumValueRequest
	Image        *ImageVellumValueRequest
	FunctionCall *FunctionCallVellumValueRequest
	Error        *ErrorVellumValueRequest
}

func (a *ArrayVellumValueItemRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringVellumValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "NUMBER":
		value := new(NumberVellumValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Number = value
	case "JSON":
		value := new(JsonVellumValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Json = value
	case "IMAGE":
		value := new(ImageVellumValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	case "FUNCTION_CALL":
		value := new(FunctionCallVellumValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "ERROR":
		value := new(ErrorVellumValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Error = value
	}
	return nil
}

func (a ArrayVellumValueItemRequest) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		return core.MarshalJSONWithExtraProperty(a.String, "type", "STRING")
	}
	if a.Number != nil {
		return core.MarshalJSONWithExtraProperty(a.Number, "type", "NUMBER")
	}
	if a.Json != nil {
		return core.MarshalJSONWithExtraProperty(a.Json, "type", "JSON")
	}
	if a.Image != nil {
		return core.MarshalJSONWithExtraProperty(a.Image, "type", "IMAGE")
	}
	if a.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(a.FunctionCall, "type", "FUNCTION_CALL")
	}
	if a.Error != nil {
		return core.MarshalJSONWithExtraProperty(a.Error, "type", "ERROR")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayVellumValueItemRequestVisitor interface {
	VisitString(*StringVellumValueRequest) error
	VisitNumber(*NumberVellumValueRequest) error
	VisitJson(*JsonVellumValueRequest) error
	VisitImage(*ImageVellumValueRequest) error
	VisitFunctionCall(*FunctionCallVellumValueRequest) error
	VisitError(*ErrorVellumValueRequest) error
}

func (a *ArrayVellumValueItemRequest) Accept(visitor ArrayVellumValueItemRequestVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.Number != nil {
		return visitor.VisitNumber(a.Number)
	}
	if a.Json != nil {
		return visitor.VisitJson(a.Json)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Error != nil {
		return visitor.VisitError(a.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

// Basic vectorizer for intfloat/multilingual-e5-large.
type BasicVectorizerIntfloatMultilingualE5Large struct {
	Config map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicVectorizerIntfloatMultilingualE5Large
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicVectorizerIntfloatMultilingualE5Large(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerIntfloatMultilingualE5Large) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for intfloat/multilingual-e5-large.
type BasicVectorizerIntfloatMultilingualE5LargeRequest struct {
	Config map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicVectorizerIntfloatMultilingualE5LargeRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicVectorizerIntfloatMultilingualE5LargeRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerIntfloatMultilingualE5LargeRequest) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1 struct {
	Config map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request struct {
	Config map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1 struct {
	Config map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.
type BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request struct {
	Config map[string]interface{} `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// A user input representing a list of chat messages
type ChatHistoryInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatHistoryInputRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatHistoryInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatHistoryInputRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryInputRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessage struct {
	Text    *string             `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole     `json:"role" url:"role"`
	Content *ChatMessageContent `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessage) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessage) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessageContent struct {
	Type         string
	String       *StringChatMessageContent
	FunctionCall *FunctionCallChatMessageContent
	Array        *ArrayChatMessageContent
	Image        *ImageChatMessageContent
}

func (c *ChatMessageContent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.FunctionCall = value
	case "ARRAY":
		value := new(ArrayChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Array = value
	case "IMAGE":
		value := new(ImageChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Image = value
	}
	return nil
}

func (c ChatMessageContent) MarshalJSON() ([]byte, error) {
	if c.String != nil {
		return core.MarshalJSONWithExtraProperty(c.String, "type", "STRING")
	}
	if c.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(c.FunctionCall, "type", "FUNCTION_CALL")
	}
	if c.Array != nil {
		return core.MarshalJSONWithExtraProperty(c.Array, "type", "ARRAY")
	}
	if c.Image != nil {
		return core.MarshalJSONWithExtraProperty(c.Image, "type", "IMAGE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageContentVisitor interface {
	VisitString(*StringChatMessageContent) error
	VisitFunctionCall(*FunctionCallChatMessageContent) error
	VisitArray(*ArrayChatMessageContent) error
	VisitImage(*ImageChatMessageContent) error
}

func (c *ChatMessageContent) Accept(visitor ChatMessageContentVisitor) error {
	if c.String != nil {
		return visitor.VisitString(c.String)
	}
	if c.FunctionCall != nil {
		return visitor.VisitFunctionCall(c.FunctionCall)
	}
	if c.Array != nil {
		return visitor.VisitArray(c.Array)
	}
	if c.Image != nil {
		return visitor.VisitImage(c.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageContentRequest struct {
	Type         string
	String       *StringChatMessageContentRequest
	FunctionCall *FunctionCallChatMessageContentRequest
	Array        *ArrayChatMessageContentRequest
	Image        *ImageChatMessageContentRequest
}

func (c *ChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.FunctionCall = value
	case "ARRAY":
		value := new(ArrayChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Array = value
	case "IMAGE":
		value := new(ImageChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Image = value
	}
	return nil
}

func (c ChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	if c.String != nil {
		return core.MarshalJSONWithExtraProperty(c.String, "type", "STRING")
	}
	if c.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(c.FunctionCall, "type", "FUNCTION_CALL")
	}
	if c.Array != nil {
		return core.MarshalJSONWithExtraProperty(c.Array, "type", "ARRAY")
	}
	if c.Image != nil {
		return core.MarshalJSONWithExtraProperty(c.Image, "type", "IMAGE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageContentRequestVisitor interface {
	VisitString(*StringChatMessageContentRequest) error
	VisitFunctionCall(*FunctionCallChatMessageContentRequest) error
	VisitArray(*ArrayChatMessageContentRequest) error
	VisitImage(*ImageChatMessageContentRequest) error
}

func (c *ChatMessageContentRequest) Accept(visitor ChatMessageContentRequestVisitor) error {
	if c.String != nil {
		return visitor.VisitString(c.String)
	}
	if c.FunctionCall != nil {
		return visitor.VisitFunctionCall(c.FunctionCall)
	}
	if c.Array != nil {
		return visitor.VisitArray(c.Array)
	}
	if c.Image != nil {
		return visitor.VisitImage(c.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageRequest struct {
	Text    *string                    `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole            `json:"role" url:"role"`
	Content *ChatMessageContentRequest `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChatMessageRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChatMessageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessageRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessageRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// - `SYSTEM` - System
// - `ASSISTANT` - Assistant
// - `USER` - User
// - `FUNCTION` - Function
type ChatMessageRole string

const (
	ChatMessageRoleSystem    ChatMessageRole = "SYSTEM"
	ChatMessageRoleAssistant ChatMessageRole = "ASSISTANT"
	ChatMessageRoleUser      ChatMessageRole = "USER"
	ChatMessageRoleFunction  ChatMessageRole = "FUNCTION"
)

func NewChatMessageRoleFromString(s string) (ChatMessageRole, error) {
	switch s {
	case "SYSTEM":
		return ChatMessageRoleSystem, nil
	case "ASSISTANT":
		return ChatMessageRoleAssistant, nil
	case "USER":
		return ChatMessageRoleUser, nil
	case "FUNCTION":
		return ChatMessageRoleFunction, nil
	}
	var t ChatMessageRole
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChatMessageRole) Ptr() *ChatMessageRole {
	return &c
}

type CodeExecutionNodeArrayResult struct {
	Id    string                    `json:"id" url:"id"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeArrayResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeArrayResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeArrayResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeArrayResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeChatHistoryResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeChatHistoryResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeErrorResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeErrorResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeFunctionCallResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeFunctionCallResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeFunctionCallResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeJsonResult struct {
	Id    string      `json:"id" url:"id"`
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeJsonResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeJsonResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeNumberResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeNumberResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A Node Result Event emitted from a Code Execution Node.
type CodeExecutionNodeResult struct {
	Data *CodeExecutionNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultData struct {
	Output      *CodeExecutionNodeResultOutput `json:"output" url:"output"`
	LogOutputId *string                        `json:"log_output_id,omitempty" url:"log_output_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeResultData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultOutput struct {
	Type          string
	String        *CodeExecutionNodeStringResult
	Number        *CodeExecutionNodeNumberResult
	Json          *CodeExecutionNodeJsonResult
	ChatHistory   *CodeExecutionNodeChatHistoryResult
	SearchResults *CodeExecutionNodeSearchResultsResult
	Error         *CodeExecutionNodeErrorResult
	Array         *CodeExecutionNodeArrayResult
	FunctionCall  *CodeExecutionNodeFunctionCallResult
}

func (c *CodeExecutionNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(CodeExecutionNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.String = value
	case "NUMBER":
		value := new(CodeExecutionNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Number = value
	case "JSON":
		value := new(CodeExecutionNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Json = value
	case "CHAT_HISTORY":
		value := new(CodeExecutionNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(CodeExecutionNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.SearchResults = value
	case "ERROR":
		value := new(CodeExecutionNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Error = value
	case "ARRAY":
		value := new(CodeExecutionNodeArrayResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Array = value
	case "FUNCTION_CALL":
		value := new(CodeExecutionNodeFunctionCallResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.FunctionCall = value
	}
	return nil
}

func (c CodeExecutionNodeResultOutput) MarshalJSON() ([]byte, error) {
	if c.String != nil {
		return core.MarshalJSONWithExtraProperty(c.String, "type", "STRING")
	}
	if c.Number != nil {
		return core.MarshalJSONWithExtraProperty(c.Number, "type", "NUMBER")
	}
	if c.Json != nil {
		return core.MarshalJSONWithExtraProperty(c.Json, "type", "JSON")
	}
	if c.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(c.ChatHistory, "type", "CHAT_HISTORY")
	}
	if c.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(c.SearchResults, "type", "SEARCH_RESULTS")
	}
	if c.Error != nil {
		return core.MarshalJSONWithExtraProperty(c.Error, "type", "ERROR")
	}
	if c.Array != nil {
		return core.MarshalJSONWithExtraProperty(c.Array, "type", "ARRAY")
	}
	if c.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(c.FunctionCall, "type", "FUNCTION_CALL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type CodeExecutionNodeResultOutputVisitor interface {
	VisitString(*CodeExecutionNodeStringResult) error
	VisitNumber(*CodeExecutionNodeNumberResult) error
	VisitJson(*CodeExecutionNodeJsonResult) error
	VisitChatHistory(*CodeExecutionNodeChatHistoryResult) error
	VisitSearchResults(*CodeExecutionNodeSearchResultsResult) error
	VisitError(*CodeExecutionNodeErrorResult) error
	VisitArray(*CodeExecutionNodeArrayResult) error
	VisitFunctionCall(*CodeExecutionNodeFunctionCallResult) error
}

func (c *CodeExecutionNodeResultOutput) Accept(visitor CodeExecutionNodeResultOutputVisitor) error {
	if c.String != nil {
		return visitor.VisitString(c.String)
	}
	if c.Number != nil {
		return visitor.VisitNumber(c.Number)
	}
	if c.Json != nil {
		return visitor.VisitJson(c.Json)
	}
	if c.ChatHistory != nil {
		return visitor.VisitChatHistory(c.ChatHistory)
	}
	if c.SearchResults != nil {
		return visitor.VisitSearchResults(c.SearchResults)
	}
	if c.Error != nil {
		return visitor.VisitError(c.Error)
	}
	if c.Array != nil {
		return visitor.VisitArray(c.Array)
	}
	if c.FunctionCall != nil {
		return visitor.VisitFunctionCall(c.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

type CodeExecutionNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeSearchResultsResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeSearchResultsResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CodeExecutionNodeStringResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CodeExecutionNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeStringResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeStringResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompilePromptDeploymentExpandMetaRequest struct {
	// If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`
	// If enabled, the response will include the release tag of the Prompt Deployment.
	DeploymentReleaseTag *bool `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	// If enabled, the response will include the ID of the Prompt Version backing the deployment.
	PromptVersionId *bool `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompilePromptDeploymentExpandMetaRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompilePromptDeploymentExpandMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CompilePromptDeploymentExpandMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompilePromptDeploymentExpandMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompilePromptDeploymentExpandMetaRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The subset of the metadata tracked by Vellum during Prompt Deployment compilation that the request opted into with `expand_meta`.
type CompilePromptMeta struct {
	ModelName            *string `json:"model_name,omitempty" url:"model_name,omitempty"`
	DeploymentReleaseTag *string `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompilePromptMeta) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompilePromptMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler CompilePromptMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompilePromptMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompilePromptMeta) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A Node Result Event emitted from a Conditional Node.
type ConditionalNodeResult struct {
	Data *ConditionalNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ConditionalNodeResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionalNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConditionalNodeResultData struct {
	SourceHandleId *string `json:"source_handle_id,omitempty" url:"source_handle_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ConditionalNodeResultData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConditionalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Information about the Test Case to create
type CreateTestSuiteTestCaseRequest struct {
	// A human-readable label used to convey the intention of this Test Case
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// Values for each of the Test Case's input variables
	InputValues []*NamedTestCaseVariableValueRequest `json:"input_values" url:"input_values"`
	// Values for each of the Test Case's evaluation variables
	EvaluationValues []*NamedTestCaseVariableValueRequest `json:"evaluation_values" url:"evaluation_values"`
	// Optionally provide an ID that uniquely identifies this Test Case in your system. Useful for updating this Test Cases data after initial creation. Cannot be changed later.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTestSuiteTestCaseRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTestSuiteTestCaseRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTestSuiteTestCaseRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTestSuiteTestCaseRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTestSuiteTestCaseRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeploymentProviderPayloadResponse struct {
	Payload *DeploymentProviderPayloadResponsePayload `json:"payload" url:"payload"`
	Meta    *CompilePromptMeta                        `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentProviderPayloadResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentProviderPayloadResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeploymentProviderPayloadResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeploymentProviderPayloadResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentProviderPayloadResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentProviderPayloadResponsePayload struct {
	StringUnknownMap map[string]interface{}
	String           string
}

func (d *DeploymentProviderPayloadResponsePayload) UnmarshalJSON(data []byte) error {
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		d.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		d.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DeploymentProviderPayloadResponsePayload) MarshalJSON() ([]byte, error) {
	if d.StringUnknownMap != nil {
		return json.Marshal(d.StringUnknownMap)
	}
	if d.String != "" {
		return json.Marshal(d.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DeploymentProviderPayloadResponsePayloadVisitor interface {
	VisitStringUnknownMap(map[string]interface{}) error
	VisitString(string) error
}

func (d *DeploymentProviderPayloadResponsePayload) Accept(visitor DeploymentProviderPayloadResponsePayloadVisitor) error {
	if d.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(d.StringUnknownMap)
	}
	if d.String != "" {
		return visitor.VisitString(d.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DeploymentRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum  `json:"environment,omitempty" url:"environment,omitempty"`
	LastDeployedOn time.Time         `json:"last_deployed_on" url:"last_deployed_on"`
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// A human-readable description of the deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Deprecated. The Prompt execution endpoints return a `prompt_version_id` that could be used instead.
	ActiveModelVersionIds []string `json:"active_model_version_ids" url:"active_model_version_ids"`
	// The ID of the history item associated with this Deployment's LATEST Release Tag
	LastDeployedHistoryItemId string `json:"last_deployed_history_item_id" url:"last_deployed_history_item_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentRead) UnmarshalJSON(data []byte) error {
	type embed DeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeploymentRead(unmarshaler.embed)
	d.Created = unmarshaler.Created.Time()
	d.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentRead) MarshalJSON() ([]byte, error) {
	type embed DeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*d),
		Created:        core.NewDateTime(d.Created),
		LastDeployedOn: core.NewDateTime(d.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (d *DeploymentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentReleaseTagDeploymentHistoryItem struct {
	Id        string    `json:"id" url:"id"`
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) UnmarshalJSON(data []byte) error {
	type embed DeploymentReleaseTagDeploymentHistoryItem
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeploymentReleaseTagDeploymentHistoryItem(unmarshaler.embed)
	d.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) MarshalJSON() ([]byte, error) {
	type embed DeploymentReleaseTagDeploymentHistoryItem
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*d),
		Timestamp: core.NewDateTime(d.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (d *DeploymentReleaseTagDeploymentHistoryItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentReleaseTagRead struct {
	// The name of the Release Tag
	Name string `json:"name" url:"name"`
	// The source of how the Release Tag was originally created
	//
	// - `SYSTEM` - System
	// - `USER` - User
	Source ReleaseTagSource `json:"source" url:"source"`
	// The Deployment History Item that this Release Tag is associated with
	HistoryItem *DeploymentReleaseTagDeploymentHistoryItem `json:"history_item" url:"history_item"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeploymentReleaseTagRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeploymentReleaseTagRead) UnmarshalJSON(data []byte) error {
	type unmarshaler DeploymentReleaseTagRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeploymentReleaseTagRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentReleaseTagRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentDocumentToDocumentIndex struct {
	// Vellum-generated ID that uniquely identifies this link.
	Id string `json:"id" url:"id"`
	// Vellum-generated ID that uniquely identifies the index this document is included in.
	DocumentIndexId string `json:"document_index_id" url:"document_index_id"`
	// An enum value representing where this document is along its indexing lifecycle for this index.
	//
	// - `AWAITING_PROCESSING` - Awaiting Processing
	// - `QUEUED` - Queued
	// - `INDEXING` - Indexing
	// - `INDEXED` - Indexed
	// - `FAILED` - Failed
	IndexingState *IndexingStateEnum `json:"indexing_state,omitempty" url:"indexing_state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentDocumentToDocumentIndex) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentDocumentToDocumentIndex) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentDocumentToDocumentIndex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentDocumentToDocumentIndex(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentDocumentToDocumentIndex) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexChunking struct {
	ChunkerName                   string
	ReductoChunker                *ReductoChunking
	SentenceChunker               *SentenceChunking
	TokenOverlappingWindowChunker *TokenOverlappingWindowChunking
}

func (d *DocumentIndexChunking) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ChunkerName string `json:"chunker_name"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	d.ChunkerName = unmarshaler.ChunkerName
	switch unmarshaler.ChunkerName {
	case "reducto-chunker":
		value := new(ReductoChunking)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.ReductoChunker = value
	case "sentence-chunker":
		value := new(SentenceChunking)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.SentenceChunker = value
	case "token-overlapping-window-chunker":
		value := new(TokenOverlappingWindowChunking)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.TokenOverlappingWindowChunker = value
	}
	return nil
}

func (d DocumentIndexChunking) MarshalJSON() ([]byte, error) {
	if d.ReductoChunker != nil {
		return core.MarshalJSONWithExtraProperty(d.ReductoChunker, "chunker_name", "reducto-chunker")
	}
	if d.SentenceChunker != nil {
		return core.MarshalJSONWithExtraProperty(d.SentenceChunker, "chunker_name", "sentence-chunker")
	}
	if d.TokenOverlappingWindowChunker != nil {
		return core.MarshalJSONWithExtraProperty(d.TokenOverlappingWindowChunker, "chunker_name", "token-overlapping-window-chunker")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", d)
}

type DocumentIndexChunkingVisitor interface {
	VisitReductoChunker(*ReductoChunking) error
	VisitSentenceChunker(*SentenceChunking) error
	VisitTokenOverlappingWindowChunker(*TokenOverlappingWindowChunking) error
}

func (d *DocumentIndexChunking) Accept(visitor DocumentIndexChunkingVisitor) error {
	if d.ReductoChunker != nil {
		return visitor.VisitReductoChunker(d.ReductoChunker)
	}
	if d.SentenceChunker != nil {
		return visitor.VisitSentenceChunker(d.SentenceChunker)
	}
	if d.TokenOverlappingWindowChunker != nil {
		return visitor.VisitTokenOverlappingWindowChunker(d.TokenOverlappingWindowChunker)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", d)
}

type DocumentIndexChunkingRequest struct {
	ChunkerName                   string
	ReductoChunker                *ReductoChunkingRequest
	SentenceChunker               *SentenceChunkingRequest
	TokenOverlappingWindowChunker *TokenOverlappingWindowChunkingRequest
}

func (d *DocumentIndexChunkingRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ChunkerName string `json:"chunker_name"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	d.ChunkerName = unmarshaler.ChunkerName
	switch unmarshaler.ChunkerName {
	case "reducto-chunker":
		value := new(ReductoChunkingRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.ReductoChunker = value
	case "sentence-chunker":
		value := new(SentenceChunkingRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.SentenceChunker = value
	case "token-overlapping-window-chunker":
		value := new(TokenOverlappingWindowChunkingRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.TokenOverlappingWindowChunker = value
	}
	return nil
}

func (d DocumentIndexChunkingRequest) MarshalJSON() ([]byte, error) {
	if d.ReductoChunker != nil {
		return core.MarshalJSONWithExtraProperty(d.ReductoChunker, "chunker_name", "reducto-chunker")
	}
	if d.SentenceChunker != nil {
		return core.MarshalJSONWithExtraProperty(d.SentenceChunker, "chunker_name", "sentence-chunker")
	}
	if d.TokenOverlappingWindowChunker != nil {
		return core.MarshalJSONWithExtraProperty(d.TokenOverlappingWindowChunker, "chunker_name", "token-overlapping-window-chunker")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", d)
}

type DocumentIndexChunkingRequestVisitor interface {
	VisitReductoChunker(*ReductoChunkingRequest) error
	VisitSentenceChunker(*SentenceChunkingRequest) error
	VisitTokenOverlappingWindowChunker(*TokenOverlappingWindowChunkingRequest) error
}

func (d *DocumentIndexChunkingRequest) Accept(visitor DocumentIndexChunkingRequestVisitor) error {
	if d.ReductoChunker != nil {
		return visitor.VisitReductoChunker(d.ReductoChunker)
	}
	if d.SentenceChunker != nil {
		return visitor.VisitSentenceChunker(d.SentenceChunker)
	}
	if d.TokenOverlappingWindowChunker != nil {
		return visitor.VisitTokenOverlappingWindowChunker(d.TokenOverlappingWindowChunker)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", d)
}

type DocumentIndexIndexingConfig struct {
	Vectorizer *IndexingConfigVectorizer `json:"vectorizer" url:"vectorizer"`
	Chunking   *DocumentIndexChunking    `json:"chunking,omitempty" url:"chunking,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentIndexIndexingConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentIndexIndexingConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentIndexIndexingConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentIndexIndexingConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexIndexingConfig) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexIndexingConfigRequest struct {
	Vectorizer *IndexingConfigVectorizerRequest `json:"vectorizer" url:"vectorizer"`
	Chunking   *DocumentIndexChunkingRequest    `json:"chunking,omitempty" url:"chunking,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentIndexIndexingConfigRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentIndexIndexingConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentIndexIndexingConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentIndexIndexingConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexIndexingConfigRequest) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the document index
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this index within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the document index
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this document index is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum             `json:"environment,omitempty" url:"environment,omitempty"`
	IndexingConfig *DocumentIndexIndexingConfig `json:"indexing_config" url:"indexing_config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentIndexRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentIndexRead) UnmarshalJSON(data []byte) error {
	type embed DocumentIndexRead
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentIndexRead(unmarshaler.embed)
	d.Created = unmarshaler.Created.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexRead) MarshalJSON() ([]byte, error) {
	type embed DocumentIndexRead
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*d),
		Created: core.NewDateTime(d.Created),
	}
	return json.Marshal(marshaler)
}

func (d *DocumentIndexRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentRead struct {
	Id string `json:"id" url:"id"`
	// The unique id of this document as it exists in the user's system.
	ExternalId     *string   `json:"external_id,omitempty" url:"external_id,omitempty"`
	LastUploadedAt time.Time `json:"last_uploaded_at" url:"last_uploaded_at"`
	// A human-readable label for the document. Defaults to the originally uploaded file's file name.
	Label string `json:"label" url:"label"`
	// The current processing state of the document
	//
	// - `QUEUED` - Queued
	// - `PROCESSING` - Processing
	// - `PROCESSED` - Processed
	// - `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty" url:"processing_state,omitempty"`
	// The current status of the document
	//
	// - `ACTIVE` - Active
	Status                    *DocumentStatus                    `json:"status,omitempty" url:"status,omitempty"`
	OriginalFileUrl           *string                            `json:"original_file_url,omitempty" url:"original_file_url,omitempty"`
	ProcessedFileUrl          *string                            `json:"processed_file_url,omitempty" url:"processed_file_url,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes" url:"document_to_document_indexes"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocumentRead) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentRead) UnmarshalJSON(data []byte) error {
	type embed DocumentRead
	var unmarshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentRead(unmarshaler.embed)
	d.LastUploadedAt = unmarshaler.LastUploadedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentRead) MarshalJSON() ([]byte, error) {
	type embed DocumentRead
	var marshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed:          embed(*d),
		LastUploadedAt: core.NewDateTime(d.LastUploadedAt),
	}
	return json.Marshal(marshaler)
}

func (d *DocumentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// - `ACTIVE` - Active
type DocumentStatus = string

type EnrichedNormalizedCompletion struct {
	// The Vellum-generated ID of the completion.
	Id string `json:"id" url:"id"`
	// The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// The text generated by the LLM.
	Text string `json:"text" url:"text"`
	// The reason the generation finished.
	//
	// - `LENGTH` - LENGTH
	// - `STOP` - STOP
	// - `UNKNOWN` - UNKNOWN
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	// The logprobs of the completion. Only present if specified in the original request options.
	Logprobs *NormalizedLogProbs `json:"logprobs,omitempty" url:"logprobs,omitempty"`
	// The ID of the model version used to generate this completion.
	ModelVersionId       string              `json:"model_version_id" url:"model_version_id"`
	PromptVersionId      string              `json:"prompt_version_id" url:"prompt_version_id"`
	Type                 *VellumVariableType `json:"type,omitempty" url:"type,omitempty"`
	DeploymentReleaseTag string              `json:"deployment_release_tag" url:"deployment_release_tag"`
	ModelName            string              `json:"model_name" url:"model_name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EnrichedNormalizedCompletion) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnrichedNormalizedCompletion) UnmarshalJSON(data []byte) error {
	type unmarshaler EnrichedNormalizedCompletion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnrichedNormalizedCompletion(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnrichedNormalizedCompletion) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `ACTIVE` - Active
// - `ARCHIVED` - Archived
type EntityStatus string

const (
	EntityStatusActive   EntityStatus = "ACTIVE"
	EntityStatusArchived EntityStatus = "ARCHIVED"
)

func NewEntityStatusFromString(s string) (EntityStatus, error) {
	switch s {
	case "ACTIVE":
		return EntityStatusActive, nil
	case "ARCHIVED":
		return EntityStatusArchived, nil
	}
	var t EntityStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityStatus) Ptr() *EntityStatus {
	return &e
}

// - `DEVELOPMENT` - Development
// - `STAGING` - Staging
// - `PRODUCTION` - Production
type EnvironmentEnum string

const (
	EnvironmentEnumDevelopment EnvironmentEnum = "DEVELOPMENT"
	EnvironmentEnumStaging     EnvironmentEnum = "STAGING"
	EnvironmentEnumProduction  EnvironmentEnum = "PRODUCTION"
)

func NewEnvironmentEnumFromString(s string) (EnvironmentEnum, error) {
	switch s {
	case "DEVELOPMENT":
		return EnvironmentEnumDevelopment, nil
	case "STAGING":
		return EnvironmentEnumStaging, nil
	case "PRODUCTION":
		return EnvironmentEnumProduction, nil
	}
	var t EnvironmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnvironmentEnum) Ptr() *EnvironmentEnum {
	return &e
}

type ErrorVariableValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVariableValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVariableValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ErrorVellumValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ErrorVellumValueRequest struct {
	Value *VellumErrorRequest `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorVellumValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorVellumValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorVellumValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVellumValueRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutePromptEvent struct {
	State     string
	Initiated *InitiatedExecutePromptEvent
	Streaming *StreamingExecutePromptEvent
	Fulfilled *FulfilledExecutePromptEvent
	Rejected  *RejectedExecutePromptEvent
}

func (e *ExecutePromptEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.State = unmarshaler.State
	switch unmarshaler.State {
	case "INITIATED":
		value := new(InitiatedExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Initiated = value
	case "STREAMING":
		value := new(StreamingExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Streaming = value
	case "FULFILLED":
		value := new(FulfilledExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Fulfilled = value
	case "REJECTED":
		value := new(RejectedExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rejected = value
	}
	return nil
}

func (e ExecutePromptEvent) MarshalJSON() ([]byte, error) {
	if e.Initiated != nil {
		return core.MarshalJSONWithExtraProperty(e.Initiated, "state", "INITIATED")
	}
	if e.Streaming != nil {
		return core.MarshalJSONWithExtraProperty(e.Streaming, "state", "STREAMING")
	}
	if e.Fulfilled != nil {
		return core.MarshalJSONWithExtraProperty(e.Fulfilled, "state", "FULFILLED")
	}
	if e.Rejected != nil {
		return core.MarshalJSONWithExtraProperty(e.Rejected, "state", "REJECTED")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutePromptEventVisitor interface {
	VisitInitiated(*InitiatedExecutePromptEvent) error
	VisitStreaming(*StreamingExecutePromptEvent) error
	VisitFulfilled(*FulfilledExecutePromptEvent) error
	VisitRejected(*RejectedExecutePromptEvent) error
}

func (e *ExecutePromptEvent) Accept(visitor ExecutePromptEventVisitor) error {
	if e.Initiated != nil {
		return visitor.VisitInitiated(e.Initiated)
	}
	if e.Streaming != nil {
		return visitor.VisitStreaming(e.Streaming)
	}
	if e.Fulfilled != nil {
		return visitor.VisitFulfilled(e.Fulfilled)
	}
	if e.Rejected != nil {
		return visitor.VisitRejected(e.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutePromptResponse struct {
	State     string
	Fulfilled *FulfilledExecutePromptResponse
	Rejected  *RejectedExecutePromptResponse
}

func (e *ExecutePromptResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.State = unmarshaler.State
	switch unmarshaler.State {
	case "FULFILLED":
		value := new(FulfilledExecutePromptResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Fulfilled = value
	case "REJECTED":
		value := new(RejectedExecutePromptResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rejected = value
	}
	return nil
}

func (e ExecutePromptResponse) MarshalJSON() ([]byte, error) {
	if e.Fulfilled != nil {
		return core.MarshalJSONWithExtraProperty(e.Fulfilled, "state", "FULFILLED")
	}
	if e.Rejected != nil {
		return core.MarshalJSONWithExtraProperty(e.Rejected, "state", "REJECTED")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutePromptResponseVisitor interface {
	VisitFulfilled(*FulfilledExecutePromptResponse) error
	VisitRejected(*RejectedExecutePromptResponse) error
}

func (e *ExecutePromptResponse) Accept(visitor ExecutePromptResponseVisitor) error {
	if e.Fulfilled != nil {
		return visitor.VisitFulfilled(e.Fulfilled)
	}
	if e.Rejected != nil {
		return visitor.VisitRejected(e.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecuteWorkflowResponse struct {
	ExecutionId string                              `json:"execution_id" url:"execution_id"`
	RunId       *string                             `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                             `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *ExecuteWorkflowWorkflowResultEvent `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecuteWorkflowResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecuteWorkflowResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteWorkflowResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteWorkflowResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteWorkflowResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteWorkflowWorkflowResultEvent struct {
	State     string
	Fulfilled *FulfilledExecuteWorkflowWorkflowResultEvent
	Rejected  *RejectedExecuteWorkflowWorkflowResultEvent
}

func (e *ExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.State = unmarshaler.State
	switch unmarshaler.State {
	case "FULFILLED":
		value := new(FulfilledExecuteWorkflowWorkflowResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Fulfilled = value
	case "REJECTED":
		value := new(RejectedExecuteWorkflowWorkflowResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rejected = value
	}
	return nil
}

func (e ExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	if e.Fulfilled != nil {
		return core.MarshalJSONWithExtraProperty(e.Fulfilled, "state", "FULFILLED")
	}
	if e.Rejected != nil {
		return core.MarshalJSONWithExtraProperty(e.Rejected, "state", "REJECTED")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecuteWorkflowWorkflowResultEventVisitor interface {
	VisitFulfilled(*FulfilledExecuteWorkflowWorkflowResultEvent) error
	VisitRejected(*RejectedExecuteWorkflowWorkflowResultEvent) error
}

func (e *ExecuteWorkflowWorkflowResultEvent) Accept(visitor ExecuteWorkflowWorkflowResultEventVisitor) error {
	if e.Fulfilled != nil {
		return visitor.VisitFulfilled(e.Fulfilled)
	}
	if e.Rejected != nil {
		return visitor.VisitRejected(e.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

// A value representing an array of Vellum variable values.
type ExecutionArrayVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string                  `json:"id" url:"id"`
	Name  string                  `json:"name" url:"name"`
	Value []*ArrayVellumValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionArrayVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionArrayVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionArrayVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionArrayVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionArrayVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing Chat History.
type ExecutionChatHistoryVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string         `json:"id" url:"id"`
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionChatHistoryVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionChatHistoryVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionChatHistoryVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionChatHistoryVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionChatHistoryVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing an Error.
type ExecutionErrorVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string       `json:"id" url:"id"`
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionErrorVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionErrorVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionErrorVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionErrorVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionErrorVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a Function Call.
type ExecutionFunctionCallVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string        `json:"id" url:"id"`
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionFunctionCallVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionFunctionCallVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionFunctionCallVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionFunctionCallVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionFunctionCallVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a JSON object.
type ExecutionJsonVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string      `json:"id" url:"id"`
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionJsonVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionJsonVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionJsonVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionJsonVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionJsonVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a number.
type ExecutionNumberVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string   `json:"id" url:"id"`
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionNumberVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionNumberVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionNumberVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionNumberVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionNumberVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing Search Results.
type ExecutionSearchResultsVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string          `json:"id" url:"id"`
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionSearchResultsVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionSearchResultsVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionSearchResultsVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionSearchResultsVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionSearchResultsVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A value representing a string.
type ExecutionStringVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string  `json:"id" url:"id"`
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExecutionStringVellumValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExecutionStringVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionStringVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionStringVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionStringVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionVellumValue struct {
	Type          string
	String        *ExecutionStringVellumValue
	Number        *ExecutionNumberVellumValue
	Json          *ExecutionJsonVellumValue
	ChatHistory   *ExecutionChatHistoryVellumValue
	SearchResults *ExecutionSearchResultsVellumValue
	Error         *ExecutionErrorVellumValue
	Array         *ExecutionArrayVellumValue
	FunctionCall  *ExecutionFunctionCallVellumValue
}

func (e *ExecutionVellumValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(ExecutionStringVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.String = value
	case "NUMBER":
		value := new(ExecutionNumberVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Number = value
	case "JSON":
		value := new(ExecutionJsonVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Json = value
	case "CHAT_HISTORY":
		value := new(ExecutionChatHistoryVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(ExecutionSearchResultsVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.SearchResults = value
	case "ERROR":
		value := new(ExecutionErrorVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Error = value
	case "ARRAY":
		value := new(ExecutionArrayVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Array = value
	case "FUNCTION_CALL":
		value := new(ExecutionFunctionCallVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.FunctionCall = value
	}
	return nil
}

func (e ExecutionVellumValue) MarshalJSON() ([]byte, error) {
	if e.String != nil {
		return core.MarshalJSONWithExtraProperty(e.String, "type", "STRING")
	}
	if e.Number != nil {
		return core.MarshalJSONWithExtraProperty(e.Number, "type", "NUMBER")
	}
	if e.Json != nil {
		return core.MarshalJSONWithExtraProperty(e.Json, "type", "JSON")
	}
	if e.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(e.ChatHistory, "type", "CHAT_HISTORY")
	}
	if e.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(e.SearchResults, "type", "SEARCH_RESULTS")
	}
	if e.Error != nil {
		return core.MarshalJSONWithExtraProperty(e.Error, "type", "ERROR")
	}
	if e.Array != nil {
		return core.MarshalJSONWithExtraProperty(e.Array, "type", "ARRAY")
	}
	if e.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(e.FunctionCall, "type", "FUNCTION_CALL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutionVellumValueVisitor interface {
	VisitString(*ExecutionStringVellumValue) error
	VisitNumber(*ExecutionNumberVellumValue) error
	VisitJson(*ExecutionJsonVellumValue) error
	VisitChatHistory(*ExecutionChatHistoryVellumValue) error
	VisitSearchResults(*ExecutionSearchResultsVellumValue) error
	VisitError(*ExecutionErrorVellumValue) error
	VisitArray(*ExecutionArrayVellumValue) error
	VisitFunctionCall(*ExecutionFunctionCallVellumValue) error
}

func (e *ExecutionVellumValue) Accept(visitor ExecutionVellumValueVisitor) error {
	if e.String != nil {
		return visitor.VisitString(e.String)
	}
	if e.Number != nil {
		return visitor.VisitNumber(e.Number)
	}
	if e.Json != nil {
		return visitor.VisitJson(e.Json)
	}
	if e.ChatHistory != nil {
		return visitor.VisitChatHistory(e.ChatHistory)
	}
	if e.SearchResults != nil {
		return visitor.VisitSearchResults(e.SearchResults)
	}
	if e.Error != nil {
		return visitor.VisitError(e.Error)
	}
	if e.Array != nil {
		return visitor.VisitArray(e.Array)
	}
	if e.FunctionCall != nil {
		return visitor.VisitFunctionCall(e.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExternalTestCaseExecution struct {
	// The output values of a callable that was executed against a Test Case outside of Vellum
	Outputs    []*NamedTestCaseVariableValue `json:"outputs" url:"outputs"`
	TestCaseId string                        `json:"test_case_id" url:"test_case_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalTestCaseExecution) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalTestCaseExecution) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTestCaseExecution
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTestCaseExecution(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTestCaseExecution) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExternalTestCaseExecutionRequest struct {
	// The output values of a callable that was executed against a Test Case outside of Vellum
	Outputs    []*NamedTestCaseVariableValueRequest `json:"outputs" url:"outputs"`
	TestCaseId string                               `json:"test_case_id" url:"test_case_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalTestCaseExecutionRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalTestCaseExecutionRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalTestCaseExecutionRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalTestCaseExecutionRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalTestCaseExecutionRequest) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `LENGTH` - LENGTH
// - `STOP` - STOP
// - `UNKNOWN` - UNKNOWN
type FinishReasonEnum string

const (
	FinishReasonEnumLength  FinishReasonEnum = "LENGTH"
	FinishReasonEnumStop    FinishReasonEnum = "STOP"
	FinishReasonEnumUnknown FinishReasonEnum = "UNKNOWN"
)

func NewFinishReasonEnumFromString(s string) (FinishReasonEnum, error) {
	switch s {
	case "LENGTH":
		return FinishReasonEnumLength, nil
	case "STOP":
		return FinishReasonEnumStop, nil
	case "UNKNOWN":
		return FinishReasonEnumUnknown, nil
	}
	var t FinishReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FinishReasonEnum) Ptr() *FinishReasonEnum {
	return &f
}

type FulfilledEnum = string

// The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.
type FulfilledExecutePromptEvent struct {
	Outputs     []*PromptOutput               `json:"outputs" url:"outputs"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *FulfilledPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledExecutePromptEvent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the model containing all of the resolved values generated by the prompt.
type FulfilledExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string          `json:"execution_id" url:"execution_id"`
	Outputs     []*PromptOutput `json:"outputs" url:"outputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecutePromptResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledExecutePromptResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the Workflow execution containing the produced outputs.
type FulfilledExecuteWorkflowWorkflowResultEvent struct {
	Id      string            `json:"id" url:"id"`
	Ts      time.Time         `json:"ts" url:"ts"`
	Outputs []*WorkflowOutput `json:"outputs" url:"outputs"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*f),
		Ts:    core.NewDateTime(f.Ts),
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type FulfilledPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	Usage        *MlModelUsage     `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledPromptExecutionMeta) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// An event that indicates that the node has fulfilled its execution.
type FulfilledWorkflowNodeResultEvent struct {
	Id                string                     `json:"id" url:"id"`
	NodeId            string                     `json:"node_id" url:"node_id"`
	NodeResultId      string                     `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                 `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData    `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                    `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	OutputValues      []*NodeOutputCompiledValue `json:"output_values" url:"output_values"`
	Mocked            *bool                      `json:"mocked,omitempty" url:"mocked,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FulfilledWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FulfilledWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledWorkflowNodeResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*f),
		Ts:    core.NewOptionalDateTime(f.Ts),
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledWorkflowNodeResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCall struct {
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`
	Name      string                 `json:"name" url:"name"`
	State     *FulfilledEnum         `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCall) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCall(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCall) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContent struct {
	Value *FunctionCallChatMessageContentValue `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContent) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContentRequest struct {
	Value *FunctionCallChatMessageContentValueRequest `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValue struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentValue) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValueRequest struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallChatMessageContentValueRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallChatMessageContentValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValueRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallRequest struct {
	Arguments map[string]interface{} `json:"arguments" url:"arguments"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`
	Name      string                 `json:"name" url:"name"`
	State     *FulfilledEnum         `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FunctionCallVariableValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVariableValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVariableValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A value representing a Function Call.
type FunctionCallVellumValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVellumValue) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVellumValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A value representing a Function Call.
type FunctionCallVellumValueRequest struct {
	Value *FunctionCallRequest `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FunctionCallVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FunctionCallVellumValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallVellumValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallVellumValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVellumValueRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GenerateOptionsRequest struct {
	// Which logprobs to include, if any. Defaults to NONE.
	//
	// - `ALL` - ALL
	// - `NONE` - NONE
	Logprobs *LogprobsEnum `json:"logprobs,omitempty" url:"logprobs,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateOptionsRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateOptionsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateOptionsRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateRequest struct {
	// Key/value pairs for each template variable defined in the deployment's prompt.
	InputValues map[string]interface{} `json:"input_values" url:"input_values"`
	// Optionally provide a list of chat messages that'll be used in place of the special chat_history variable, if included in the prompt.
	ChatHistory []*ChatMessageRequest `json:"chat_history,omitempty" url:"chat_history,omitempty"`
	// Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResponse struct {
	// The results of each generation request.
	Results []*GenerateResult `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResult struct {
	// An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.
	Data *GenerateResultData `json:"data,omitempty" url:"data,omitempty"`
	// An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.
	Error *GenerateResultError `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResult) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultData struct {
	// The generated completions. This will generally be a list of length one.
	Completions []*EnrichedNormalizedCompletion `json:"completions" url:"completions"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResultData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultError struct {
	// The error message returned by the LLM provider.
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateResultError) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateResultError) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultError) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResponse struct {
	Delta *GenerateStreamResult `json:"delta" url:"delta"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResult struct {
	RequestIndex int                       `json:"request_index" url:"request_index"`
	Data         *GenerateStreamResultData `json:"data,omitempty" url:"data,omitempty"`
	Error        *GenerateResultError      `json:"error,omitempty" url:"error,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResult) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResultData struct {
	CompletionIndex int                           `json:"completion_index" url:"completion_index"`
	Completion      *EnrichedNormalizedCompletion `json:"completion" url:"completion"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenerateStreamResultData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenerateStreamResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Vectorizer for hkunlp/instructor-xl.
type HkunlpInstructorXlVectorizer struct {
	Config *InstructorVectorizerConfig `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HkunlpInstructorXlVectorizer) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HkunlpInstructorXlVectorizer) UnmarshalJSON(data []byte) error {
	type unmarshaler HkunlpInstructorXlVectorizer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HkunlpInstructorXlVectorizer(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HkunlpInstructorXlVectorizer) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Vectorizer for hkunlp/instructor-xl.
type HkunlpInstructorXlVectorizerRequest struct {
	Config *InstructorVectorizerConfigRequest `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HkunlpInstructorXlVectorizerRequest) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HkunlpInstructorXlVectorizerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler HkunlpInstructorXlVectorizerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HkunlpInstructorXlVectorizerRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HkunlpInstructorXlVectorizerRequest) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// - `ANTHROPIC` - ANTHROPIC
// - `AWS_BEDROCK` - AWS_BEDROCK
// - `AZURE_OPENAI` - AZURE_OPENAI
// - `COHERE` - COHERE
// - `CUSTOM` - CUSTOM
// - `FIREWORKS_AI` - FIREWORKS_AI
// - `GOOGLE` - GOOGLE
// - `GOOGLE_VERTEX_AI` - GOOGLE_VERTEX_AI
// - `GROQ` - GROQ
// - `HUGGINGFACE` - HUGGINGFACE
// - `IBM_WATSONX` - IBM_WATSONX
// - `MOSAICML` - MOSAICML
// - `MYSTIC` - MYSTIC
// - `OPENAI` - OPENAI
// - `OPENPIPE` - OPENPIPE
// - `PYQ` - PYQ
// - `REPLICATE` - REPLICATE
type HostedByEnum string

const (
	HostedByEnumAnthropic      HostedByEnum = "ANTHROPIC"
	HostedByEnumAwsBedrock     HostedByEnum = "AWS_BEDROCK"
	HostedByEnumAzureOpenai    HostedByEnum = "AZURE_OPENAI"
	HostedByEnumCohere         HostedByEnum = "COHERE"
	HostedByEnumCustom         HostedByEnum = "CUSTOM"
	HostedByEnumFireworksAi    HostedByEnum = "FIREWORKS_AI"
	HostedByEnumGoogle         HostedByEnum = "GOOGLE"
	HostedByEnumGoogleVertexAi HostedByEnum = "GOOGLE_VERTEX_AI"
	HostedByEnumGroq           HostedByEnum = "GROQ"
	HostedByEnumHuggingface    HostedByEnum = "HUGGINGFACE"
	HostedByEnumIbmWatsonx     HostedByEnum = "IBM_WATSONX"
	HostedByEnumMosaicml       HostedByEnum = "MOSAICML"
	HostedByEnumMystic         HostedByEnum = "MYSTIC"
	HostedByEnumOpenai         HostedByEnum = "OPENAI"
	HostedByEnumOpenpipe       HostedByEnum = "OPENPIPE"
	HostedByEnumPyq            HostedByEnum = "PYQ"
	HostedByEnumReplicate      HostedByEnum = "REPLICATE"
)

func NewHostedByEnumFromString(s string) (HostedByEnum, error) {
	switch s {
	case "ANTHROPIC":
		return HostedByEnumAnthropic, nil
	case "AWS_BEDROCK":
		return HostedByEnumAwsBedrock, nil
	case "AZURE_OPENAI":
		return HostedByEnumAzureOpenai, nil
	case "COHERE":
		return HostedByEnumCohere, nil
	case "CUSTOM":
		return HostedByEnumCustom, nil
	case "FIREWORKS_AI":
		return HostedByEnumFireworksAi, nil
	case "GOOGLE":
		return HostedByEnumGoogle, nil
	case "GOOGLE_VERTEX_AI":
		return HostedByEnumGoogleVertexAi, nil
	case "GROQ":
		return HostedByEnumGroq, nil
	case "HUGGINGFACE":
		return HostedByEnumHuggingface, nil
	case "IBM_WATSONX":
		return HostedByEnumIbmWatsonx, nil
	case "MOSAICML":
		return HostedByEnumMosaicml, nil
	case "MYSTIC":
		return HostedByEnumMystic, nil
	case "OPENAI":
		return HostedByEnumOpenai, nil
	case "OPENPIPE":
		return HostedByEnumOpenpipe, nil
	case "PYQ":
		return HostedByEnumPyq, nil
	case "REPLICATE":
		return HostedByEnumReplicate, nil
	}
	var t HostedByEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HostedByEnum) Ptr() *HostedByEnum {
	return &h
}

// Tokenizer config for Hugging Face type tokenizers.
type HuggingFaceTokenizerConfig struct {
	Name string  `json:"name" url:"name"`
	Path *string `json:"path,omitempty" url:"path,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HuggingFaceTokenizerConfig) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HuggingFaceTokenizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler HuggingFaceTokenizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HuggingFaceTokenizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HuggingFaceTokenizerConfig) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Tokenizer config for Hugging Face type tokenizers.
type HuggingFaceTokenizerConfigRequest struct {
	Name string  `json:"name" url:"name"`
	Path *string `json:"path,omitempty" url:"path,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HuggingFaceTokenizerConfigRequest) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HuggingFaceTokenizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler HuggingFaceTokenizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HuggingFaceTokenizerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HuggingFaceTokenizerConfigRequest) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// An image value that is used in a chat message.
type ImageChatMessageContent struct {
	Value *VellumImage `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageChatMessageContent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageChatMessageContent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An image value that is used in a chat message.
type ImageChatMessageContentRequest struct {
	Value *VellumImageRequest `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageChatMessageContentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContentRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVariableValue struct {
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVariableValue) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVariableValue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVellumValue struct {
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVellumValue) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVellumValue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A base Vellum primitive value representing an image.
type ImageVellumValueRequest struct {
	Value *VellumImageRequest `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *ImageVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImageVellumValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageVellumValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageVellumValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVellumValueRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IndexingConfigVectorizer struct {
	ModelName                                 string
	TextEmbedding3Small                       *OpenAiVectorizerTextEmbedding3Small
	TextEmbedding3Large                       *OpenAiVectorizerTextEmbedding3Large
	TextEmbeddingAda002                       *OpenAiVectorizerTextEmbeddingAda002
	IntfloatMultilingualE5Large               *BasicVectorizerIntfloatMultilingualE5Large
	SentenceTransformersMultiQaMpnetBaseCosV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1
	SentenceTransformersMultiQaMpnetBaseDotV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1
	HkunlpInstructorXl                        *HkunlpInstructorXlVectorizer
}

func (i *IndexingConfigVectorizer) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ModelName string `json:"model_name"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	i.ModelName = unmarshaler.ModelName
	switch unmarshaler.ModelName {
	case "text-embedding-3-small":
		value := new(OpenAiVectorizerTextEmbedding3Small)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.TextEmbedding3Small = value
	case "text-embedding-3-large":
		value := new(OpenAiVectorizerTextEmbedding3Large)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.TextEmbedding3Large = value
	case "text-embedding-ada-002":
		value := new(OpenAiVectorizerTextEmbeddingAda002)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.TextEmbeddingAda002 = value
	case "intfloat/multilingual-e5-large":
		value := new(BasicVectorizerIntfloatMultilingualE5Large)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.IntfloatMultilingualE5Large = value
	case "sentence-transformers/multi-qa-mpnet-base-cos-v1":
		value := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.SentenceTransformersMultiQaMpnetBaseCosV1 = value
	case "sentence-transformers/multi-qa-mpnet-base-dot-v1":
		value := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.SentenceTransformersMultiQaMpnetBaseDotV1 = value
	case "hkunlp/instructor-xl":
		value := new(HkunlpInstructorXlVectorizer)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.HkunlpInstructorXl = value
	}
	return nil
}

func (i IndexingConfigVectorizer) MarshalJSON() ([]byte, error) {
	if i.TextEmbedding3Small != nil {
		return core.MarshalJSONWithExtraProperty(i.TextEmbedding3Small, "model_name", "text-embedding-3-small")
	}
	if i.TextEmbedding3Large != nil {
		return core.MarshalJSONWithExtraProperty(i.TextEmbedding3Large, "model_name", "text-embedding-3-large")
	}
	if i.TextEmbeddingAda002 != nil {
		return core.MarshalJSONWithExtraProperty(i.TextEmbeddingAda002, "model_name", "text-embedding-ada-002")
	}
	if i.IntfloatMultilingualE5Large != nil {
		return core.MarshalJSONWithExtraProperty(i.IntfloatMultilingualE5Large, "model_name", "intfloat/multilingual-e5-large")
	}
	if i.SentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return core.MarshalJSONWithExtraProperty(i.SentenceTransformersMultiQaMpnetBaseCosV1, "model_name", "sentence-transformers/multi-qa-mpnet-base-cos-v1")
	}
	if i.SentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return core.MarshalJSONWithExtraProperty(i.SentenceTransformersMultiQaMpnetBaseDotV1, "model_name", "sentence-transformers/multi-qa-mpnet-base-dot-v1")
	}
	if i.HkunlpInstructorXl != nil {
		return core.MarshalJSONWithExtraProperty(i.HkunlpInstructorXl, "model_name", "hkunlp/instructor-xl")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", i)
}

type IndexingConfigVectorizerVisitor interface {
	VisitTextEmbedding3Small(*OpenAiVectorizerTextEmbedding3Small) error
	VisitTextEmbedding3Large(*OpenAiVectorizerTextEmbedding3Large) error
	VisitTextEmbeddingAda002(*OpenAiVectorizerTextEmbeddingAda002) error
	VisitIntfloatMultilingualE5Large(*BasicVectorizerIntfloatMultilingualE5Large) error
	VisitSentenceTransformersMultiQaMpnetBaseCosV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1) error
	VisitSentenceTransformersMultiQaMpnetBaseDotV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1) error
	VisitHkunlpInstructorXl(*HkunlpInstructorXlVectorizer) error
}

func (i *IndexingConfigVectorizer) Accept(visitor IndexingConfigVectorizerVisitor) error {
	if i.TextEmbedding3Small != nil {
		return visitor.VisitTextEmbedding3Small(i.TextEmbedding3Small)
	}
	if i.TextEmbedding3Large != nil {
		return visitor.VisitTextEmbedding3Large(i.TextEmbedding3Large)
	}
	if i.TextEmbeddingAda002 != nil {
		return visitor.VisitTextEmbeddingAda002(i.TextEmbeddingAda002)
	}
	if i.IntfloatMultilingualE5Large != nil {
		return visitor.VisitIntfloatMultilingualE5Large(i.IntfloatMultilingualE5Large)
	}
	if i.SentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return visitor.VisitSentenceTransformersMultiQaMpnetBaseCosV1(i.SentenceTransformersMultiQaMpnetBaseCosV1)
	}
	if i.SentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return visitor.VisitSentenceTransformersMultiQaMpnetBaseDotV1(i.SentenceTransformersMultiQaMpnetBaseDotV1)
	}
	if i.HkunlpInstructorXl != nil {
		return visitor.VisitHkunlpInstructorXl(i.HkunlpInstructorXl)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", i)
}

type IndexingConfigVectorizerRequest struct {
	ModelName                                 string
	TextEmbedding3Small                       *OpenAiVectorizerTextEmbedding3SmallRequest
	TextEmbedding3Large                       *OpenAiVectorizerTextEmbedding3LargeRequest
	TextEmbeddingAda002                       *OpenAiVectorizerTextEmbeddingAda002Request
	IntfloatMultilingualE5Large               *BasicVectorizerIntfloatMultilingualE5LargeRequest
	SentenceTransformersMultiQaMpnetBaseCosV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request
	SentenceTransformersMultiQaMpnetBaseDotV1 *BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request
	HkunlpInstructorXl                        *HkunlpInstructorXlVectorizerRequest
}

func (i *IndexingConfigVectorizerRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ModelName string `json:"model_name"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	i.ModelName = unmarshaler.ModelName
	switch unmarshaler.ModelName {
	case "text-embedding-3-small":
		value := new(OpenAiVectorizerTextEmbedding3SmallRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.TextEmbedding3Small = value
	case "text-embedding-3-large":
		value := new(OpenAiVectorizerTextEmbedding3LargeRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.TextEmbedding3Large = value
	case "text-embedding-ada-002":
		value := new(OpenAiVectorizerTextEmbeddingAda002Request)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.TextEmbeddingAda002 = value
	case "intfloat/multilingual-e5-large":
		value := new(BasicVectorizerIntfloatMultilingualE5LargeRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.IntfloatMultilingualE5Large = value
	case "sentence-transformers/multi-qa-mpnet-base-cos-v1":
		value := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.SentenceTransformersMultiQaMpnetBaseCosV1 = value
	case "sentence-transformers/multi-qa-mpnet-base-dot-v1":
		value := new(BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.SentenceTransformersMultiQaMpnetBaseDotV1 = value
	case "hkunlp/instructor-xl":
		value := new(HkunlpInstructorXlVectorizerRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.HkunlpInstructorXl = value
	}
	return nil
}

func (i IndexingConfigVectorizerRequest) MarshalJSON() ([]byte, error) {
	if i.TextEmbedding3Small != nil {
		return core.MarshalJSONWithExtraProperty(i.TextEmbedding3Small, "model_name", "text-embedding-3-small")
	}
	if i.TextEmbedding3Large != nil {
		return core.MarshalJSONWithExtraProperty(i.TextEmbedding3Large, "model_name", "text-embedding-3-large")
	}
	if i.TextEmbeddingAda002 != nil {
		return core.MarshalJSONWithExtraProperty(i.TextEmbeddingAda002, "model_name", "text-embedding-ada-002")
	}
	if i.IntfloatMultilingualE5Large != nil {
		return core.MarshalJSONWithExtraProperty(i.IntfloatMultilingualE5Large, "model_name", "intfloat/multilingual-e5-large")
	}
	if i.SentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return core.MarshalJSONWithExtraProperty(i.SentenceTransformersMultiQaMpnetBaseCosV1, "model_name", "sentence-transformers/multi-qa-mpnet-base-cos-v1")
	}
	if i.SentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return core.MarshalJSONWithExtraProperty(i.SentenceTransformersMultiQaMpnetBaseDotV1, "model_name", "sentence-transformers/multi-qa-mpnet-base-dot-v1")
	}
	if i.HkunlpInstructorXl != nil {
		return core.MarshalJSONWithExtraProperty(i.HkunlpInstructorXl, "model_name", "hkunlp/instructor-xl")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", i)
}

type IndexingConfigVectorizerRequestVisitor interface {
	VisitTextEmbedding3Small(*OpenAiVectorizerTextEmbedding3SmallRequest) error
	VisitTextEmbedding3Large(*OpenAiVectorizerTextEmbedding3LargeRequest) error
	VisitTextEmbeddingAda002(*OpenAiVectorizerTextEmbeddingAda002Request) error
	VisitIntfloatMultilingualE5Large(*BasicVectorizerIntfloatMultilingualE5LargeRequest) error
	VisitSentenceTransformersMultiQaMpnetBaseCosV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request) error
	VisitSentenceTransformersMultiQaMpnetBaseDotV1(*BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request) error
	VisitHkunlpInstructorXl(*HkunlpInstructorXlVectorizerRequest) error
}

func (i *IndexingConfigVectorizerRequest) Accept(visitor IndexingConfigVectorizerRequestVisitor) error {
	if i.TextEmbedding3Small != nil {
		return visitor.VisitTextEmbedding3Small(i.TextEmbedding3Small)
	}
	if i.TextEmbedding3Large != nil {
		return visitor.VisitTextEmbedding3Large(i.TextEmbedding3Large)
	}
	if i.TextEmbeddingAda002 != nil {
		return visitor.VisitTextEmbeddingAda002(i.TextEmbeddingAda002)
	}
	if i.IntfloatMultilingualE5Large != nil {
		return visitor.VisitIntfloatMultilingualE5Large(i.IntfloatMultilingualE5Large)
	}
	if i.SentenceTransformersMultiQaMpnetBaseCosV1 != nil {
		return visitor.VisitSentenceTransformersMultiQaMpnetBaseCosV1(i.SentenceTransformersMultiQaMpnetBaseCosV1)
	}
	if i.SentenceTransformersMultiQaMpnetBaseDotV1 != nil {
		return visitor.VisitSentenceTransformersMultiQaMpnetBaseDotV1(i.SentenceTransformersMultiQaMpnetBaseDotV1)
	}
	if i.HkunlpInstructorXl != nil {
		return visitor.VisitHkunlpInstructorXl(i.HkunlpInstructorXl)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", i)
}

// - `AWAITING_PROCESSING` - Awaiting Processing
// - `QUEUED` - Queued
// - `INDEXING` - Indexing
// - `INDEXED` - Indexed
// - `FAILED` - Failed
type IndexingStateEnum string

const (
	IndexingStateEnumAwaitingProcessing IndexingStateEnum = "AWAITING_PROCESSING"
	IndexingStateEnumQueued             IndexingStateEnum = "QUEUED"
	IndexingStateEnumIndexing           IndexingStateEnum = "INDEXING"
	IndexingStateEnumIndexed            IndexingStateEnum = "INDEXED"
	IndexingStateEnumFailed             IndexingStateEnum = "FAILED"
)

func NewIndexingStateEnumFromString(s string) (IndexingStateEnum, error) {
	switch s {
	case "AWAITING_PROCESSING":
		return IndexingStateEnumAwaitingProcessing, nil
	case "QUEUED":
		return IndexingStateEnumQueued, nil
	case "INDEXING":
		return IndexingStateEnumIndexing, nil
	case "INDEXED":
		return IndexingStateEnumIndexed, nil
	case "FAILED":
		return IndexingStateEnumFailed, nil
	}
	var t IndexingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IndexingStateEnum) Ptr() *IndexingStateEnum {
	return &i
}

// The initial data returned indicating that the response from the model has returned and begun streaming.
type InitiatedExecutePromptEvent struct {
	Meta        *InitiatedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedExecutePromptEvent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedExecutePromptEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type InitiatedPromptExecutionMeta struct {
	ModelName            *string `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int    `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedPromptExecutionMeta) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An event that indicates that the node has initiated its execution.
type InitiatedWorkflowNodeResultEvent struct {
	Id                string                            `json:"id" url:"id"`
	NodeId            string                            `json:"node_id" url:"node_id"`
	NodeResultId      string                            `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                        `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData           `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                           `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	InputValues       []*NodeInputVariableCompiledValue `json:"input_values,omitempty" url:"input_values,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InitiatedWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InitiatedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed InitiatedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InitiatedWorkflowNodeResultEvent(unmarshaler.embed)
	i.Ts = unmarshaler.Ts.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed InitiatedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*i),
		Ts:    core.NewOptionalDateTime(i.Ts),
	}
	return json.Marshal(marshaler)
}

func (i *InitiatedWorkflowNodeResultEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Configuration for using an Instructor vectorizer.
type InstructorVectorizerConfig struct {
	InstructionDomain           string `json:"instruction_domain" url:"instruction_domain"`
	InstructionQueryTextType    string `json:"instruction_query_text_type" url:"instruction_query_text_type"`
	InstructionDocumentTextType string `json:"instruction_document_text_type" url:"instruction_document_text_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InstructorVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InstructorVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler InstructorVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InstructorVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InstructorVectorizerConfig) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Configuration for using an Instructor vectorizer.
type InstructorVectorizerConfigRequest struct {
	InstructionDomain           string `json:"instruction_domain" url:"instruction_domain"`
	InstructionQueryTextType    string `json:"instruction_query_text_type" url:"instruction_query_text_type"`
	InstructionDocumentTextType string `json:"instruction_document_text_type" url:"instruction_document_text_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InstructorVectorizerConfigRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InstructorVectorizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler InstructorVectorizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InstructorVectorizerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InstructorVectorizerConfigRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// - `INITIATED` - INITIATED
// - `FULFILLED` - FULFILLED
type IterationStateEnum string

const (
	IterationStateEnumInitiated IterationStateEnum = "INITIATED"
	IterationStateEnumFulfilled IterationStateEnum = "FULFILLED"
)

func NewIterationStateEnumFromString(s string) (IterationStateEnum, error) {
	switch s {
	case "INITIATED":
		return IterationStateEnumInitiated, nil
	case "FULFILLED":
		return IterationStateEnumFulfilled, nil
	}
	var t IterationStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IterationStateEnum) Ptr() *IterationStateEnum {
	return &i
}

// A user input representing a JSON object
type JsonInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                 `json:"name" url:"name"`
	Value map[string]interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonInputRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonInputRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonInputRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JsonVariableValue struct {
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVariableValue) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVariableValue) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A value representing a JSON object.
type JsonVellumValue struct {
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVellumValue) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVellumValue) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A value representing a JSON object.
type JsonVellumValueRequest struct {
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (j *JsonVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonVellumValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonVellumValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonVellumValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties

	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVellumValueRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// - `=` - EQUALS
// - `!=` - DOES_NOT_EQUAL
// - `<` - LESS_THAN
// - `>` - GREATER_THAN
// - `<=` - LESS_THAN_OR_EQUAL_TO
// - `>=` - GREATER_THAN_OR_EQUAL_TO
// - `contains` - CONTAINS
// - `beginsWith` - BEGINS_WITH
// - `endsWith` - ENDS_WITH
// - `doesNotContain` - DOES_NOT_CONTAIN
// - `doesNotBeginWith` - DOES_NOT_BEGIN_WITH
// - `doesNotEndWith` - DOES_NOT_END_WITH
// - `null` - NULL
// - `notNull` - NOT_NULL
// - `in` - IN
// - `notIn` - NOT_IN
// - `between` - BETWEEN
// - `notBetween` - NOT_BETWEEN
type LogicalOperator string

const (
	// Equals
	LogicalOperatorEquals LogicalOperator = "="
	// Does not equal
	LogicalOperatorDoesNotEqual LogicalOperator = "!="
	// Less than
	LogicalOperatorLessThan LogicalOperator = "<"
	// Greater than
	LogicalOperatorGreaterThan LogicalOperator = ">"
	// Less than or equal to
	LogicalOperatorLessThanOrEqualTo LogicalOperator = "<="
	// Greater than or equal to
	LogicalOperatorGreaterThanOrEqualTo LogicalOperator = ">="
	// Contains
	LogicalOperatorContains LogicalOperator = "contains"
	// Begins with
	LogicalOperatorBeginsWith LogicalOperator = "beginsWith"
	// Ends with
	LogicalOperatorEndsWith LogicalOperator = "endsWith"
	// Does not contain
	LogicalOperatorDoesNotContain LogicalOperator = "doesNotContain"
	// Does not begin with
	LogicalOperatorDoesNotBeginWith LogicalOperator = "doesNotBeginWith"
	// Does not end with
	LogicalOperatorDoesNotEndWith LogicalOperator = "doesNotEndWith"
	// Null
	LogicalOperatorNull LogicalOperator = "null"
	// Not null
	LogicalOperatorNotNull LogicalOperator = "notNull"
	// In
	LogicalOperatorIn LogicalOperator = "in"
	// Not in
	LogicalOperatorNotIn LogicalOperator = "notIn"
	// Between
	LogicalOperatorBetween LogicalOperator = "between"
	// Not between
	LogicalOperatorNotBetween LogicalOperator = "notBetween"
)

func NewLogicalOperatorFromString(s string) (LogicalOperator, error) {
	switch s {
	case "=":
		return LogicalOperatorEquals, nil
	case "!=":
		return LogicalOperatorDoesNotEqual, nil
	case "<":
		return LogicalOperatorLessThan, nil
	case ">":
		return LogicalOperatorGreaterThan, nil
	case "<=":
		return LogicalOperatorLessThanOrEqualTo, nil
	case ">=":
		return LogicalOperatorGreaterThanOrEqualTo, nil
	case "contains":
		return LogicalOperatorContains, nil
	case "beginsWith":
		return LogicalOperatorBeginsWith, nil
	case "endsWith":
		return LogicalOperatorEndsWith, nil
	case "doesNotContain":
		return LogicalOperatorDoesNotContain, nil
	case "doesNotBeginWith":
		return LogicalOperatorDoesNotBeginWith, nil
	case "doesNotEndWith":
		return LogicalOperatorDoesNotEndWith, nil
	case "null":
		return LogicalOperatorNull, nil
	case "notNull":
		return LogicalOperatorNotNull, nil
	case "in":
		return LogicalOperatorIn, nil
	case "notIn":
		return LogicalOperatorNotIn, nil
	case "between":
		return LogicalOperatorBetween, nil
	case "notBetween":
		return LogicalOperatorNotBetween, nil
	}
	var t LogicalOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogicalOperator) Ptr() *LogicalOperator {
	return &l
}

// - `ALL` - ALL
// - `NONE` - NONE
type LogprobsEnum string

const (
	LogprobsEnumAll  LogprobsEnum = "ALL"
	LogprobsEnumNone LogprobsEnum = "NONE"
)

func NewLogprobsEnumFromString(s string) (LogprobsEnum, error) {
	switch s {
	case "ALL":
		return LogprobsEnumAll, nil
	case "NONE":
		return LogprobsEnumNone, nil
	}
	var t LogprobsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogprobsEnum) Ptr() *LogprobsEnum {
	return &l
}

// A Node Result Event emitted from a Map Node.
type MapNodeResult struct {
	Data *MapNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MapNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MapNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler MapNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MapNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MapNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MapNodeResultData struct {
	ExecutionIds   []string            `json:"execution_ids" url:"execution_ids"`
	IterationState *IterationStateEnum `json:"iteration_state,omitempty" url:"iteration_state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MapNodeResultData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MapNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler MapNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MapNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MapNodeResultData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A Node Result Event emitted from a Merge Node.
type MergeNodeResult struct {
	Data *MergeNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MergeNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MergeNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler MergeNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MergeNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MergeNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MergeNodeResultData struct {
	PausedNodeData map[string]interface{} `json:"paused_node_data,omitempty" url:"paused_node_data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MergeNodeResultData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MergeNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler MergeNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MergeNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MergeNodeResultData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetadataFilterConfigRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetadataFilterConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataFilterConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `and` - AND
// - `or` - OR
type MetadataFilterRuleCombinator string

const (
	MetadataFilterRuleCombinatorAnd MetadataFilterRuleCombinator = "and"
	MetadataFilterRuleCombinatorOr  MetadataFilterRuleCombinator = "or"
)

func NewMetadataFilterRuleCombinatorFromString(s string) (MetadataFilterRuleCombinator, error) {
	switch s {
	case "and":
		return MetadataFilterRuleCombinatorAnd, nil
	case "or":
		return MetadataFilterRuleCombinatorOr, nil
	}
	var t MetadataFilterRuleCombinator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetadataFilterRuleCombinator) Ptr() *MetadataFilterRuleCombinator {
	return &m
}

type MetadataFilterRuleRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetadataFilterRuleRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetadataFilterRuleRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterRuleRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterRuleRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterRuleRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A Node Result Event emitted from a Metric Node.
type MetricNodeResult struct {
	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetricNodeResult) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler MetricNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetricNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricNodeResult) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `01_AI` - 01_AI
// - `AMAZON` - AMAZON
// - `ANTHROPIC` - ANTHROPIC
// - `COHERE` - COHERE
// - `ELUTHERAI` - ELUTHERAI
// - `FIREWORKS_AI` - FIREWORKS_AI
// - `GOOGLE` - GOOGLE
// - `HUGGINGFACE` - HUGGINGFACE
// - `IBM` - IBM
// - `META` - META
// - `MISTRAL_AI` - MISTRAL_AI
// - `MOSAICML` - MOSAICML
// - `NOUS_RESEARCH` - NOUS_RESEARCH
// - `OPENAI` - OPENAI
// - `OPENCHAT` - OPENCHAT
// - `OPENPIPE` - OPENPIPE
// - `TII` - TII
// - `WIZARDLM` - WIZARDLM
type MlModelDeveloper string

const (
	MlModelDeveloperOneAi        MlModelDeveloper = "01_AI"
	MlModelDeveloperAmazon       MlModelDeveloper = "AMAZON"
	MlModelDeveloperAnthropic    MlModelDeveloper = "ANTHROPIC"
	MlModelDeveloperCohere       MlModelDeveloper = "COHERE"
	MlModelDeveloperElutherai    MlModelDeveloper = "ELUTHERAI"
	MlModelDeveloperFireworksAi  MlModelDeveloper = "FIREWORKS_AI"
	MlModelDeveloperGoogle       MlModelDeveloper = "GOOGLE"
	MlModelDeveloperHuggingface  MlModelDeveloper = "HUGGINGFACE"
	MlModelDeveloperIbm          MlModelDeveloper = "IBM"
	MlModelDeveloperMeta         MlModelDeveloper = "META"
	MlModelDeveloperMistralAi    MlModelDeveloper = "MISTRAL_AI"
	MlModelDeveloperMosaicml     MlModelDeveloper = "MOSAICML"
	MlModelDeveloperNousResearch MlModelDeveloper = "NOUS_RESEARCH"
	MlModelDeveloperOpenai       MlModelDeveloper = "OPENAI"
	MlModelDeveloperOpenchat     MlModelDeveloper = "OPENCHAT"
	MlModelDeveloperOpenpipe     MlModelDeveloper = "OPENPIPE"
	MlModelDeveloperTii          MlModelDeveloper = "TII"
	MlModelDeveloperWizardlm     MlModelDeveloper = "WIZARDLM"
)

func NewMlModelDeveloperFromString(s string) (MlModelDeveloper, error) {
	switch s {
	case "01_AI":
		return MlModelDeveloperOneAi, nil
	case "AMAZON":
		return MlModelDeveloperAmazon, nil
	case "ANTHROPIC":
		return MlModelDeveloperAnthropic, nil
	case "COHERE":
		return MlModelDeveloperCohere, nil
	case "ELUTHERAI":
		return MlModelDeveloperElutherai, nil
	case "FIREWORKS_AI":
		return MlModelDeveloperFireworksAi, nil
	case "GOOGLE":
		return MlModelDeveloperGoogle, nil
	case "HUGGINGFACE":
		return MlModelDeveloperHuggingface, nil
	case "IBM":
		return MlModelDeveloperIbm, nil
	case "META":
		return MlModelDeveloperMeta, nil
	case "MISTRAL_AI":
		return MlModelDeveloperMistralAi, nil
	case "MOSAICML":
		return MlModelDeveloperMosaicml, nil
	case "NOUS_RESEARCH":
		return MlModelDeveloperNousResearch, nil
	case "OPENAI":
		return MlModelDeveloperOpenai, nil
	case "OPENCHAT":
		return MlModelDeveloperOpenchat, nil
	case "OPENPIPE":
		return MlModelDeveloperOpenpipe, nil
	case "TII":
		return MlModelDeveloperTii, nil
	case "WIZARDLM":
		return MlModelDeveloperWizardlm, nil
	}
	var t MlModelDeveloper
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelDeveloper) Ptr() *MlModelDeveloper {
	return &m
}

type MlModelDeveloperEnumValueLabel struct {
	Label string           `json:"label" url:"label"`
	Value MlModelDeveloper `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelDeveloperEnumValueLabel) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelDeveloperEnumValueLabel) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDeveloperEnumValueLabel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDeveloperEnumValueLabel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDeveloperEnumValueLabel) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelDisplayConfigLabelled struct {
	Label       string                             `json:"label" url:"label"`
	Description string                             `json:"description" url:"description"`
	Tags        []*MlModelDisplayTagEnumValueLabel `json:"tags" url:"tags"`
	// Can only be set when using an internal service token.
	DefaultDisplayPriority *float64 `json:"default_display_priority,omitempty" url:"default_display_priority,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelDisplayConfigLabelled) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelDisplayConfigLabelled) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDisplayConfigLabelled
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDisplayConfigLabelled(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDisplayConfigLabelled) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelDisplayConfigRequest struct {
	Label       string              `json:"label" url:"label"`
	Description string              `json:"description" url:"description"`
	Tags        []MlModelDisplayTag `json:"tags" url:"tags"`
	// Can only be set when using an internal service token.
	DefaultDisplayPriority *float64 `json:"default_display_priority,omitempty" url:"default_display_priority,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelDisplayConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelDisplayConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDisplayConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDisplayConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDisplayConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `TEXT` - TEXT
// - `CHAT` - CHAT
// - `OPEN_SOURCE` - OPEN_SOURCE
// - `FINETUNED` - FINETUNED
// - `NEW` - NEW
// - `ALPHA` - ALPHA
// - `BETA` - BETA
// - `DEPRECATED` - DEPRECATED
type MlModelDisplayTag string

const (
	MlModelDisplayTagText       MlModelDisplayTag = "TEXT"
	MlModelDisplayTagChat       MlModelDisplayTag = "CHAT"
	MlModelDisplayTagOpenSource MlModelDisplayTag = "OPEN_SOURCE"
	MlModelDisplayTagFinetuned  MlModelDisplayTag = "FINETUNED"
	MlModelDisplayTagNew        MlModelDisplayTag = "NEW"
	MlModelDisplayTagAlpha      MlModelDisplayTag = "ALPHA"
	MlModelDisplayTagBeta       MlModelDisplayTag = "BETA"
	MlModelDisplayTagDeprecated MlModelDisplayTag = "DEPRECATED"
)

func NewMlModelDisplayTagFromString(s string) (MlModelDisplayTag, error) {
	switch s {
	case "TEXT":
		return MlModelDisplayTagText, nil
	case "CHAT":
		return MlModelDisplayTagChat, nil
	case "OPEN_SOURCE":
		return MlModelDisplayTagOpenSource, nil
	case "FINETUNED":
		return MlModelDisplayTagFinetuned, nil
	case "NEW":
		return MlModelDisplayTagNew, nil
	case "ALPHA":
		return MlModelDisplayTagAlpha, nil
	case "BETA":
		return MlModelDisplayTagBeta, nil
	case "DEPRECATED":
		return MlModelDisplayTagDeprecated, nil
	}
	var t MlModelDisplayTag
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelDisplayTag) Ptr() *MlModelDisplayTag {
	return &m
}

type MlModelDisplayTagEnumValueLabel struct {
	Label string            `json:"label" url:"label"`
	Value MlModelDisplayTag `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelDisplayTagEnumValueLabel) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelDisplayTagEnumValueLabel) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDisplayTagEnumValueLabel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDisplayTagEnumValueLabel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDisplayTagEnumValueLabel) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelExecConfig struct {
	ModelIdentifier string                 `json:"model_identifier" url:"model_identifier"`
	BaseUrl         string                 `json:"base_url" url:"base_url"`
	Metadata        map[string]interface{} `json:"metadata" url:"metadata"`
	Features        []MlModelFeature       `json:"features" url:"features"`
	// Can only be set when using an internal service token.
	ForceSystemCredentials *bool                   `json:"force_system_credentials,omitempty" url:"force_system_credentials,omitempty"`
	TokenizerConfig        *MlModelTokenizerConfig `json:"tokenizer_config,omitempty" url:"tokenizer_config,omitempty"`
	RequestConfig          *MlModelRequestConfig   `json:"request_config,omitempty" url:"request_config,omitempty"`
	ResponseConfig         *MlModelResponseConfig  `json:"response_config,omitempty" url:"response_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelExecConfig) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelExecConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelExecConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelExecConfigRequest struct {
	ModelIdentifier string                 `json:"model_identifier" url:"model_identifier"`
	BaseUrl         string                 `json:"base_url" url:"base_url"`
	Metadata        map[string]interface{} `json:"metadata" url:"metadata"`
	Features        []MlModelFeature       `json:"features" url:"features"`
	// Can only be set when using an internal service token.
	ForceSystemCredentials *bool                          `json:"force_system_credentials,omitempty" url:"force_system_credentials,omitempty"`
	TokenizerConfig        *MlModelTokenizerConfigRequest `json:"tokenizer_config,omitempty" url:"tokenizer_config,omitempty"`
	RequestConfig          *MlModelRequestConfigRequest   `json:"request_config,omitempty" url:"request_config,omitempty"`
	ResponseConfig         *MlModelResponseConfigRequest  `json:"response_config,omitempty" url:"response_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelExecConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelExecConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelExecConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelExecConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelExecConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `CAPYBARA` - Capybara
// - `CHAT_GPT` - Chat GPT
// - `CLAUDE` - Claude
// - `COHERE` - Cohere
// - `FALCON` - Falcon
// - `GEMINI` - Gemini
// - `GRANITE` - Granite
// - `GPT3` - GPT-3
// - `FIREWORKS` - Fireworks
// - `LLAMA2` - Llama2
// - `LLAMA3` - Llama3
// - `MISTRAL` - Mistral
// - `MPT` - MPT
// - `OPENCHAT` - OpenChat
// - `PALM` - PaLM
// - `SOLAR` - Solar
// - `TITAN` - Titan
// - `WIZARD` - Wizard
// - `YI` - Yi
// - `ZEPHYR` - Zephyr
type MlModelFamily string

const (
	MlModelFamilyCapybara  MlModelFamily = "CAPYBARA"
	MlModelFamilyChatGpt   MlModelFamily = "CHAT_GPT"
	MlModelFamilyClaude    MlModelFamily = "CLAUDE"
	MlModelFamilyCohere    MlModelFamily = "COHERE"
	MlModelFamilyFalcon    MlModelFamily = "FALCON"
	MlModelFamilyGemini    MlModelFamily = "GEMINI"
	MlModelFamilyGranite   MlModelFamily = "GRANITE"
	MlModelFamilyGpt3      MlModelFamily = "GPT3"
	MlModelFamilyFireworks MlModelFamily = "FIREWORKS"
	MlModelFamilyLlama2    MlModelFamily = "LLAMA2"
	MlModelFamilyLlama3    MlModelFamily = "LLAMA3"
	MlModelFamilyMistral   MlModelFamily = "MISTRAL"
	MlModelFamilyMpt       MlModelFamily = "MPT"
	MlModelFamilyOpenchat  MlModelFamily = "OPENCHAT"
	MlModelFamilyPalm      MlModelFamily = "PALM"
	MlModelFamilySolar     MlModelFamily = "SOLAR"
	MlModelFamilyTitan     MlModelFamily = "TITAN"
	MlModelFamilyWizard    MlModelFamily = "WIZARD"
	MlModelFamilyYi        MlModelFamily = "YI"
	MlModelFamilyZephyr    MlModelFamily = "ZEPHYR"
)

func NewMlModelFamilyFromString(s string) (MlModelFamily, error) {
	switch s {
	case "CAPYBARA":
		return MlModelFamilyCapybara, nil
	case "CHAT_GPT":
		return MlModelFamilyChatGpt, nil
	case "CLAUDE":
		return MlModelFamilyClaude, nil
	case "COHERE":
		return MlModelFamilyCohere, nil
	case "FALCON":
		return MlModelFamilyFalcon, nil
	case "GEMINI":
		return MlModelFamilyGemini, nil
	case "GRANITE":
		return MlModelFamilyGranite, nil
	case "GPT3":
		return MlModelFamilyGpt3, nil
	case "FIREWORKS":
		return MlModelFamilyFireworks, nil
	case "LLAMA2":
		return MlModelFamilyLlama2, nil
	case "LLAMA3":
		return MlModelFamilyLlama3, nil
	case "MISTRAL":
		return MlModelFamilyMistral, nil
	case "MPT":
		return MlModelFamilyMpt, nil
	case "OPENCHAT":
		return MlModelFamilyOpenchat, nil
	case "PALM":
		return MlModelFamilyPalm, nil
	case "SOLAR":
		return MlModelFamilySolar, nil
	case "TITAN":
		return MlModelFamilyTitan, nil
	case "WIZARD":
		return MlModelFamilyWizard, nil
	case "YI":
		return MlModelFamilyYi, nil
	case "ZEPHYR":
		return MlModelFamilyZephyr, nil
	}
	var t MlModelFamily
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelFamily) Ptr() *MlModelFamily {
	return &m
}

type MlModelFamilyEnumValueLabel struct {
	Label string        `json:"label" url:"label"`
	Value MlModelFamily `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelFamilyEnumValueLabel) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelFamilyEnumValueLabel) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelFamilyEnumValueLabel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelFamilyEnumValueLabel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelFamilyEnumValueLabel) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `TEXT` - Text
// - `CHAT_MESSAGE_SYSTEM` - Chat Message System
// - `CHAT_MESSAGE_USER` - Chat Message User
// - `CHAT_MESSAGE_ASSISTANT` - Chat Message Assistant
// - `CHAT_MESSAGE_ASSISTANT_UNTERMINATED` - Chat Message Assistant Unterminated
// - `CHAT_MESSAGE_FUNCTION_CALL` - Chat Message Function Call
// - `CHAT_MESSAGE_IMAGE` - Chat Message Image
// - `FUNCTION_DEFINITION` - Function Definition
// - `STREAMING_SUPPORT` - Streaming Support
type MlModelFeature string

const (
	MlModelFeatureText                             MlModelFeature = "TEXT"
	MlModelFeatureChatMessageSystem                MlModelFeature = "CHAT_MESSAGE_SYSTEM"
	MlModelFeatureChatMessageUser                  MlModelFeature = "CHAT_MESSAGE_USER"
	MlModelFeatureChatMessageAssistant             MlModelFeature = "CHAT_MESSAGE_ASSISTANT"
	MlModelFeatureChatMessageAssistantUnterminated MlModelFeature = "CHAT_MESSAGE_ASSISTANT_UNTERMINATED"
	MlModelFeatureChatMessageFunctionCall          MlModelFeature = "CHAT_MESSAGE_FUNCTION_CALL"
	MlModelFeatureChatMessageImage                 MlModelFeature = "CHAT_MESSAGE_IMAGE"
	MlModelFeatureFunctionDefinition               MlModelFeature = "FUNCTION_DEFINITION"
	MlModelFeatureStreamingSupport                 MlModelFeature = "STREAMING_SUPPORT"
)

func NewMlModelFeatureFromString(s string) (MlModelFeature, error) {
	switch s {
	case "TEXT":
		return MlModelFeatureText, nil
	case "CHAT_MESSAGE_SYSTEM":
		return MlModelFeatureChatMessageSystem, nil
	case "CHAT_MESSAGE_USER":
		return MlModelFeatureChatMessageUser, nil
	case "CHAT_MESSAGE_ASSISTANT":
		return MlModelFeatureChatMessageAssistant, nil
	case "CHAT_MESSAGE_ASSISTANT_UNTERMINATED":
		return MlModelFeatureChatMessageAssistantUnterminated, nil
	case "CHAT_MESSAGE_FUNCTION_CALL":
		return MlModelFeatureChatMessageFunctionCall, nil
	case "CHAT_MESSAGE_IMAGE":
		return MlModelFeatureChatMessageImage, nil
	case "FUNCTION_DEFINITION":
		return MlModelFeatureFunctionDefinition, nil
	case "STREAMING_SUPPORT":
		return MlModelFeatureStreamingSupport, nil
	}
	var t MlModelFeature
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelFeature) Ptr() *MlModelFeature {
	return &m
}

type MlModelParameterConfig struct {
	Temperature      *OpenApiNumberProperty      `json:"temperature,omitempty" url:"temperature,omitempty"`
	MaxTokens        *OpenApiIntegerProperty     `json:"max_tokens,omitempty" url:"max_tokens,omitempty"`
	Stop             *OpenApiArrayProperty       `json:"stop,omitempty" url:"stop,omitempty"`
	TopP             *OpenApiNumberProperty      `json:"top_p,omitempty" url:"top_p,omitempty"`
	TopK             *OpenApiIntegerProperty     `json:"top_k,omitempty" url:"top_k,omitempty"`
	FrequencyPenalty *OpenApiNumberProperty      `json:"frequency_penalty,omitempty" url:"frequency_penalty,omitempty"`
	PresencePenalty  *OpenApiNumberProperty      `json:"presence_penalty,omitempty" url:"presence_penalty,omitempty"`
	LogitBias        *OpenApiObjectProperty      `json:"logit_bias,omitempty" url:"logit_bias,omitempty"`
	CustomParameters map[string]*OpenApiProperty `json:"custom_parameters,omitempty" url:"custom_parameters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelParameterConfig) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelParameterConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelParameterConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelParameterConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelParameterConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelParameterConfigRequest struct {
	Temperature      *OpenApiNumberPropertyRequest      `json:"temperature,omitempty" url:"temperature,omitempty"`
	MaxTokens        *OpenApiIntegerPropertyRequest     `json:"max_tokens,omitempty" url:"max_tokens,omitempty"`
	Stop             *OpenApiArrayPropertyRequest       `json:"stop,omitempty" url:"stop,omitempty"`
	TopP             *OpenApiNumberPropertyRequest      `json:"top_p,omitempty" url:"top_p,omitempty"`
	TopK             *OpenApiIntegerPropertyRequest     `json:"top_k,omitempty" url:"top_k,omitempty"`
	FrequencyPenalty *OpenApiNumberPropertyRequest      `json:"frequency_penalty,omitempty" url:"frequency_penalty,omitempty"`
	PresencePenalty  *OpenApiNumberPropertyRequest      `json:"presence_penalty,omitempty" url:"presence_penalty,omitempty"`
	LogitBias        *OpenApiObjectPropertyRequest      `json:"logit_bias,omitempty" url:"logit_bias,omitempty"`
	CustomParameters map[string]*OpenApiPropertyRequest `json:"custom_parameters,omitempty" url:"custom_parameters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelParameterConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelParameterConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelParameterConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelParameterConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelParameterConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// An ML Model that your Workspace has access to.
type MlModelRead struct {
	Id string `json:"id" url:"id"`
	// The unique name of the ML Model.
	Name string `json:"name" url:"name"`
	// The family of the ML Model.
	Family *MlModelFamilyEnumValueLabel `json:"family" url:"family"`
	// The organization hosting the ML Model.
	//
	// - `ANTHROPIC` - Anthropic
	// - `AWS_BEDROCK` - AWS Bedrock
	// - `AZURE_OPENAI` - Azure OpenAI
	// - `COHERE` - Cohere
	// - `CUSTOM` - Custom
	// - `FIREWORKS_AI` - Fireworks AI
	// - `GOOGLE` - Google
	// - `GOOGLE_VERTEX_AI` - Google Vertex AI
	// - `GROQ` - Groq
	// - `HUGGINGFACE` - HuggingFace
	// - `IBM_WATSONX` - IBM WatsonX
	// - `MOSAICML` - MosaicML
	// - `MYSTIC` - Mystic
	// - `OPENAI` - OpenAI
	// - `OPENPIPE` - OpenPipe
	// - `PYQ` - Pyq
	// - `REPLICATE` - Replicate
	HostedBy HostedByEnum `json:"hosted_by" url:"hosted_by"`
	// The organization that developed the ML Model.
	DevelopedBy *MlModelDeveloperEnumValueLabel `json:"developed_by" url:"developed_by"`
	// The visibility of the ML Model.
	//
	// - `DEFAULT` - Default
	// - `PUBLIC` - Public
	// - `PRIVATE` - Private
	// - `DISABLED` - Disabled
	Visibility *VisibilityEnum `json:"visibility,omitempty" url:"visibility,omitempty"`
	// Configuration for how to execute the ML Model.
	ExecConfig *MlModelExecConfig `json:"exec_config" url:"exec_config"`
	// Configuration for the ML Model's parameters.
	ParameterConfig *MlModelParameterConfig `json:"parameter_config" url:"parameter_config"`
	// Configuration for how to display the ML Model.
	DisplayConfig *MlModelDisplayConfigLabelled `json:"display_config" url:"display_config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelRead) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelRead) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRead) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelRequestAuthorizationConfig struct {
	Type MlModelRequestAuthorizationConfigTypeEnum `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelRequestAuthorizationConfig) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelRequestAuthorizationConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestAuthorizationConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestAuthorizationConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestAuthorizationConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelRequestAuthorizationConfigRequest struct {
	Type MlModelRequestAuthorizationConfigTypeEnum `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelRequestAuthorizationConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelRequestAuthorizationConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestAuthorizationConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestAuthorizationConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestAuthorizationConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `BEARER_TOKEN` - Bearer Token
// - `API_KEY` - API Key
type MlModelRequestAuthorizationConfigTypeEnum string

const (
	MlModelRequestAuthorizationConfigTypeEnumBearerToken MlModelRequestAuthorizationConfigTypeEnum = "BEARER_TOKEN"
	MlModelRequestAuthorizationConfigTypeEnumApiKey      MlModelRequestAuthorizationConfigTypeEnum = "API_KEY"
)

func NewMlModelRequestAuthorizationConfigTypeEnumFromString(s string) (MlModelRequestAuthorizationConfigTypeEnum, error) {
	switch s {
	case "BEARER_TOKEN":
		return MlModelRequestAuthorizationConfigTypeEnumBearerToken, nil
	case "API_KEY":
		return MlModelRequestAuthorizationConfigTypeEnumApiKey, nil
	}
	var t MlModelRequestAuthorizationConfigTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelRequestAuthorizationConfigTypeEnum) Ptr() *MlModelRequestAuthorizationConfigTypeEnum {
	return &m
}

type MlModelRequestConfig struct {
	Headers       map[string]*string                 `json:"headers,omitempty" url:"headers,omitempty"`
	Authorization *MlModelRequestAuthorizationConfig `json:"authorization,omitempty" url:"authorization,omitempty"`
	BodyTemplate  *string                            `json:"body_template,omitempty" url:"body_template,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelRequestConfig) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelRequestConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelRequestConfigRequest struct {
	Headers       map[string]*string                        `json:"headers,omitempty" url:"headers,omitempty"`
	Authorization *MlModelRequestAuthorizationConfigRequest `json:"authorization,omitempty" url:"authorization,omitempty"`
	BodyTemplate  *string                                   `json:"body_template,omitempty" url:"body_template,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelRequestConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelRequestConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelResponseConfig struct {
	ResultPath                *string            `json:"result_path,omitempty" url:"result_path,omitempty"`
	ResultExtractionRegex     *string            `json:"result_extraction_regex,omitempty" url:"result_extraction_regex,omitempty"`
	ResultSubstitutionRegexes map[string]*string `json:"result_substitution_regexes,omitempty" url:"result_substitution_regexes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelResponseConfig) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelResponseConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelResponseConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelResponseConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelResponseConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelResponseConfigRequest struct {
	ResultPath                *string            `json:"result_path,omitempty" url:"result_path,omitempty"`
	ResultExtractionRegex     *string            `json:"result_extraction_regex,omitempty" url:"result_extraction_regex,omitempty"`
	ResultSubstitutionRegexes map[string]*string `json:"result_substitution_regexes,omitempty" url:"result_substitution_regexes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelResponseConfigRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelResponseConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelResponseConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelResponseConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelResponseConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelTokenizerConfig struct {
	Type        string
	HuggingFace *HuggingFaceTokenizerConfig
	Tiktoken    *TikTokenTokenizerConfig
}

func (m *MlModelTokenizerConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	m.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "HUGGING_FACE":
		value := new(HuggingFaceTokenizerConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.HuggingFace = value
	case "TIKTOKEN":
		value := new(TikTokenTokenizerConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.Tiktoken = value
	}
	return nil
}

func (m MlModelTokenizerConfig) MarshalJSON() ([]byte, error) {
	if m.HuggingFace != nil {
		return core.MarshalJSONWithExtraProperty(m.HuggingFace, "type", "HUGGING_FACE")
	}
	if m.Tiktoken != nil {
		return core.MarshalJSONWithExtraProperty(m.Tiktoken, "type", "TIKTOKEN")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", m)
}

type MlModelTokenizerConfigVisitor interface {
	VisitHuggingFace(*HuggingFaceTokenizerConfig) error
	VisitTiktoken(*TikTokenTokenizerConfig) error
}

func (m *MlModelTokenizerConfig) Accept(visitor MlModelTokenizerConfigVisitor) error {
	if m.HuggingFace != nil {
		return visitor.VisitHuggingFace(m.HuggingFace)
	}
	if m.Tiktoken != nil {
		return visitor.VisitTiktoken(m.Tiktoken)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", m)
}

type MlModelTokenizerConfigRequest struct {
	Type        string
	HuggingFace *HuggingFaceTokenizerConfigRequest
	Tiktoken    *TikTokenTokenizerConfigRequest
}

func (m *MlModelTokenizerConfigRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	m.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "HUGGING_FACE":
		value := new(HuggingFaceTokenizerConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.HuggingFace = value
	case "TIKTOKEN":
		value := new(TikTokenTokenizerConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.Tiktoken = value
	}
	return nil
}

func (m MlModelTokenizerConfigRequest) MarshalJSON() ([]byte, error) {
	if m.HuggingFace != nil {
		return core.MarshalJSONWithExtraProperty(m.HuggingFace, "type", "HUGGING_FACE")
	}
	if m.Tiktoken != nil {
		return core.MarshalJSONWithExtraProperty(m.Tiktoken, "type", "TIKTOKEN")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", m)
}

type MlModelTokenizerConfigRequestVisitor interface {
	VisitHuggingFace(*HuggingFaceTokenizerConfigRequest) error
	VisitTiktoken(*TikTokenTokenizerConfigRequest) error
}

func (m *MlModelTokenizerConfigRequest) Accept(visitor MlModelTokenizerConfigRequestVisitor) error {
	if m.HuggingFace != nil {
		return visitor.VisitHuggingFace(m.HuggingFace)
	}
	if m.Tiktoken != nil {
		return visitor.VisitTiktoken(m.Tiktoken)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", m)
}

type MlModelUsage struct {
	OutputTokenCount *int `json:"output_token_count,omitempty" url:"output_token_count,omitempty"`
	InputTokenCount  *int `json:"input_token_count,omitempty" url:"input_token_count,omitempty"`
	InputCharCount   *int `json:"input_char_count,omitempty" url:"input_char_count,omitempty"`
	OutputCharCount  *int `json:"output_char_count,omitempty" url:"output_char_count,omitempty"`
	ComputeNanos     *int `json:"compute_nanos,omitempty" url:"compute_nanos,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MlModelUsage) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MlModelUsage) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelUsage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelUsage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelUsage) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Named Prompt Sandbox Scenario input value that is of type CHAT_HISTORY
type NamedScenarioInputChatHistoryVariableValueRequest struct {
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedScenarioInputChatHistoryVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedScenarioInputChatHistoryVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedScenarioInputChatHistoryVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Prompt Sandbox Scenario input value that is of type JSON
type NamedScenarioInputJsonVariableValueRequest struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedScenarioInputJsonVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedScenarioInputJsonVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedScenarioInputJsonVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedScenarioInputJsonVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedScenarioInputJsonVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedScenarioInputRequest struct {
	Type        string
	String      *NamedScenarioInputStringVariableValueRequest
	Json        *NamedScenarioInputJsonVariableValueRequest
	ChatHistory *NamedScenarioInputChatHistoryVariableValueRequest
}

func (n *NamedScenarioInputRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NamedScenarioInputStringVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "JSON":
		value := new(NamedScenarioInputJsonVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NamedScenarioInputChatHistoryVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	}
	return nil
}

func (n NamedScenarioInputRequest) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		return core.MarshalJSONWithExtraProperty(n.String, "type", "STRING")
	}
	if n.Json != nil {
		return core.MarshalJSONWithExtraProperty(n.Json, "type", "JSON")
	}
	if n.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(n.ChatHistory, "type", "CHAT_HISTORY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NamedScenarioInputRequestVisitor interface {
	VisitString(*NamedScenarioInputStringVariableValueRequest) error
	VisitJson(*NamedScenarioInputJsonVariableValueRequest) error
	VisitChatHistory(*NamedScenarioInputChatHistoryVariableValueRequest) error
}

func (n *NamedScenarioInputRequest) Accept(visitor NamedScenarioInputRequestVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

// Named Prompt Sandbox Scenario input value that is of type STRING
type NamedScenarioInputStringVariableValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedScenarioInputStringVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedScenarioInputStringVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedScenarioInputStringVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedScenarioInputStringVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedScenarioInputStringVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ARRAY
type NamedTestCaseArrayVariableValue struct {
	Value []*ArrayVellumValueItem `json:"value,omitempty" url:"value,omitempty"`
	Name  string                  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseArrayVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseArrayVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseArrayVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseArrayVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseArrayVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ARRAY
type NamedTestCaseArrayVariableValueRequest struct {
	Value []*ArrayVellumValueItemRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                         `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseArrayVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseArrayVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseArrayVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseArrayVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseArrayVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type CHAT_HISTORY
type NamedTestCaseChatHistoryVariableValue struct {
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	Name  string         `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseChatHistoryVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseChatHistoryVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseChatHistoryVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseChatHistoryVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type CHAT_HISTORY
type NamedTestCaseChatHistoryVariableValueRequest struct {
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseChatHistoryVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseChatHistoryVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ERROR
type NamedTestCaseErrorVariableValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	Name  string       `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseErrorVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseErrorVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseErrorVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseErrorVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseErrorVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type ERROR
type NamedTestCaseErrorVariableValueRequest struct {
	Value *VellumErrorRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string              `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseErrorVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseErrorVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseErrorVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseErrorVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseErrorVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type FUNCTION_CALL
type NamedTestCaseFunctionCallVariableValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	Name  string        `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseFunctionCallVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseFunctionCallVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseFunctionCallVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseFunctionCallVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseFunctionCallVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type FUNCTION_CALL
type NamedTestCaseFunctionCallVariableValueRequest struct {
	Value *FunctionCallRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string               `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseFunctionCallVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseFunctionCallVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseFunctionCallVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type JSON
type NamedTestCaseJsonVariableValue struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseJsonVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseJsonVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseJsonVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseJsonVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseJsonVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type JSON
type NamedTestCaseJsonVariableValueRequest struct {
	Value interface{} `json:"value" url:"value"`
	Name  string      `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseJsonVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseJsonVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseJsonVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseJsonVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseJsonVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type NUMBER
type NamedTestCaseNumberVariableValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseNumberVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseNumberVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseNumberVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseNumberVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseNumberVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type NUMBER
type NamedTestCaseNumberVariableValueRequest struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseNumberVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseNumberVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseNumberVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseNumberVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseNumberVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type SEARCH_RESULTS
type NamedTestCaseSearchResultsVariableValue struct {
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	Name  string          `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseSearchResultsVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseSearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseSearchResultsVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseSearchResultsVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseSearchResultsVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type SEARCH_RESULTS
type NamedTestCaseSearchResultsVariableValueRequest struct {
	Value []*SearchResultRequest `json:"value,omitempty" url:"value,omitempty"`
	Name  string                 `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseSearchResultsVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseSearchResultsVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type STRING
type NamedTestCaseStringVariableValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseStringVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseStringVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseStringVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseStringVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseStringVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Named Test Case value that is of type STRING
type NamedTestCaseStringVariableValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NamedTestCaseStringVariableValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NamedTestCaseStringVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseStringVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseStringVariableValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseStringVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseVariableValue struct {
	Type          string
	String        *NamedTestCaseStringVariableValue
	Number        *NamedTestCaseNumberVariableValue
	Json          *NamedTestCaseJsonVariableValue
	ChatHistory   *NamedTestCaseChatHistoryVariableValue
	SearchResults *NamedTestCaseSearchResultsVariableValue
	Error         *NamedTestCaseErrorVariableValue
	FunctionCall  *NamedTestCaseFunctionCallVariableValue
	Array         *NamedTestCaseArrayVariableValue
}

func (n *NamedTestCaseVariableValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NamedTestCaseStringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NamedTestCaseNumberVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NamedTestCaseJsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NamedTestCaseChatHistoryVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NamedTestCaseSearchResultsVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NamedTestCaseErrorVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	case "FUNCTION_CALL":
		value := new(NamedTestCaseFunctionCallVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.FunctionCall = value
	case "ARRAY":
		value := new(NamedTestCaseArrayVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Array = value
	}
	return nil
}

func (n NamedTestCaseVariableValue) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		return core.MarshalJSONWithExtraProperty(n.String, "type", "STRING")
	}
	if n.Number != nil {
		return core.MarshalJSONWithExtraProperty(n.Number, "type", "NUMBER")
	}
	if n.Json != nil {
		return core.MarshalJSONWithExtraProperty(n.Json, "type", "JSON")
	}
	if n.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(n.ChatHistory, "type", "CHAT_HISTORY")
	}
	if n.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(n.SearchResults, "type", "SEARCH_RESULTS")
	}
	if n.Error != nil {
		return core.MarshalJSONWithExtraProperty(n.Error, "type", "ERROR")
	}
	if n.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(n.FunctionCall, "type", "FUNCTION_CALL")
	}
	if n.Array != nil {
		return core.MarshalJSONWithExtraProperty(n.Array, "type", "ARRAY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NamedTestCaseVariableValueVisitor interface {
	VisitString(*NamedTestCaseStringVariableValue) error
	VisitNumber(*NamedTestCaseNumberVariableValue) error
	VisitJson(*NamedTestCaseJsonVariableValue) error
	VisitChatHistory(*NamedTestCaseChatHistoryVariableValue) error
	VisitSearchResults(*NamedTestCaseSearchResultsVariableValue) error
	VisitError(*NamedTestCaseErrorVariableValue) error
	VisitFunctionCall(*NamedTestCaseFunctionCallVariableValue) error
	VisitArray(*NamedTestCaseArrayVariableValue) error
}

func (n *NamedTestCaseVariableValue) Accept(visitor NamedTestCaseVariableValueVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Number != nil {
		return visitor.VisitNumber(n.Number)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	if n.SearchResults != nil {
		return visitor.VisitSearchResults(n.SearchResults)
	}
	if n.Error != nil {
		return visitor.VisitError(n.Error)
	}
	if n.FunctionCall != nil {
		return visitor.VisitFunctionCall(n.FunctionCall)
	}
	if n.Array != nil {
		return visitor.VisitArray(n.Array)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NamedTestCaseVariableValueRequest struct {
	Type          string
	String        *NamedTestCaseStringVariableValueRequest
	Number        *NamedTestCaseNumberVariableValueRequest
	Json          *NamedTestCaseJsonVariableValueRequest
	ChatHistory   *NamedTestCaseChatHistoryVariableValueRequest
	SearchResults *NamedTestCaseSearchResultsVariableValueRequest
	Error         *NamedTestCaseErrorVariableValueRequest
	FunctionCall  *NamedTestCaseFunctionCallVariableValueRequest
	Array         *NamedTestCaseArrayVariableValueRequest
}

func (n *NamedTestCaseVariableValueRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NamedTestCaseStringVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NamedTestCaseNumberVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NamedTestCaseJsonVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NamedTestCaseChatHistoryVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NamedTestCaseSearchResultsVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NamedTestCaseErrorVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	case "FUNCTION_CALL":
		value := new(NamedTestCaseFunctionCallVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.FunctionCall = value
	case "ARRAY":
		value := new(NamedTestCaseArrayVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Array = value
	}
	return nil
}

func (n NamedTestCaseVariableValueRequest) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		return core.MarshalJSONWithExtraProperty(n.String, "type", "STRING")
	}
	if n.Number != nil {
		return core.MarshalJSONWithExtraProperty(n.Number, "type", "NUMBER")
	}
	if n.Json != nil {
		return core.MarshalJSONWithExtraProperty(n.Json, "type", "JSON")
	}
	if n.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(n.ChatHistory, "type", "CHAT_HISTORY")
	}
	if n.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(n.SearchResults, "type", "SEARCH_RESULTS")
	}
	if n.Error != nil {
		return core.MarshalJSONWithExtraProperty(n.Error, "type", "ERROR")
	}
	if n.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(n.FunctionCall, "type", "FUNCTION_CALL")
	}
	if n.Array != nil {
		return core.MarshalJSONWithExtraProperty(n.Array, "type", "ARRAY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NamedTestCaseVariableValueRequestVisitor interface {
	VisitString(*NamedTestCaseStringVariableValueRequest) error
	VisitNumber(*NamedTestCaseNumberVariableValueRequest) error
	VisitJson(*NamedTestCaseJsonVariableValueRequest) error
	VisitChatHistory(*NamedTestCaseChatHistoryVariableValueRequest) error
	VisitSearchResults(*NamedTestCaseSearchResultsVariableValueRequest) error
	VisitError(*NamedTestCaseErrorVariableValueRequest) error
	VisitFunctionCall(*NamedTestCaseFunctionCallVariableValueRequest) error
	VisitArray(*NamedTestCaseArrayVariableValueRequest) error
}

func (n *NamedTestCaseVariableValueRequest) Accept(visitor NamedTestCaseVariableValueRequestVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Number != nil {
		return visitor.VisitNumber(n.Number)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	if n.SearchResults != nil {
		return visitor.VisitSearchResults(n.SearchResults)
	}
	if n.Error != nil {
		return visitor.VisitError(n.Error)
	}
	if n.FunctionCall != nil {
		return visitor.VisitFunctionCall(n.FunctionCall)
	}
	if n.Array != nil {
		return visitor.VisitArray(n.Array)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NodeInputCompiledArrayValue struct {
	NodeInputId string                    `json:"node_input_id" url:"node_input_id"`
	Key         string                    `json:"key" url:"key"`
	Value       []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledArrayValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledArrayValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledArrayValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledChatHistoryValue struct {
	NodeInputId string         `json:"node_input_id" url:"node_input_id"`
	Key         string         `json:"key" url:"key"`
	Value       []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledChatHistoryValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledChatHistoryValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledChatHistoryValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledErrorValue struct {
	NodeInputId string       `json:"node_input_id" url:"node_input_id"`
	Key         string       `json:"key" url:"key"`
	Value       *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledErrorValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledErrorValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledErrorValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledFunctionCall struct {
	NodeInputId string        `json:"node_input_id" url:"node_input_id"`
	Key         string        `json:"key" url:"key"`
	Value       *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledFunctionCall) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledFunctionCall(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledFunctionCall) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledJsonValue struct {
	NodeInputId string      `json:"node_input_id" url:"node_input_id"`
	Key         string      `json:"key" url:"key"`
	Value       interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledJsonValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledJsonValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledJsonValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledNumberValue struct {
	NodeInputId string   `json:"node_input_id" url:"node_input_id"`
	Key         string   `json:"key" url:"key"`
	Value       *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledNumberValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledNumberValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledNumberValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledSearchResultsValue struct {
	NodeInputId string          `json:"node_input_id" url:"node_input_id"`
	Key         string          `json:"key" url:"key"`
	Value       []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledSearchResultsValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledSearchResultsValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledSearchResultsValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledStringValue struct {
	NodeInputId string  `json:"node_input_id" url:"node_input_id"`
	Key         string  `json:"key" url:"key"`
	Value       *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeInputCompiledStringValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeInputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledStringValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledStringValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputVariableCompiledValue struct {
	Type          string
	String        *NodeInputCompiledStringValue
	Number        *NodeInputCompiledNumberValue
	Json          *NodeInputCompiledJsonValue
	ChatHistory   *NodeInputCompiledChatHistoryValue
	SearchResults *NodeInputCompiledSearchResultsValue
	Error         *NodeInputCompiledErrorValue
	Array         *NodeInputCompiledArrayValue
	FunctionCall  *NodeInputCompiledFunctionCall
}

func (n *NodeInputVariableCompiledValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NodeInputCompiledStringValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NodeInputCompiledNumberValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NodeInputCompiledJsonValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NodeInputCompiledChatHistoryValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NodeInputCompiledSearchResultsValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NodeInputCompiledErrorValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	case "ARRAY":
		value := new(NodeInputCompiledArrayValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Array = value
	case "FUNCTION_CALL":
		value := new(NodeInputCompiledFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.FunctionCall = value
	}
	return nil
}

func (n NodeInputVariableCompiledValue) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		return core.MarshalJSONWithExtraProperty(n.String, "type", "STRING")
	}
	if n.Number != nil {
		return core.MarshalJSONWithExtraProperty(n.Number, "type", "NUMBER")
	}
	if n.Json != nil {
		return core.MarshalJSONWithExtraProperty(n.Json, "type", "JSON")
	}
	if n.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(n.ChatHistory, "type", "CHAT_HISTORY")
	}
	if n.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(n.SearchResults, "type", "SEARCH_RESULTS")
	}
	if n.Error != nil {
		return core.MarshalJSONWithExtraProperty(n.Error, "type", "ERROR")
	}
	if n.Array != nil {
		return core.MarshalJSONWithExtraProperty(n.Array, "type", "ARRAY")
	}
	if n.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(n.FunctionCall, "type", "FUNCTION_CALL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NodeInputVariableCompiledValueVisitor interface {
	VisitString(*NodeInputCompiledStringValue) error
	VisitNumber(*NodeInputCompiledNumberValue) error
	VisitJson(*NodeInputCompiledJsonValue) error
	VisitChatHistory(*NodeInputCompiledChatHistoryValue) error
	VisitSearchResults(*NodeInputCompiledSearchResultsValue) error
	VisitError(*NodeInputCompiledErrorValue) error
	VisitArray(*NodeInputCompiledArrayValue) error
	VisitFunctionCall(*NodeInputCompiledFunctionCall) error
}

func (n *NodeInputVariableCompiledValue) Accept(visitor NodeInputVariableCompiledValueVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Number != nil {
		return visitor.VisitNumber(n.Number)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	if n.SearchResults != nil {
		return visitor.VisitSearchResults(n.SearchResults)
	}
	if n.Error != nil {
		return visitor.VisitError(n.Error)
	}
	if n.Array != nil {
		return visitor.VisitArray(n.Array)
	}
	if n.FunctionCall != nil {
		return visitor.VisitFunctionCall(n.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

// An output returned by a node that is of type ARRAY.
type NodeOutputCompiledArrayValue struct {
	Value        []*ArrayVellumValueItem       `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledArrayValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledArrayValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledArrayValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type CHAT_HISTORY.
type NodeOutputCompiledChatHistoryValue struct {
	Value        []*ChatMessage                `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledChatHistoryValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledChatHistoryValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledChatHistoryValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type ERROR.
type NodeOutputCompiledErrorValue struct {
	Value        *VellumError                  `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledErrorValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledErrorValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledErrorValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type FUNCTION_CALL.
type NodeOutputCompiledFunctionCallValue struct {
	Value        *FunctionCall                 `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledFunctionCallValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledFunctionCallValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledFunctionCallValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledFunctionCallValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledFunctionCallValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type JSON.
type NodeOutputCompiledJsonValue struct {
	Value        interface{}                   `json:"value" url:"value"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledJsonValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledJsonValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledJsonValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type NUMBER.
type NodeOutputCompiledNumberValue struct {
	Value        *float64                      `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledNumberValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledNumberValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledNumberValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type SEARCH_RESULTS.
type NodeOutputCompiledSearchResultsValue struct {
	Value        []*SearchResult               `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledSearchResultsValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledSearchResultsValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledSearchResultsValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An output returned by a node that is of type STRING.
type NodeOutputCompiledStringValue struct {
	Value        *string                       `json:"value,omitempty" url:"value,omitempty"`
	NodeOutputId string                        `json:"node_output_id" url:"node_output_id"`
	State        *WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NodeOutputCompiledStringValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NodeOutputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledStringValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledStringValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledValue struct {
	Type          string
	String        *NodeOutputCompiledStringValue
	Number        *NodeOutputCompiledNumberValue
	Json          *NodeOutputCompiledJsonValue
	ChatHistory   *NodeOutputCompiledChatHistoryValue
	SearchResults *NodeOutputCompiledSearchResultsValue
	Error         *NodeOutputCompiledErrorValue
	Array         *NodeOutputCompiledArrayValue
	FunctionCall  *NodeOutputCompiledFunctionCallValue
}

func (n *NodeOutputCompiledValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NodeOutputCompiledStringValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NodeOutputCompiledNumberValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NodeOutputCompiledJsonValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NodeOutputCompiledChatHistoryValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NodeOutputCompiledSearchResultsValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NodeOutputCompiledErrorValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	case "ARRAY":
		value := new(NodeOutputCompiledArrayValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Array = value
	case "FUNCTION_CALL":
		value := new(NodeOutputCompiledFunctionCallValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.FunctionCall = value
	}
	return nil
}

func (n NodeOutputCompiledValue) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		return core.MarshalJSONWithExtraProperty(n.String, "type", "STRING")
	}
	if n.Number != nil {
		return core.MarshalJSONWithExtraProperty(n.Number, "type", "NUMBER")
	}
	if n.Json != nil {
		return core.MarshalJSONWithExtraProperty(n.Json, "type", "JSON")
	}
	if n.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(n.ChatHistory, "type", "CHAT_HISTORY")
	}
	if n.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(n.SearchResults, "type", "SEARCH_RESULTS")
	}
	if n.Error != nil {
		return core.MarshalJSONWithExtraProperty(n.Error, "type", "ERROR")
	}
	if n.Array != nil {
		return core.MarshalJSONWithExtraProperty(n.Array, "type", "ARRAY")
	}
	if n.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(n.FunctionCall, "type", "FUNCTION_CALL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NodeOutputCompiledValueVisitor interface {
	VisitString(*NodeOutputCompiledStringValue) error
	VisitNumber(*NodeOutputCompiledNumberValue) error
	VisitJson(*NodeOutputCompiledJsonValue) error
	VisitChatHistory(*NodeOutputCompiledChatHistoryValue) error
	VisitSearchResults(*NodeOutputCompiledSearchResultsValue) error
	VisitError(*NodeOutputCompiledErrorValue) error
	VisitArray(*NodeOutputCompiledArrayValue) error
	VisitFunctionCall(*NodeOutputCompiledFunctionCallValue) error
}

func (n *NodeOutputCompiledValue) Accept(visitor NodeOutputCompiledValueVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Number != nil {
		return visitor.VisitNumber(n.Number)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	if n.SearchResults != nil {
		return visitor.VisitSearchResults(n.SearchResults)
	}
	if n.Error != nil {
		return visitor.VisitError(n.Error)
	}
	if n.Array != nil {
		return visitor.VisitArray(n.Array)
	}
	if n.FunctionCall != nil {
		return visitor.VisitFunctionCall(n.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NormalizedLogProbs struct {
	Tokens     []*NormalizedTokenLogProbs `json:"tokens" url:"tokens"`
	Likelihood *float64                   `json:"likelihood,omitempty" url:"likelihood,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NormalizedLogProbs) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NormalizedLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedLogProbs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NormalizedTokenLogProbs struct {
	Token       string              `json:"token" url:"token"`
	Logprob     *float64            `json:"logprob,omitempty" url:"logprob,omitempty"`
	TopLogprobs map[string]*float64 `json:"top_logprobs,omitempty" url:"top_logprobs,omitempty"`
	TextOffset  int                 `json:"text_offset" url:"text_offset"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NormalizedTokenLogProbs) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NormalizedTokenLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedTokenLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedTokenLogProbs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedTokenLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NumberVariableValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVariableValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NumberVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NumberVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A value representing a number.
type NumberVellumValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVellumValue) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NumberVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NumberVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVellumValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// A value representing a number.
type NumberVellumValueRequest struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NumberVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NumberVellumValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NumberVellumValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NumberVellumValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVellumValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Configuration for using an OpenAI vectorizer.
type OpenAiVectorizerConfig struct {
	AddOpenaiApiKey *AddOpenaiApiKeyEnum `json:"add_openai_api_key,omitempty" url:"add_openai_api_key,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerConfig) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerConfig) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Configuration for using an OpenAI vectorizer.
type OpenAiVectorizerConfigRequest struct {
	AddOpenaiApiKey *AddOpenaiApiKeyEnum `json:"add_openai_api_key,omitempty" url:"add_openai_api_key,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerConfigRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerConfigRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-large.
type OpenAiVectorizerTextEmbedding3Large struct {
	Config *OpenAiVectorizerConfig `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3Large) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3Large) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerTextEmbedding3Large
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3Large(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3Large) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-large.
type OpenAiVectorizerTextEmbedding3LargeRequest struct {
	Config *OpenAiVectorizerConfigRequest `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerTextEmbedding3LargeRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3LargeRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3LargeRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-small.
type OpenAiVectorizerTextEmbedding3Small struct {
	Config *OpenAiVectorizerConfig `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3Small) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3Small) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerTextEmbedding3Small
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3Small(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3Small) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-3-small.
type OpenAiVectorizerTextEmbedding3SmallRequest struct {
	Config *OpenAiVectorizerConfigRequest `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerTextEmbedding3SmallRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbedding3SmallRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbedding3SmallRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-ada-002.
type OpenAiVectorizerTextEmbeddingAda002 struct {
	Config *OpenAiVectorizerConfig `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbeddingAda002) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbeddingAda002) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerTextEmbeddingAda002
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbeddingAda002(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbeddingAda002) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// OpenAI vectorizer for text-embedding-ada-002.
type OpenAiVectorizerTextEmbeddingAda002Request struct {
	Config *OpenAiVectorizerConfigRequest `json:"config" url:"config"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenAiVectorizerTextEmbeddingAda002Request
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenAiVectorizerTextEmbeddingAda002Request(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenAiVectorizerTextEmbeddingAda002Request) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'array'
type OpenApiArrayProperty struct {
	MinItems    *int               `json:"min_items,omitempty" url:"min_items,omitempty"`
	MaxItems    *int               `json:"max_items,omitempty" url:"max_items,omitempty"`
	UniqueItems *bool              `json:"unique_items,omitempty" url:"unique_items,omitempty"`
	Items       *OpenApiProperty   `json:"items" url:"items"`
	PrefixItems []*OpenApiProperty `json:"prefix_items,omitempty" url:"prefix_items,omitempty"`
	Contains    *OpenApiProperty   `json:"contains,omitempty" url:"contains,omitempty"`
	MinContains *int               `json:"min_contains,omitempty" url:"min_contains,omitempty"`
	MaxContains *int               `json:"max_contains,omitempty" url:"max_contains,omitempty"`
	Default     []interface{}      `json:"default,omitempty" url:"default,omitempty"`
	Title       *string            `json:"title,omitempty" url:"title,omitempty"`
	Description *string            `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiArrayProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiArrayProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiArrayProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiArrayProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiArrayProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'array'
type OpenApiArrayPropertyRequest struct {
	MinItems    *int                      `json:"min_items,omitempty" url:"min_items,omitempty"`
	MaxItems    *int                      `json:"max_items,omitempty" url:"max_items,omitempty"`
	UniqueItems *bool                     `json:"unique_items,omitempty" url:"unique_items,omitempty"`
	Items       *OpenApiPropertyRequest   `json:"items" url:"items"`
	PrefixItems []*OpenApiPropertyRequest `json:"prefix_items,omitempty" url:"prefix_items,omitempty"`
	Contains    *OpenApiPropertyRequest   `json:"contains,omitempty" url:"contains,omitempty"`
	MinContains *int                      `json:"min_contains,omitempty" url:"min_contains,omitempty"`
	MaxContains *int                      `json:"max_contains,omitempty" url:"max_contains,omitempty"`
	Default     []interface{}             `json:"default,omitempty" url:"default,omitempty"`
	Title       *string                   `json:"title,omitempty" url:"title,omitempty"`
	Description *string                   `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiArrayPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiArrayPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiArrayPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiArrayPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiArrayPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'boolean'
type OpenApiBooleanProperty struct {
	Default     *bool   `json:"default,omitempty" url:"default,omitempty"`
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiBooleanProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiBooleanProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiBooleanProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiBooleanProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiBooleanProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'boolean'
type OpenApiBooleanPropertyRequest struct {
	Default     *bool   `json:"default,omitempty" url:"default,omitempty"`
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiBooleanPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiBooleanPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiBooleanPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiBooleanPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiBooleanPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'const'
type OpenApiConstProperty struct {
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Const       string  `json:"const" url:"const"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiConstProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiConstProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiConstProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiConstProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiConstProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'const'
type OpenApiConstPropertyRequest struct {
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Const       string  `json:"const" url:"const"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiConstPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiConstPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiConstPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiConstPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiConstPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'integer'
type OpenApiIntegerProperty struct {
	Minimum          *int    `json:"minimum,omitempty" url:"minimum,omitempty"`
	Maximum          *int    `json:"maximum,omitempty" url:"maximum,omitempty"`
	ExclusiveMinimum *bool   `json:"exclusive_minimum,omitempty" url:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool   `json:"exclusive_maximum,omitempty" url:"exclusive_maximum,omitempty"`
	Default          *int    `json:"default,omitempty" url:"default,omitempty"`
	Title            *string `json:"title,omitempty" url:"title,omitempty"`
	Description      *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiIntegerProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiIntegerProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiIntegerProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiIntegerProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiIntegerProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'integer'
type OpenApiIntegerPropertyRequest struct {
	Minimum          *int    `json:"minimum,omitempty" url:"minimum,omitempty"`
	Maximum          *int    `json:"maximum,omitempty" url:"maximum,omitempty"`
	ExclusiveMinimum *bool   `json:"exclusive_minimum,omitempty" url:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool   `json:"exclusive_maximum,omitempty" url:"exclusive_maximum,omitempty"`
	Default          *int    `json:"default,omitempty" url:"default,omitempty"`
	Title            *string `json:"title,omitempty" url:"title,omitempty"`
	Description      *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiIntegerPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiIntegerPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiIntegerPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiIntegerPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiIntegerPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'number'
type OpenApiNumberProperty struct {
	Minimum          *float64 `json:"minimum,omitempty" url:"minimum,omitempty"`
	Maximum          *float64 `json:"maximum,omitempty" url:"maximum,omitempty"`
	Format           *string  `json:"format,omitempty" url:"format,omitempty"`
	ExclusiveMinimum *bool    `json:"exclusive_minimum,omitempty" url:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool    `json:"exclusive_maximum,omitempty" url:"exclusive_maximum,omitempty"`
	Default          *float64 `json:"default,omitempty" url:"default,omitempty"`
	Title            *string  `json:"title,omitempty" url:"title,omitempty"`
	Description      *string  `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiNumberProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiNumberProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiNumberProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiNumberProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiNumberProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'number'
type OpenApiNumberPropertyRequest struct {
	Minimum          *float64 `json:"minimum,omitempty" url:"minimum,omitempty"`
	Maximum          *float64 `json:"maximum,omitempty" url:"maximum,omitempty"`
	Format           *string  `json:"format,omitempty" url:"format,omitempty"`
	ExclusiveMinimum *bool    `json:"exclusive_minimum,omitempty" url:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool    `json:"exclusive_maximum,omitempty" url:"exclusive_maximum,omitempty"`
	Default          *float64 `json:"default,omitempty" url:"default,omitempty"`
	Title            *string  `json:"title,omitempty" url:"title,omitempty"`
	Description      *string  `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiNumberPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiNumberPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiNumberPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiNumberPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiNumberPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'object'
type OpenApiObjectProperty struct {
	Properties           map[string]*OpenApiProperty `json:"properties,omitempty" url:"properties,omitempty"`
	Required             []string                    `json:"required,omitempty" url:"required,omitempty"`
	MinProperties        *int                        `json:"min_properties,omitempty" url:"min_properties,omitempty"`
	MaxProperties        *int                        `json:"max_properties,omitempty" url:"max_properties,omitempty"`
	PropertyNames        *OpenApiProperty            `json:"property_names,omitempty" url:"property_names,omitempty"`
	AdditionalProperties *OpenApiProperty            `json:"additional_properties,omitempty" url:"additional_properties,omitempty"`
	PatternProperties    map[string]*OpenApiProperty `json:"pattern_properties,omitempty" url:"pattern_properties,omitempty"`
	Default              map[string]interface{}      `json:"default,omitempty" url:"default,omitempty"`
	Title                *string                     `json:"title,omitempty" url:"title,omitempty"`
	Description          *string                     `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiObjectProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiObjectProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiObjectProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiObjectProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiObjectProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'object'
type OpenApiObjectPropertyRequest struct {
	Properties           map[string]*OpenApiPropertyRequest `json:"properties,omitempty" url:"properties,omitempty"`
	Required             []string                           `json:"required,omitempty" url:"required,omitempty"`
	MinProperties        *int                               `json:"min_properties,omitempty" url:"min_properties,omitempty"`
	MaxProperties        *int                               `json:"max_properties,omitempty" url:"max_properties,omitempty"`
	PropertyNames        *OpenApiPropertyRequest            `json:"property_names,omitempty" url:"property_names,omitempty"`
	AdditionalProperties *OpenApiPropertyRequest            `json:"additional_properties,omitempty" url:"additional_properties,omitempty"`
	PatternProperties    map[string]*OpenApiPropertyRequest `json:"pattern_properties,omitempty" url:"pattern_properties,omitempty"`
	Default              map[string]interface{}             `json:"default,omitempty" url:"default,omitempty"`
	Title                *string                            `json:"title,omitempty" url:"title,omitempty"`
	Description          *string                            `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiObjectPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiObjectPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiObjectPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiObjectPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiObjectPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'oneOf'
type OpenApiOneOfProperty struct {
	OneOf       []*OpenApiProperty `json:"oneOf" url:"oneOf"`
	Title       *string            `json:"title,omitempty" url:"title,omitempty"`
	Description *string            `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiOneOfProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiOneOfProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiOneOfProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiOneOfProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiOneOfProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'oneOf'
type OpenApiOneOfPropertyRequest struct {
	OneOf       []*OpenApiPropertyRequest `json:"oneOf" url:"oneOf"`
	Title       *string                   `json:"title,omitempty" url:"title,omitempty"`
	Description *string                   `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiOneOfPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiOneOfPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiOneOfPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiOneOfPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiOneOfPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OpenApiProperty struct {
	Type    string
	Array   *OpenApiArrayProperty
	Object  *OpenApiObjectProperty
	Integer *OpenApiIntegerProperty
	Number  *OpenApiNumberProperty
	String  *OpenApiStringProperty
	Boolean *OpenApiBooleanProperty
	OneOf   *OpenApiOneOfProperty
	Const   *OpenApiConstProperty
	Ref     *OpenApiRefProperty
}

func (o *OpenApiProperty) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	o.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "array":
		value := new(OpenApiArrayProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Array = value
	case "object":
		value := new(OpenApiObjectProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Object = value
	case "integer":
		value := new(OpenApiIntegerProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Integer = value
	case "number":
		value := new(OpenApiNumberProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Number = value
	case "string":
		value := new(OpenApiStringProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.String = value
	case "boolean":
		value := new(OpenApiBooleanProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Boolean = value
	case "oneOf":
		value := new(OpenApiOneOfProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.OneOf = value
	case "const":
		value := new(OpenApiConstProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Const = value
	case "ref":
		value := new(OpenApiRefProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Ref = value
	}
	return nil
}

func (o OpenApiProperty) MarshalJSON() ([]byte, error) {
	if o.Array != nil {
		return core.MarshalJSONWithExtraProperty(o.Array, "type", "array")
	}
	if o.Object != nil {
		return core.MarshalJSONWithExtraProperty(o.Object, "type", "object")
	}
	if o.Integer != nil {
		return core.MarshalJSONWithExtraProperty(o.Integer, "type", "integer")
	}
	if o.Number != nil {
		return core.MarshalJSONWithExtraProperty(o.Number, "type", "number")
	}
	if o.String != nil {
		return core.MarshalJSONWithExtraProperty(o.String, "type", "string")
	}
	if o.Boolean != nil {
		return core.MarshalJSONWithExtraProperty(o.Boolean, "type", "boolean")
	}
	if o.OneOf != nil {
		return core.MarshalJSONWithExtraProperty(o.OneOf, "type", "oneOf")
	}
	if o.Const != nil {
		return core.MarshalJSONWithExtraProperty(o.Const, "type", "const")
	}
	if o.Ref != nil {
		return core.MarshalJSONWithExtraProperty(o.Ref, "type", "ref")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", o)
}

type OpenApiPropertyVisitor interface {
	VisitArray(*OpenApiArrayProperty) error
	VisitObject(*OpenApiObjectProperty) error
	VisitInteger(*OpenApiIntegerProperty) error
	VisitNumber(*OpenApiNumberProperty) error
	VisitString(*OpenApiStringProperty) error
	VisitBoolean(*OpenApiBooleanProperty) error
	VisitOneOf(*OpenApiOneOfProperty) error
	VisitConst(*OpenApiConstProperty) error
	VisitRef(*OpenApiRefProperty) error
}

func (o *OpenApiProperty) Accept(visitor OpenApiPropertyVisitor) error {
	if o.Array != nil {
		return visitor.VisitArray(o.Array)
	}
	if o.Object != nil {
		return visitor.VisitObject(o.Object)
	}
	if o.Integer != nil {
		return visitor.VisitInteger(o.Integer)
	}
	if o.Number != nil {
		return visitor.VisitNumber(o.Number)
	}
	if o.String != nil {
		return visitor.VisitString(o.String)
	}
	if o.Boolean != nil {
		return visitor.VisitBoolean(o.Boolean)
	}
	if o.OneOf != nil {
		return visitor.VisitOneOf(o.OneOf)
	}
	if o.Const != nil {
		return visitor.VisitConst(o.Const)
	}
	if o.Ref != nil {
		return visitor.VisitRef(o.Ref)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", o)
}

type OpenApiPropertyRequest struct {
	Type    string
	Array   *OpenApiArrayPropertyRequest
	Object  *OpenApiObjectPropertyRequest
	Integer *OpenApiIntegerPropertyRequest
	Number  *OpenApiNumberPropertyRequest
	String  *OpenApiStringPropertyRequest
	Boolean *OpenApiBooleanPropertyRequest
	OneOf   *OpenApiOneOfPropertyRequest
	Const   *OpenApiConstPropertyRequest
	Ref     *OpenApiRefPropertyRequest
}

func (o *OpenApiPropertyRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	o.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "array":
		value := new(OpenApiArrayPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Array = value
	case "object":
		value := new(OpenApiObjectPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Object = value
	case "integer":
		value := new(OpenApiIntegerPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Integer = value
	case "number":
		value := new(OpenApiNumberPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Number = value
	case "string":
		value := new(OpenApiStringPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.String = value
	case "boolean":
		value := new(OpenApiBooleanPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Boolean = value
	case "oneOf":
		value := new(OpenApiOneOfPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.OneOf = value
	case "const":
		value := new(OpenApiConstPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Const = value
	case "ref":
		value := new(OpenApiRefPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Ref = value
	}
	return nil
}

func (o OpenApiPropertyRequest) MarshalJSON() ([]byte, error) {
	if o.Array != nil {
		return core.MarshalJSONWithExtraProperty(o.Array, "type", "array")
	}
	if o.Object != nil {
		return core.MarshalJSONWithExtraProperty(o.Object, "type", "object")
	}
	if o.Integer != nil {
		return core.MarshalJSONWithExtraProperty(o.Integer, "type", "integer")
	}
	if o.Number != nil {
		return core.MarshalJSONWithExtraProperty(o.Number, "type", "number")
	}
	if o.String != nil {
		return core.MarshalJSONWithExtraProperty(o.String, "type", "string")
	}
	if o.Boolean != nil {
		return core.MarshalJSONWithExtraProperty(o.Boolean, "type", "boolean")
	}
	if o.OneOf != nil {
		return core.MarshalJSONWithExtraProperty(o.OneOf, "type", "oneOf")
	}
	if o.Const != nil {
		return core.MarshalJSONWithExtraProperty(o.Const, "type", "const")
	}
	if o.Ref != nil {
		return core.MarshalJSONWithExtraProperty(o.Ref, "type", "ref")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", o)
}

type OpenApiPropertyRequestVisitor interface {
	VisitArray(*OpenApiArrayPropertyRequest) error
	VisitObject(*OpenApiObjectPropertyRequest) error
	VisitInteger(*OpenApiIntegerPropertyRequest) error
	VisitNumber(*OpenApiNumberPropertyRequest) error
	VisitString(*OpenApiStringPropertyRequest) error
	VisitBoolean(*OpenApiBooleanPropertyRequest) error
	VisitOneOf(*OpenApiOneOfPropertyRequest) error
	VisitConst(*OpenApiConstPropertyRequest) error
	VisitRef(*OpenApiRefPropertyRequest) error
}

func (o *OpenApiPropertyRequest) Accept(visitor OpenApiPropertyRequestVisitor) error {
	if o.Array != nil {
		return visitor.VisitArray(o.Array)
	}
	if o.Object != nil {
		return visitor.VisitObject(o.Object)
	}
	if o.Integer != nil {
		return visitor.VisitInteger(o.Integer)
	}
	if o.Number != nil {
		return visitor.VisitNumber(o.Number)
	}
	if o.String != nil {
		return visitor.VisitString(o.String)
	}
	if o.Boolean != nil {
		return visitor.VisitBoolean(o.Boolean)
	}
	if o.OneOf != nil {
		return visitor.VisitOneOf(o.OneOf)
	}
	if o.Const != nil {
		return visitor.VisitConst(o.Const)
	}
	if o.Ref != nil {
		return visitor.VisitRef(o.Ref)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", o)
}

// An OpenAPI specification of a property that is a URI-reference to another schema
type OpenApiRefProperty struct {
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Ref         string  `json:"ref" url:"ref"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiRefProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiRefProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiRefProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiRefProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiRefProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property that is a URI-reference to another schema
type OpenApiRefPropertyRequest struct {
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Ref         string  `json:"ref" url:"ref"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiRefPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiRefPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiRefPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiRefPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiRefPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'string'
type OpenApiStringProperty struct {
	MinLength   *int    `json:"min_length,omitempty" url:"min_length,omitempty"`
	MaxLength   *int    `json:"max_length,omitempty" url:"max_length,omitempty"`
	Pattern     *string `json:"pattern,omitempty" url:"pattern,omitempty"`
	Format      *string `json:"format,omitempty" url:"format,omitempty"`
	Default     *string `json:"default,omitempty" url:"default,omitempty"`
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiStringProperty) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiStringProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiStringProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiStringProperty(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiStringProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a property with type 'string'
type OpenApiStringPropertyRequest struct {
	MinLength   *int    `json:"min_length,omitempty" url:"min_length,omitempty"`
	MaxLength   *int    `json:"max_length,omitempty" url:"max_length,omitempty"`
	Pattern     *string `json:"pattern,omitempty" url:"pattern,omitempty"`
	Format      *string `json:"format,omitempty" url:"format,omitempty"`
	Default     *string `json:"default,omitempty" url:"default,omitempty"`
	Title       *string `json:"title,omitempty" url:"title,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OpenApiStringPropertyRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OpenApiStringPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiStringPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiStringPropertyRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiStringPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PaginatedDocumentIndexReadList struct {
	Count    *int                 `json:"count,omitempty" url:"count,omitempty"`
	Next     *string              `json:"next,omitempty" url:"next,omitempty"`
	Previous *string              `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*DocumentIndexRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedDocumentIndexReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedDocumentIndexReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedDocumentIndexReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedDocumentIndexReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedDocumentIndexReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedMlModelReadList struct {
	Count    *int           `json:"count,omitempty" url:"count,omitempty"`
	Next     *string        `json:"next,omitempty" url:"next,omitempty"`
	Previous *string        `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*MlModelRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedMlModelReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedMlModelReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedMlModelReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedMlModelReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedMlModelReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimDeploymentReadList struct {
	Count    *int                  `json:"count,omitempty" url:"count,omitempty"`
	Next     *string               `json:"next,omitempty" url:"next,omitempty"`
	Previous *string               `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimDeploymentRead `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimDeploymentReadList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimDeploymentReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimDeploymentReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimDeploymentReadList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimDeploymentReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimDocumentList struct {
	Count    *int            `json:"count,omitempty" url:"count,omitempty"`
	Next     *string         `json:"next,omitempty" url:"next,omitempty"`
	Previous *string         `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimDocument `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimDocumentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimDocumentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimDocumentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimDocumentList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimDocumentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimWorkflowDeploymentList struct {
	Count    *int                      `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimWorkflowDeployment `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimWorkflowDeploymentList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimWorkflowDeploymentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimWorkflowDeploymentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimWorkflowDeploymentList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimWorkflowDeploymentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTestSuiteRunExecutionList struct {
	Count    int                      `json:"count" url:"count"`
	Next     *string                  `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                  `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TestSuiteRunExecution `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedTestSuiteRunExecutionList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTestSuiteRunExecutionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTestSuiteRunExecutionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTestSuiteRunExecutionList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTestSuiteRunExecutionList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTestSuiteTestCaseList struct {
	Count    int                  `json:"count" url:"count"`
	Next     *string              `json:"next,omitempty" url:"next,omitempty"`
	Previous *string              `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TestSuiteTestCase `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedTestSuiteTestCaseList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedTestSuiteTestCaseList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTestSuiteTestCaseList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTestSuiteTestCaseList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTestSuiteTestCaseList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The source of a search result from a PDF document.
type PdfSearchResultMetaSource struct {
	// The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.
	StartPageNum *int `json:"start_page_num,omitempty" url:"start_page_num,omitempty"`
	// The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.
	EndPageNum *int `json:"end_page_num,omitempty" url:"end_page_num,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PdfSearchResultMetaSource) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PdfSearchResultMetaSource) UnmarshalJSON(data []byte) error {
	type unmarshaler PdfSearchResultMetaSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PdfSearchResultMetaSource(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PdfSearchResultMetaSource) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The source of a search result from a PDF document.
type PdfSearchResultMetaSourceRequest struct {
	// The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.
	StartPageNum *int `json:"start_page_num,omitempty" url:"start_page_num,omitempty"`
	// The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.
	EndPageNum *int `json:"end_page_num,omitempty" url:"end_page_num,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PdfSearchResultMetaSourceRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PdfSearchResultMetaSourceRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PdfSearchResultMetaSourceRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PdfSearchResultMetaSourceRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PdfSearchResultMetaSourceRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// - `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
// - `INVALID_FILE` - Invalid File
type ProcessingFailureReasonEnum string

const (
	ProcessingFailureReasonEnumExceededCharacterLimit ProcessingFailureReasonEnum = "EXCEEDED_CHARACTER_LIMIT"
	ProcessingFailureReasonEnumInvalidFile            ProcessingFailureReasonEnum = "INVALID_FILE"
)

func NewProcessingFailureReasonEnumFromString(s string) (ProcessingFailureReasonEnum, error) {
	switch s {
	case "EXCEEDED_CHARACTER_LIMIT":
		return ProcessingFailureReasonEnumExceededCharacterLimit, nil
	case "INVALID_FILE":
		return ProcessingFailureReasonEnumInvalidFile, nil
	}
	var t ProcessingFailureReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingFailureReasonEnum) Ptr() *ProcessingFailureReasonEnum {
	return &p
}

// - `QUEUED` - Queued
// - `PROCESSING` - Processing
// - `PROCESSED` - Processed
// - `FAILED` - Failed
type ProcessingStateEnum string

const (
	ProcessingStateEnumQueued     ProcessingStateEnum = "QUEUED"
	ProcessingStateEnumProcessing ProcessingStateEnum = "PROCESSING"
	ProcessingStateEnumProcessed  ProcessingStateEnum = "PROCESSED"
	ProcessingStateEnumFailed     ProcessingStateEnum = "FAILED"
)

func NewProcessingStateEnumFromString(s string) (ProcessingStateEnum, error) {
	switch s {
	case "QUEUED":
		return ProcessingStateEnumQueued, nil
	case "PROCESSING":
		return ProcessingStateEnumProcessing, nil
	case "PROCESSED":
		return ProcessingStateEnumProcessed, nil
	case "FAILED":
		return ProcessingStateEnumFailed, nil
	}
	var t ProcessingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingStateEnum) Ptr() *ProcessingStateEnum {
	return &p
}

type PromptDeploymentExpandMetaRequestRequest struct {
	// If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`
	// If enabled, the response will include model host usage tracking. This may increase latency for some model hosts.
	Usage *bool `json:"usage,omitempty" url:"usage,omitempty"`
	// If enabled, the response will include the reason provided by the model for why the execution finished.
	FinishReason *bool `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	// If enabled, the response will include the time in nanoseconds it took to execute the Prompt Deployment.
	Latency *bool `json:"latency,omitempty" url:"latency,omitempty"`
	// If enabled, the response will include the release tag of the Prompt Deployment.
	DeploymentReleaseTag *bool `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	// If enabled, the response will include the ID of the Prompt Version backing the deployment.
	PromptVersionId *bool `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptDeploymentExpandMetaRequestRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptDeploymentExpandMetaRequestRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptDeploymentExpandMetaRequestRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptDeploymentExpandMetaRequestRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptDeploymentExpandMetaRequestRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptDeploymentInputRequest struct {
	Type        string
	String      *StringInputRequest
	Json        *JsonInputRequest
	ChatHistory *ChatHistoryInputRequest
}

func (p *PromptDeploymentInputRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.String = value
	case "JSON":
		value := new(JsonInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Json = value
	case "CHAT_HISTORY":
		value := new(ChatHistoryInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.ChatHistory = value
	}
	return nil
}

func (p PromptDeploymentInputRequest) MarshalJSON() ([]byte, error) {
	if p.String != nil {
		return core.MarshalJSONWithExtraProperty(p.String, "type", "STRING")
	}
	if p.Json != nil {
		return core.MarshalJSONWithExtraProperty(p.Json, "type", "JSON")
	}
	if p.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(p.ChatHistory, "type", "CHAT_HISTORY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PromptDeploymentInputRequestVisitor interface {
	VisitString(*StringInputRequest) error
	VisitJson(*JsonInputRequest) error
	VisitChatHistory(*ChatHistoryInputRequest) error
}

func (p *PromptDeploymentInputRequest) Accept(visitor PromptDeploymentInputRequestVisitor) error {
	if p.String != nil {
		return visitor.VisitString(p.String)
	}
	if p.Json != nil {
		return visitor.VisitJson(p.Json)
	}
	if p.ChatHistory != nil {
		return visitor.VisitChatHistory(p.ChatHistory)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type PromptExecutionMeta struct {
	ModelName            *string           `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int              `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string           `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string           `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`
	FinishReason         *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	Usage                *MlModelUsage     `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptExecutionMeta) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type PromptNodeExecutionMeta struct {
	Usage *MlModelUsage `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeExecutionMeta) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeExecutionMeta) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A Node Result Event emitted from a Prompt Node.
type PromptNodeResult struct {
	Data *PromptNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeResult) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResult) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptNodeResultData struct {
	ExecutionMeta *PromptNodeExecutionMeta `json:"execution_meta,omitempty" url:"execution_meta,omitempty"`
	OutputId      string                   `json:"output_id" url:"output_id"`
	ArrayOutputId *string                  `json:"array_output_id,omitempty" url:"array_output_id,omitempty"`
	ExecutionId   *string                  `json:"execution_id,omitempty" url:"execution_id,omitempty"`
	Text          *string                  `json:"text,omitempty" url:"text,omitempty"`
	Delta         *string                  `json:"delta,omitempty" url:"delta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PromptNodeResultData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResultData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptOutput struct {
	Type         string
	String       *StringVellumValue
	Json         *JsonVellumValue
	Error        *ErrorVellumValue
	FunctionCall *FunctionCallVellumValue
}

func (p *PromptOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.String = value
	case "JSON":
		value := new(JsonVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Json = value
	case "ERROR":
		value := new(ErrorVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Error = value
	case "FUNCTION_CALL":
		value := new(FunctionCallVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.FunctionCall = value
	}
	return nil
}

func (p PromptOutput) MarshalJSON() ([]byte, error) {
	if p.String != nil {
		return core.MarshalJSONWithExtraProperty(p.String, "type", "STRING")
	}
	if p.Json != nil {
		return core.MarshalJSONWithExtraProperty(p.Json, "type", "JSON")
	}
	if p.Error != nil {
		return core.MarshalJSONWithExtraProperty(p.Error, "type", "ERROR")
	}
	if p.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(p.FunctionCall, "type", "FUNCTION_CALL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PromptOutputVisitor interface {
	VisitString(*StringVellumValue) error
	VisitJson(*JsonVellumValue) error
	VisitError(*ErrorVellumValue) error
	VisitFunctionCall(*FunctionCallVellumValue) error
}

func (p *PromptOutput) Accept(visitor PromptOutputVisitor) error {
	if p.String != nil {
		return visitor.VisitString(p.String)
	}
	if p.Json != nil {
		return visitor.VisitJson(p.Json)
	}
	if p.Error != nil {
		return visitor.VisitError(p.Error)
	}
	if p.FunctionCall != nil {
		return visitor.VisitFunctionCall(p.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

type RawPromptExecutionOverridesRequest struct {
	Body map[string]interface{} `json:"body,omitempty" url:"body,omitempty"`
	// The raw headers to send to the model host.
	Headers map[string]*string `json:"headers,omitempty" url:"headers,omitempty"`
	// The raw URL to send to the model host.
	Url *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RawPromptExecutionOverridesRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawPromptExecutionOverridesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RawPromptExecutionOverridesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawPromptExecutionOverridesRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawPromptExecutionOverridesRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Configuration for Reducto chunking
type ReductoChunkerConfig struct {
	CharacterLimit *int `json:"character_limit,omitempty" url:"character_limit,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunkerConfig) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ReductoChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReductoChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunkerConfig) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Configuration for Reducto chunking
type ReductoChunkerConfigRequest struct {
	CharacterLimit *int `json:"character_limit,omitempty" url:"character_limit,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunkerConfigRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunkerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ReductoChunkerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReductoChunkerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunkerConfigRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Reducto chunking
type ReductoChunking struct {
	ChunkerConfig *ReductoChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunking) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunking) UnmarshalJSON(data []byte) error {
	type unmarshaler ReductoChunking
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReductoChunking(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunking) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Reducto chunking
type ReductoChunkingRequest struct {
	ChunkerConfig *ReductoChunkerConfigRequest `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReductoChunkingRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReductoChunkingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ReductoChunkingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReductoChunkingRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReductoChunkingRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The final data returned indicating an error occurred during the stream.
type RejectedExecutePromptEvent struct {
	Error       *VellumError                 `json:"error" url:"error"`
	ExecutionId string                       `json:"execution_id" url:"execution_id"`
	Meta        *RejectedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedExecutePromptEvent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the model containing an error of what went wrong.
type RejectedExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string       `json:"execution_id" url:"execution_id"`
	Error       *VellumError `json:"error" url:"error"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecutePromptResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedExecutePromptResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the Workflow execution containing an error specifying what went wrong.
type RejectedExecuteWorkflowWorkflowResultEvent struct {
	Id    string              `json:"id" url:"id"`
	Ts    time.Time           `json:"ts" url:"ts"`
	Error *WorkflowEventError `json:"error" url:"error"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*r),
		Ts:    core.NewDateTime(r.Ts),
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type RejectedPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedPromptExecutionMeta) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// An event that indicates that the node has rejected its execution.
type RejectedWorkflowNodeResultEvent struct {
	Id                string                  `json:"id" url:"id"`
	NodeId            string                  `json:"node_id" url:"node_id"`
	NodeResultId      string                  `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time              `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                 `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Error             *WorkflowEventError     `json:"error" url:"error"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RejectedWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RejectedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedWorkflowNodeResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*r),
		Ts:    core.NewOptionalDateTime(r.Ts),
	}
	return json.Marshal(marshaler)
}

func (r *RejectedWorkflowNodeResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// - `SYSTEM` - System
// - `USER` - User
type ReleaseTagSource string

const (
	ReleaseTagSourceSystem ReleaseTagSource = "SYSTEM"
	ReleaseTagSourceUser   ReleaseTagSource = "USER"
)

func NewReleaseTagSourceFromString(s string) (ReleaseTagSource, error) {
	switch s {
	case "SYSTEM":
		return ReleaseTagSourceSystem, nil
	case "USER":
		return ReleaseTagSourceUser, nil
	}
	var t ReleaseTagSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReleaseTagSource) Ptr() *ReleaseTagSource {
	return &r
}

// Information about the Test Case to replace
type ReplaceTestSuiteTestCaseRequest struct {
	// The Vellum-generated ID of the Test Case whose data you'd like to replace. Must specify either this or external_id.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The ID that was originally provided upon Test Case creation that uniquely identifies the Test Case whose data you'd like to replace. Must specify either this of id.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A human-readable label used to convey the intention of this Test Case
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// Values for each of the Test Case's input variables
	InputValues []*NamedTestCaseVariableValueRequest `json:"input_values" url:"input_values"`
	// Values for each of the Test Case's evaluation variables
	EvaluationValues []*NamedTestCaseVariableValueRequest `json:"evaluation_values" url:"evaluation_values"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReplaceTestSuiteTestCaseRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReplaceTestSuiteTestCaseRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ReplaceTestSuiteTestCaseRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReplaceTestSuiteTestCaseRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReplaceTestSuiteTestCaseRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Sandbox Scenario
type SandboxScenario struct {
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// The inputs for the scenario
	Inputs []*ScenarioInput `json:"inputs" url:"inputs"`
	// The id of the scenario
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SandboxScenario) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SandboxScenario) UnmarshalJSON(data []byte) error {
	type unmarshaler SandboxScenario
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SandboxScenario(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SandboxScenario) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ScenarioInput struct {
	Type        string
	String      *ScenarioInputStringVariableValue
	Json        *ScenarioInputJsonVariableValue
	ChatHistory *ScenarioInputChatHistoryVariableValue
}

func (s *ScenarioInput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(ScenarioInputStringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.String = value
	case "JSON":
		value := new(ScenarioInputJsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Json = value
	case "CHAT_HISTORY":
		value := new(ScenarioInputChatHistoryVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ChatHistory = value
	}
	return nil
}

func (s ScenarioInput) MarshalJSON() ([]byte, error) {
	if s.String != nil {
		return core.MarshalJSONWithExtraProperty(s.String, "type", "STRING")
	}
	if s.Json != nil {
		return core.MarshalJSONWithExtraProperty(s.Json, "type", "JSON")
	}
	if s.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(s.ChatHistory, "type", "CHAT_HISTORY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type ScenarioInputVisitor interface {
	VisitString(*ScenarioInputStringVariableValue) error
	VisitJson(*ScenarioInputJsonVariableValue) error
	VisitChatHistory(*ScenarioInputChatHistoryVariableValue) error
}

func (s *ScenarioInput) Accept(visitor ScenarioInputVisitor) error {
	if s.String != nil {
		return visitor.VisitString(s.String)
	}
	if s.Json != nil {
		return visitor.VisitJson(s.Json)
	}
	if s.ChatHistory != nil {
		return visitor.VisitChatHistory(s.ChatHistory)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

// Prompt Sandbox Scenario input value that is of type CHAT_HISTORY
type ScenarioInputChatHistoryVariableValue struct {
	Value           []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	InputVariableId string         `json:"input_variable_id" url:"input_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ScenarioInputChatHistoryVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScenarioInputChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ScenarioInputChatHistoryVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScenarioInputChatHistoryVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputChatHistoryVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Prompt Sandbox Scenario input value that is of type JSON
type ScenarioInputJsonVariableValue struct {
	Value           interface{} `json:"value" url:"value"`
	InputVariableId string      `json:"input_variable_id" url:"input_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ScenarioInputJsonVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScenarioInputJsonVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ScenarioInputJsonVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScenarioInputJsonVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputJsonVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Prompt Sandbox Scenario input value that is of type STRING
type ScenarioInputStringVariableValue struct {
	Value           *string `json:"value,omitempty" url:"value,omitempty"`
	InputVariableId string  `json:"input_variable_id" url:"input_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ScenarioInputStringVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ScenarioInputStringVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ScenarioInputStringVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScenarioInputStringVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputStringVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchFiltersRequest struct {
	// The document external IDs to filter by
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`
	// The metadata filters to apply to the search
	Metadata *MetadataFilterConfigRequest `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchFiltersRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchFiltersRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchFiltersRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchFiltersRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchFiltersRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A Node Result Event emitted from a Search Node.
type SearchNodeResult struct {
	Data *SearchNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchNodeResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchNodeResultData struct {
	ResultsOutputId string `json:"results_output_id" url:"results_output_id"`
	// The results of the search. Each result represents a chunk that matches the search query.
	Results      []*SearchResult `json:"results" url:"results"`
	TextOutputId string          `json:"text_output_id" url:"text_output_id"`
	Text         *string         `json:"text,omitempty" url:"text,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchNodeResultData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchRequestOptionsRequest struct {
	// The maximum number of results to return.
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// The weights to use for the search. Must add up to 1.0.
	Weights *SearchWeightsRequest `json:"weights,omitempty" url:"weights,omitempty"`
	// The configuration for merging results.
	ResultMerging *SearchResultMergingRequest `json:"result_merging,omitempty" url:"result_merging,omitempty"`
	// The filters to apply to the search.
	Filters *SearchFiltersRequest `json:"filters,omitempty" url:"filters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchRequestOptionsRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchRequestOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchRequestOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchRequestOptionsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchRequestOptionsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResponse struct {
	// The results of the search. Each result represents a chunk that matches the search query.
	Results []*SearchResult `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResult struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords" url:"keywords"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocument `json:"document" url:"document"`
	// Additional information about the search result.
	Meta *SearchResultMeta `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocument struct {
	// The ID of the document.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultDocument) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocument(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocumentRequest struct {
	// The ID of the document.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultDocumentRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocumentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocumentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMergingRequest struct {
	// Whether to enable merging results
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMergingRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMergingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMergingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMergingRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMergingRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMeta struct {
	Source *SearchResultMetaSource `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMeta) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMeta) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMetaRequest struct {
	Source *SearchResultMetaSourceRequest `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultMetaRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMetaRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMetaSource struct {
	DocumentType string
	Pdf          *PdfSearchResultMetaSource
}

func (s *SearchResultMetaSource) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		DocumentType string `json:"document_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.DocumentType = unmarshaler.DocumentType
	switch unmarshaler.DocumentType {
	case "PDF":
		value := new(PdfSearchResultMetaSource)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Pdf = value
	}
	return nil
}

func (s SearchResultMetaSource) MarshalJSON() ([]byte, error) {
	if s.Pdf != nil {
		return core.MarshalJSONWithExtraProperty(s.Pdf, "document_type", "PDF")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SearchResultMetaSourceVisitor interface {
	VisitPdf(*PdfSearchResultMetaSource) error
}

func (s *SearchResultMetaSource) Accept(visitor SearchResultMetaSourceVisitor) error {
	if s.Pdf != nil {
		return visitor.VisitPdf(s.Pdf)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SearchResultMetaSourceRequest struct {
	DocumentType string
	Pdf          *PdfSearchResultMetaSourceRequest
}

func (s *SearchResultMetaSourceRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		DocumentType string `json:"document_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.DocumentType = unmarshaler.DocumentType
	switch unmarshaler.DocumentType {
	case "PDF":
		value := new(PdfSearchResultMetaSourceRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Pdf = value
	}
	return nil
}

func (s SearchResultMetaSourceRequest) MarshalJSON() ([]byte, error) {
	if s.Pdf != nil {
		return core.MarshalJSONWithExtraProperty(s.Pdf, "document_type", "PDF")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SearchResultMetaSourceRequestVisitor interface {
	VisitPdf(*PdfSearchResultMetaSourceRequest) error
}

func (s *SearchResultMetaSourceRequest) Accept(visitor SearchResultMetaSourceRequestVisitor) error {
	if s.Pdf != nil {
		return visitor.VisitPdf(s.Pdf)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SearchResultRequest struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords" url:"keywords"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocumentRequest `json:"document" url:"document"`
	// Additional information about the search result.
	Meta *SearchResultMetaRequest `json:"meta,omitempty" url:"meta,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResultRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResultRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchWeightsRequest struct {
	// The relative weight to give to semantic similarity
	SemanticSimilarity *float64 `json:"semantic_similarity,omitempty" url:"semantic_similarity,omitempty"`
	// The relative weight to give to keywords
	Keywords *float64 `json:"keywords,omitempty" url:"keywords,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchWeightsRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchWeightsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchWeightsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchWeightsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchWeightsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration for sentence chunking
type SentenceChunkerConfig struct {
	CharacterLimit  *int     `json:"character_limit,omitempty" url:"character_limit,omitempty"`
	MinOverlapRatio *float64 `json:"min_overlap_ratio,omitempty" url:"min_overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunkerConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SentenceChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SentenceChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunkerConfig) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration for sentence chunking
type SentenceChunkerConfigRequest struct {
	CharacterLimit  *int     `json:"character_limit,omitempty" url:"character_limit,omitempty"`
	MinOverlapRatio *float64 `json:"min_overlap_ratio,omitempty" url:"min_overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunkerConfigRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunkerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SentenceChunkerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SentenceChunkerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunkerConfigRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Sentence chunking
type SentenceChunking struct {
	ChunkerConfig *SentenceChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunking) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunking) UnmarshalJSON(data []byte) error {
	type unmarshaler SentenceChunking
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SentenceChunking(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunking) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Sentence chunking
type SentenceChunkingRequest struct {
	ChunkerConfig *SentenceChunkerConfigRequest `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SentenceChunkingRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SentenceChunkingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SentenceChunkingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SentenceChunkingRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SentenceChunkingRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimDeploymentRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum  `json:"environment,omitempty" url:"environment,omitempty"`
	LastDeployedOn time.Time         `json:"last_deployed_on" url:"last_deployed_on"`
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// A human-readable description of the deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimDeploymentRead) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimDeploymentRead) UnmarshalJSON(data []byte) error {
	type embed SlimDeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimDeploymentRead(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimDeploymentRead) MarshalJSON() ([]byte, error) {
	type embed SlimDeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*s),
		Created:        core.NewDateTime(s.Created),
		LastDeployedOn: core.NewDateTime(s.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (s *SlimDeploymentRead) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimDocument struct {
	// Vellum-generated ID that uniquely identifies this document.
	Id string `json:"id" url:"id"`
	// The external ID that was originally provided when uploading the document.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A timestamp representing when this document was most recently uploaded.
	LastUploadedAt time.Time `json:"last_uploaded_at" url:"last_uploaded_at"`
	// Human-friendly name for this document.
	Label string `json:"label" url:"label"`
	// An enum value representing where this document is along its processing lifecycle. Note that this is different than its indexing lifecycle.
	//
	// - `QUEUED` - Queued
	// - `PROCESSING` - Processing
	// - `PROCESSED` - Processed
	// - `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty" url:"processing_state,omitempty"`
	// An enum value representing why the document could not be processed. Is null unless processing_state is FAILED.
	//
	// - `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
	// - `INVALID_FILE` - Invalid File
	ProcessingFailureReason *ProcessingFailureReasonEnum `json:"processing_failure_reason,omitempty" url:"processing_failure_reason,omitempty"`
	// The document's current status.
	//
	// - `ACTIVE` - Active
	Status *DocumentStatus `json:"status,omitempty" url:"status,omitempty"`
	// A list of keywords associated with this document. Originally provided when uploading the document.
	Keywords []string `json:"keywords,omitempty" url:"keywords,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata                  map[string]interface{}             `json:"metadata,omitempty" url:"metadata,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes" url:"document_to_document_indexes"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimDocument) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimDocument) UnmarshalJSON(data []byte) error {
	type embed SlimDocument
	var unmarshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimDocument(unmarshaler.embed)
	s.LastUploadedAt = unmarshaler.LastUploadedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimDocument) MarshalJSON() ([]byte, error) {
	type embed SlimDocument
	var marshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed:          embed(*s),
		LastUploadedAt: core.NewDateTime(s.LastUploadedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SlimDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimWorkflowDeployment struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this workflow deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// The output variables this Workflow Deployment will produce when it is executed.
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`
	// A human-readable description of the workflow deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimWorkflowDeployment) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimWorkflowDeployment) UnmarshalJSON(data []byte) error {
	type embed SlimWorkflowDeployment
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimWorkflowDeployment(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimWorkflowDeployment) MarshalJSON() ([]byte, error) {
	type embed SlimWorkflowDeployment
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*s),
		Created:        core.NewDateTime(s.Created),
		LastDeployedOn: core.NewDateTime(s.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (s *SlimWorkflowDeployment) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The data returned for each delta during the prompt execution stream.
type StreamingExecutePromptEvent struct {
	Output      *PromptOutput                 `json:"output" url:"output"`
	OutputIndex int                           `json:"output_index" url:"output_index"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *StreamingPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingExecutePromptEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamingExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamingExecutePromptEvent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingExecutePromptEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type StreamingPromptExecutionMeta struct {
	Latency *int `json:"latency,omitempty" url:"latency,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingPromptExecutionMeta) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamingPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamingPromptExecutionMeta(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingPromptExecutionMeta) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// An event that indicates that the node has execution is in progress.
type StreamingWorkflowNodeResultEvent struct {
	Id                string                   `json:"id" url:"id"`
	NodeId            string                   `json:"node_id" url:"node_id"`
	NodeResultId      string                   `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time               `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData  `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                  `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Output            *NodeOutputCompiledValue `json:"output,omitempty" url:"output,omitempty"`
	OutputIndex       *int                     `json:"output_index,omitempty" url:"output_index,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StreamingWorkflowNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamingWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed StreamingWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StreamingWorkflowNodeResultEvent(unmarshaler.embed)
	s.Ts = unmarshaler.Ts.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed StreamingWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*s),
		Ts:    core.NewOptionalDateTime(s.Ts),
	}
	return json.Marshal(marshaler)
}

func (s *StreamingWorkflowNodeResultEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContent struct {
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringChatMessageContent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler StringChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringChatMessageContent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContentRequest struct {
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringChatMessageContentRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler StringChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringChatMessageContentRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A user input representing a string value
type StringInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringInputRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler StringInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringInputRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringVariableValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVariableValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler StringVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing a string.
type StringVellumValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVellumValue) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler StringVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringVellumValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVellumValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A value representing a string.
type StringVellumValueRequest struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StringVellumValueRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StringVellumValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler StringVellumValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringVellumValueRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVellumValueRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitCompletionActualRequest struct {
	// The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// Text representing what the completion _should_ have been.
	Text *string `json:"text,omitempty" url:"text,omitempty"`
	// A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *time.Time `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubmitCompletionActualRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubmitCompletionActualRequest) UnmarshalJSON(data []byte) error {
	type embed SubmitCompletionActualRequest
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SubmitCompletionActualRequest(unmarshaler.embed)
	s.Timestamp = unmarshaler.Timestamp.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitCompletionActualRequest) MarshalJSON() ([]byte, error) {
	type embed SubmitCompletionActualRequest
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed:     embed(*s),
		Timestamp: core.NewOptionalDateTime(s.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (s *SubmitCompletionActualRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitWorkflowExecutionActualRequest struct {
	OutputType  string
	String      *WorkflowExecutionActualStringRequest
	Json        *WorkflowExecutionActualJsonRequest
	ChatHistory *WorkflowExecutionActualChatHistoryRequest
}

func (s *SubmitWorkflowExecutionActualRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		OutputType string `json:"output_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.OutputType = unmarshaler.OutputType
	switch unmarshaler.OutputType {
	case "STRING":
		value := new(WorkflowExecutionActualStringRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.String = value
	case "JSON":
		value := new(WorkflowExecutionActualJsonRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowExecutionActualChatHistoryRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ChatHistory = value
	}
	return nil
}

func (s SubmitWorkflowExecutionActualRequest) MarshalJSON() ([]byte, error) {
	if s.String != nil {
		return core.MarshalJSONWithExtraProperty(s.String, "output_type", "STRING")
	}
	if s.Json != nil {
		return core.MarshalJSONWithExtraProperty(s.Json, "output_type", "JSON")
	}
	if s.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(s.ChatHistory, "output_type", "CHAT_HISTORY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SubmitWorkflowExecutionActualRequestVisitor interface {
	VisitString(*WorkflowExecutionActualStringRequest) error
	VisitJson(*WorkflowExecutionActualJsonRequest) error
	VisitChatHistory(*WorkflowExecutionActualChatHistoryRequest) error
}

func (s *SubmitWorkflowExecutionActualRequest) Accept(visitor SubmitWorkflowExecutionActualRequestVisitor) error {
	if s.String != nil {
		return visitor.VisitString(s.String)
	}
	if s.Json != nil {
		return visitor.VisitJson(s.Json)
	}
	if s.ChatHistory != nil {
		return visitor.VisitChatHistory(s.ChatHistory)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

// A Node Result Event emitted from a Subworkflow Node.
type SubworkflowNodeResult struct {
	Data *SubworkflowNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubworkflowNodeResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubworkflowNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SubworkflowNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubworkflowNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubworkflowNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubworkflowNodeResultData struct {
	ExecutionId *string `json:"execution_id,omitempty" url:"execution_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubworkflowNodeResultData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubworkflowNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SubworkflowNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubworkflowNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubworkflowNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TemplatingNodeArrayResult struct {
	Id    string                    `json:"id" url:"id"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeArrayResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeArrayResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeArrayResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeChatHistoryResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeErrorResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeFunctionCallResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeFunctionCallResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeJsonResult struct {
	Id    string      `json:"id" url:"id"`
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeJsonResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeNumberResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Templating Node.
type TemplatingNodeResult struct {
	Data *TemplatingNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultData struct {
	Output *TemplatingNodeResultOutput `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultOutput struct {
	Type          string
	String        *TemplatingNodeStringResult
	Number        *TemplatingNodeNumberResult
	Json          *TemplatingNodeJsonResult
	ChatHistory   *TemplatingNodeChatHistoryResult
	SearchResults *TemplatingNodeSearchResultsResult
	Error         *TemplatingNodeErrorResult
	Array         *TemplatingNodeArrayResult
	FunctionCall  *TemplatingNodeFunctionCallResult
}

func (t *TemplatingNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TemplatingNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TemplatingNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TemplatingNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TemplatingNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TemplatingNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TemplatingNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	case "ARRAY":
		value := new(TemplatingNodeArrayResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Array = value
	case "FUNCTION_CALL":
		value := new(TemplatingNodeFunctionCallResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.FunctionCall = value
	}
	return nil
}

func (t TemplatingNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		return core.MarshalJSONWithExtraProperty(t.String, "type", "STRING")
	}
	if t.Number != nil {
		return core.MarshalJSONWithExtraProperty(t.Number, "type", "NUMBER")
	}
	if t.Json != nil {
		return core.MarshalJSONWithExtraProperty(t.Json, "type", "JSON")
	}
	if t.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(t.ChatHistory, "type", "CHAT_HISTORY")
	}
	if t.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(t.SearchResults, "type", "SEARCH_RESULTS")
	}
	if t.Error != nil {
		return core.MarshalJSONWithExtraProperty(t.Error, "type", "ERROR")
	}
	if t.Array != nil {
		return core.MarshalJSONWithExtraProperty(t.Array, "type", "ARRAY")
	}
	if t.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(t.FunctionCall, "type", "FUNCTION_CALL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TemplatingNodeResultOutputVisitor interface {
	VisitString(*TemplatingNodeStringResult) error
	VisitNumber(*TemplatingNodeNumberResult) error
	VisitJson(*TemplatingNodeJsonResult) error
	VisitChatHistory(*TemplatingNodeChatHistoryResult) error
	VisitSearchResults(*TemplatingNodeSearchResultsResult) error
	VisitError(*TemplatingNodeErrorResult) error
	VisitArray(*TemplatingNodeArrayResult) error
	VisitFunctionCall(*TemplatingNodeFunctionCallResult) error
}

func (t *TemplatingNodeResultOutput) Accept(visitor TemplatingNodeResultOutputVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	if t.Array != nil {
		return visitor.VisitArray(t.Array)
	}
	if t.FunctionCall != nil {
		return visitor.VisitFunctionCall(t.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TemplatingNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeSearchResultsResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemplatingNodeStringResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplatingNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeStringResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeArrayResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string                    `json:"name" url:"name"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeArrayResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeArrayResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeArrayResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeArrayResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeChatHistoryResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeChatHistoryResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeChatHistoryResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeErrorResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeErrorResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeErrorResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeFunctionCallResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeFunctionCallResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeFunctionCallResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeFunctionCallResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeJsonResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeJsonResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeJsonResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeNumberResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeNumberResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeNumberResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Terminal Node.
type TerminalNodeResult struct {
	Data *TerminalNodeResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultData struct {
	Output *TerminalNodeResultOutput `json:"output" url:"output"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultOutput struct {
	Type          string
	String        *TerminalNodeStringResult
	Number        *TerminalNodeNumberResult
	Json          *TerminalNodeJsonResult
	ChatHistory   *TerminalNodeChatHistoryResult
	SearchResults *TerminalNodeSearchResultsResult
	Array         *TerminalNodeArrayResult
	FunctionCall  *TerminalNodeFunctionCallResult
	Error         *TerminalNodeErrorResult
}

func (t *TerminalNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TerminalNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TerminalNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TerminalNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TerminalNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TerminalNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ARRAY":
		value := new(TerminalNodeArrayResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Array = value
	case "FUNCTION_CALL":
		value := new(TerminalNodeFunctionCallResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.FunctionCall = value
	case "ERROR":
		value := new(TerminalNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TerminalNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		return core.MarshalJSONWithExtraProperty(t.String, "type", "STRING")
	}
	if t.Number != nil {
		return core.MarshalJSONWithExtraProperty(t.Number, "type", "NUMBER")
	}
	if t.Json != nil {
		return core.MarshalJSONWithExtraProperty(t.Json, "type", "JSON")
	}
	if t.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(t.ChatHistory, "type", "CHAT_HISTORY")
	}
	if t.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(t.SearchResults, "type", "SEARCH_RESULTS")
	}
	if t.Array != nil {
		return core.MarshalJSONWithExtraProperty(t.Array, "type", "ARRAY")
	}
	if t.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(t.FunctionCall, "type", "FUNCTION_CALL")
	}
	if t.Error != nil {
		return core.MarshalJSONWithExtraProperty(t.Error, "type", "ERROR")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TerminalNodeResultOutputVisitor interface {
	VisitString(*TerminalNodeStringResult) error
	VisitNumber(*TerminalNodeNumberResult) error
	VisitJson(*TerminalNodeJsonResult) error
	VisitChatHistory(*TerminalNodeChatHistoryResult) error
	VisitSearchResults(*TerminalNodeSearchResultsResult) error
	VisitArray(*TerminalNodeArrayResult) error
	VisitFunctionCall(*TerminalNodeFunctionCallResult) error
	VisitError(*TerminalNodeErrorResult) error
}

func (t *TerminalNodeResultOutput) Accept(visitor TerminalNodeResultOutputVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Array != nil {
		return visitor.VisitArray(t.Array)
	}
	if t.FunctionCall != nil {
		return visitor.VisitFunctionCall(t.FunctionCall)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TerminalNodeSearchResultsResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeSearchResultsResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeSearchResultsResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeStringResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TerminalNodeStringResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TerminalNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeStringResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// An Array value for a variable in a Test Case.
type TestCaseArrayVariableValue struct {
	VariableId string                  `json:"variable_id" url:"variable_id"`
	Name       string                  `json:"name" url:"name"`
	Value      []*ArrayVellumValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseArrayVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseArrayVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseArrayVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseArrayVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseArrayVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A chat history value for a variable in a Test Case.
type TestCaseChatHistoryVariableValue struct {
	VariableId string         `json:"variable_id" url:"variable_id"`
	Name       string         `json:"name" url:"name"`
	Value      []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseChatHistoryVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseChatHistoryVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseChatHistoryVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseChatHistoryVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// An error value for a variable in a Test Case.
type TestCaseErrorVariableValue struct {
	VariableId string       `json:"variable_id" url:"variable_id"`
	Name       string       `json:"name" url:"name"`
	Value      *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseErrorVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseErrorVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseErrorVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseErrorVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseErrorVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A function call value for a variable in a Test Case.
type TestCaseFunctionCallVariableValue struct {
	VariableId string        `json:"variable_id" url:"variable_id"`
	Name       string        `json:"name" url:"name"`
	Value      *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseFunctionCallVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseFunctionCallVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseFunctionCallVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseFunctionCallVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseFunctionCallVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A JSON value for a variable in a Test Case.
type TestCaseJsonVariableValue struct {
	VariableId string      `json:"variable_id" url:"variable_id"`
	Name       string      `json:"name" url:"name"`
	Value      interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseJsonVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseJsonVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseJsonVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseJsonVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseJsonVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A numerical value for a variable in a Test Case.
type TestCaseNumberVariableValue struct {
	VariableId string   `json:"variable_id" url:"variable_id"`
	Name       string   `json:"name" url:"name"`
	Value      *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseNumberVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseNumberVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseNumberVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseNumberVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseNumberVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A search results value for a variable in a Test Case.
type TestCaseSearchResultsVariableValue struct {
	VariableId string          `json:"variable_id" url:"variable_id"`
	Name       string          `json:"name" url:"name"`
	Value      []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseSearchResultsVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseSearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseSearchResultsVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseSearchResultsVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseSearchResultsVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A string value for a variable in a Test Case.
type TestCaseStringVariableValue struct {
	VariableId string  `json:"variable_id" url:"variable_id"`
	Name       string  `json:"name" url:"name"`
	Value      *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestCaseStringVariableValue) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestCaseStringVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseStringVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseStringVariableValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseStringVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseVariableValue struct {
	Type          string
	String        *TestCaseStringVariableValue
	Number        *TestCaseNumberVariableValue
	Json          *TestCaseJsonVariableValue
	ChatHistory   *TestCaseChatHistoryVariableValue
	SearchResults *TestCaseSearchResultsVariableValue
	Error         *TestCaseErrorVariableValue
	FunctionCall  *TestCaseFunctionCallVariableValue
	Array         *TestCaseArrayVariableValue
}

func (t *TestCaseVariableValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TestCaseStringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TestCaseNumberVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TestCaseJsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TestCaseChatHistoryVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TestCaseSearchResultsVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TestCaseErrorVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	case "FUNCTION_CALL":
		value := new(TestCaseFunctionCallVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.FunctionCall = value
	case "ARRAY":
		value := new(TestCaseArrayVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Array = value
	}
	return nil
}

func (t TestCaseVariableValue) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		return core.MarshalJSONWithExtraProperty(t.String, "type", "STRING")
	}
	if t.Number != nil {
		return core.MarshalJSONWithExtraProperty(t.Number, "type", "NUMBER")
	}
	if t.Json != nil {
		return core.MarshalJSONWithExtraProperty(t.Json, "type", "JSON")
	}
	if t.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(t.ChatHistory, "type", "CHAT_HISTORY")
	}
	if t.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(t.SearchResults, "type", "SEARCH_RESULTS")
	}
	if t.Error != nil {
		return core.MarshalJSONWithExtraProperty(t.Error, "type", "ERROR")
	}
	if t.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(t.FunctionCall, "type", "FUNCTION_CALL")
	}
	if t.Array != nil {
		return core.MarshalJSONWithExtraProperty(t.Array, "type", "ARRAY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestCaseVariableValueVisitor interface {
	VisitString(*TestCaseStringVariableValue) error
	VisitNumber(*TestCaseNumberVariableValue) error
	VisitJson(*TestCaseJsonVariableValue) error
	VisitChatHistory(*TestCaseChatHistoryVariableValue) error
	VisitSearchResults(*TestCaseSearchResultsVariableValue) error
	VisitError(*TestCaseErrorVariableValue) error
	VisitFunctionCall(*TestCaseFunctionCallVariableValue) error
	VisitArray(*TestCaseArrayVariableValue) error
}

func (t *TestCaseVariableValue) Accept(visitor TestCaseVariableValueVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	if t.FunctionCall != nil {
		return visitor.VisitFunctionCall(t.FunctionCall)
	}
	if t.Array != nil {
		return visitor.VisitArray(t.Array)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

// Execution configuration for running a Test Suite against a Prompt Deployment
type TestSuiteRunDeploymentReleaseTagExecConfig struct {
	Data *TestSuiteRunDeploymentReleaseTagExecConfigData `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunDeploymentReleaseTagExecConfigData struct {
	// The ID of the Prompt Deployment to run the Test Suite against.
	DeploymentId string `json:"deployment_id" url:"deployment_id"`
	// A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunDeploymentReleaseTagExecConfigDataRequest struct {
	// The ID of the Prompt Deployment to run the Test Suite against.
	DeploymentId string `json:"deployment_id" url:"deployment_id"`
	// A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Prompt Deployment
type TestSuiteRunDeploymentReleaseTagExecConfigRequest struct {
	Data *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecConfig struct {
	Type                 string
	DeploymentReleaseTag *TestSuiteRunDeploymentReleaseTagExecConfig
	WorkflowReleaseTag   *TestSuiteRunWorkflowReleaseTagExecConfig
	External             *TestSuiteRunExternalExecConfig
}

func (t *TestSuiteRunExecConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "DEPLOYMENT_RELEASE_TAG":
		value := new(TestSuiteRunDeploymentReleaseTagExecConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.DeploymentReleaseTag = value
	case "WORKFLOW_RELEASE_TAG":
		value := new(TestSuiteRunWorkflowReleaseTagExecConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.WorkflowReleaseTag = value
	case "EXTERNAL":
		value := new(TestSuiteRunExternalExecConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.External = value
	}
	return nil
}

func (t TestSuiteRunExecConfig) MarshalJSON() ([]byte, error) {
	if t.DeploymentReleaseTag != nil {
		return core.MarshalJSONWithExtraProperty(t.DeploymentReleaseTag, "type", "DEPLOYMENT_RELEASE_TAG")
	}
	if t.WorkflowReleaseTag != nil {
		return core.MarshalJSONWithExtraProperty(t.WorkflowReleaseTag, "type", "WORKFLOW_RELEASE_TAG")
	}
	if t.External != nil {
		return core.MarshalJSONWithExtraProperty(t.External, "type", "EXTERNAL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecConfigVisitor interface {
	VisitDeploymentReleaseTag(*TestSuiteRunDeploymentReleaseTagExecConfig) error
	VisitWorkflowReleaseTag(*TestSuiteRunWorkflowReleaseTagExecConfig) error
	VisitExternal(*TestSuiteRunExternalExecConfig) error
}

func (t *TestSuiteRunExecConfig) Accept(visitor TestSuiteRunExecConfigVisitor) error {
	if t.DeploymentReleaseTag != nil {
		return visitor.VisitDeploymentReleaseTag(t.DeploymentReleaseTag)
	}
	if t.WorkflowReleaseTag != nil {
		return visitor.VisitWorkflowReleaseTag(t.WorkflowReleaseTag)
	}
	if t.External != nil {
		return visitor.VisitExternal(t.External)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecConfigRequest struct {
	Type                 string
	DeploymentReleaseTag *TestSuiteRunDeploymentReleaseTagExecConfigRequest
	WorkflowReleaseTag   *TestSuiteRunWorkflowReleaseTagExecConfigRequest
	External             *TestSuiteRunExternalExecConfigRequest
}

func (t *TestSuiteRunExecConfigRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "DEPLOYMENT_RELEASE_TAG":
		value := new(TestSuiteRunDeploymentReleaseTagExecConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.DeploymentReleaseTag = value
	case "WORKFLOW_RELEASE_TAG":
		value := new(TestSuiteRunWorkflowReleaseTagExecConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.WorkflowReleaseTag = value
	case "EXTERNAL":
		value := new(TestSuiteRunExternalExecConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.External = value
	}
	return nil
}

func (t TestSuiteRunExecConfigRequest) MarshalJSON() ([]byte, error) {
	if t.DeploymentReleaseTag != nil {
		return core.MarshalJSONWithExtraProperty(t.DeploymentReleaseTag, "type", "DEPLOYMENT_RELEASE_TAG")
	}
	if t.WorkflowReleaseTag != nil {
		return core.MarshalJSONWithExtraProperty(t.WorkflowReleaseTag, "type", "WORKFLOW_RELEASE_TAG")
	}
	if t.External != nil {
		return core.MarshalJSONWithExtraProperty(t.External, "type", "EXTERNAL")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecConfigRequestVisitor interface {
	VisitDeploymentReleaseTag(*TestSuiteRunDeploymentReleaseTagExecConfigRequest) error
	VisitWorkflowReleaseTag(*TestSuiteRunWorkflowReleaseTagExecConfigRequest) error
	VisitExternal(*TestSuiteRunExternalExecConfigRequest) error
}

func (t *TestSuiteRunExecConfigRequest) Accept(visitor TestSuiteRunExecConfigRequestVisitor) error {
	if t.DeploymentReleaseTag != nil {
		return visitor.VisitDeploymentReleaseTag(t.DeploymentReleaseTag)
	}
	if t.WorkflowReleaseTag != nil {
		return visitor.VisitWorkflowReleaseTag(t.WorkflowReleaseTag)
	}
	if t.External != nil {
		return visitor.VisitExternal(t.External)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecution struct {
	Id            string                               `json:"id" url:"id"`
	TestCaseId    string                               `json:"test_case_id" url:"test_case_id"`
	Outputs       []*TestSuiteRunExecutionOutput       `json:"outputs" url:"outputs"`
	MetricResults []*TestSuiteRunExecutionMetricResult `json:"metric_results" url:"metric_results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecution) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecution) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecution
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecution(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecution) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type ARRAY
type TestSuiteRunExecutionArrayOutput struct {
	Name             string                  `json:"name" url:"name"`
	Value            []*ArrayVellumValueItem `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string                  `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionArrayOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionArrayOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionArrayOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionArrayOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionArrayOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type CHAT_HISTORY
type TestSuiteRunExecutionChatHistoryOutput struct {
	Name             string         `json:"name" url:"name"`
	Value            []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string         `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionChatHistoryOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionChatHistoryOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionChatHistoryOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionChatHistoryOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionChatHistoryOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type ERROR
type TestSuiteRunExecutionErrorOutput struct {
	Name             string       `json:"name" url:"name"`
	Value            *VellumError `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string       `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionErrorOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionErrorOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionErrorOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionErrorOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionErrorOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type FUNCTION_CALL
type TestSuiteRunExecutionFunctionCallOutput struct {
	Name             string        `json:"name" url:"name"`
	Value            *FunctionCall `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string        `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionFunctionCallOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionFunctionCallOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionFunctionCallOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionFunctionCallOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionFunctionCallOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type JSON
type TestSuiteRunExecutionJsonOutput struct {
	Name             string      `json:"name" url:"name"`
	Value            interface{} `json:"value" url:"value"`
	OutputVariableId string      `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionJsonOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionJsonOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionJsonOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionJsonOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionJsonOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionMetricDefinition struct {
	Id    *string `json:"id,omitempty" url:"id,omitempty"`
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionMetricDefinition) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionMetricDefinition) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionMetricDefinition
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionMetricDefinition(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionMetricDefinition) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionMetricResult struct {
	MetricId         string                                 `json:"metric_id" url:"metric_id"`
	Outputs          []*TestSuiteRunMetricOutput            `json:"outputs" url:"outputs"`
	MetricLabel      *string                                `json:"metric_label,omitempty" url:"metric_label,omitempty"`
	MetricDefinition *TestSuiteRunExecutionMetricDefinition `json:"metric_definition,omitempty" url:"metric_definition,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionMetricResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionMetricResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionMetricResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionMetricResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionMetricResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type NUMBER
type TestSuiteRunExecutionNumberOutput struct {
	Name             string   `json:"name" url:"name"`
	Value            *float64 `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string   `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionNumberOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionNumberOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionNumberOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionNumberOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionNumberOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionOutput struct {
	Type          string
	String        *TestSuiteRunExecutionStringOutput
	Number        *TestSuiteRunExecutionNumberOutput
	Json          *TestSuiteRunExecutionJsonOutput
	ChatHistory   *TestSuiteRunExecutionChatHistoryOutput
	SearchResults *TestSuiteRunExecutionSearchResultsOutput
	Error         *TestSuiteRunExecutionErrorOutput
	FunctionCall  *TestSuiteRunExecutionFunctionCallOutput
	Array         *TestSuiteRunExecutionArrayOutput
}

func (t *TestSuiteRunExecutionOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TestSuiteRunExecutionStringOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TestSuiteRunExecutionNumberOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TestSuiteRunExecutionJsonOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TestSuiteRunExecutionChatHistoryOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TestSuiteRunExecutionSearchResultsOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TestSuiteRunExecutionErrorOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	case "FUNCTION_CALL":
		value := new(TestSuiteRunExecutionFunctionCallOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.FunctionCall = value
	case "ARRAY":
		value := new(TestSuiteRunExecutionArrayOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Array = value
	}
	return nil
}

func (t TestSuiteRunExecutionOutput) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		return core.MarshalJSONWithExtraProperty(t.String, "type", "STRING")
	}
	if t.Number != nil {
		return core.MarshalJSONWithExtraProperty(t.Number, "type", "NUMBER")
	}
	if t.Json != nil {
		return core.MarshalJSONWithExtraProperty(t.Json, "type", "JSON")
	}
	if t.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(t.ChatHistory, "type", "CHAT_HISTORY")
	}
	if t.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(t.SearchResults, "type", "SEARCH_RESULTS")
	}
	if t.Error != nil {
		return core.MarshalJSONWithExtraProperty(t.Error, "type", "ERROR")
	}
	if t.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(t.FunctionCall, "type", "FUNCTION_CALL")
	}
	if t.Array != nil {
		return core.MarshalJSONWithExtraProperty(t.Array, "type", "ARRAY")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecutionOutputVisitor interface {
	VisitString(*TestSuiteRunExecutionStringOutput) error
	VisitNumber(*TestSuiteRunExecutionNumberOutput) error
	VisitJson(*TestSuiteRunExecutionJsonOutput) error
	VisitChatHistory(*TestSuiteRunExecutionChatHistoryOutput) error
	VisitSearchResults(*TestSuiteRunExecutionSearchResultsOutput) error
	VisitError(*TestSuiteRunExecutionErrorOutput) error
	VisitFunctionCall(*TestSuiteRunExecutionFunctionCallOutput) error
	VisitArray(*TestSuiteRunExecutionArrayOutput) error
}

func (t *TestSuiteRunExecutionOutput) Accept(visitor TestSuiteRunExecutionOutputVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	if t.FunctionCall != nil {
		return visitor.VisitFunctionCall(t.FunctionCall)
	}
	if t.Array != nil {
		return visitor.VisitArray(t.Array)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type SEARCH_RESULTS
type TestSuiteRunExecutionSearchResultsOutput struct {
	Name             string          `json:"name" url:"name"`
	Value            []*SearchResult `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string          `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionSearchResultsOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionSearchResultsOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionSearchResultsOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionSearchResultsOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionSearchResultsOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution output of an entity evaluated during a Test Suite Run that is of type STRING
type TestSuiteRunExecutionStringOutput struct {
	Name             string  `json:"name" url:"name"`
	Value            *string `json:"value,omitempty" url:"value,omitempty"`
	OutputVariableId string  `json:"output_variable_id" url:"output_variable_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExecutionStringOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExecutionStringOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionStringOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionStringOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionStringOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Vellum Test Suite against an external callable
type TestSuiteRunExternalExecConfig struct {
	Data *TestSuiteRunExternalExecConfigData `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExternalExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExternalExecConfigData struct {
	// The executions of some callable external to Vellum whose outputs you would like to evaluate.
	Executions []*ExternalTestCaseExecution `json:"executions" url:"executions"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfigData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExternalExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfigData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExternalExecConfigDataRequest struct {
	// The executions of some callable external to Vellum whose outputs you would like to evaluate.
	Executions []*ExternalTestCaseExecutionRequest `json:"executions" url:"executions"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfigDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExternalExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfigDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Vellum Test Suite against an external callable
type TestSuiteRunExternalExecConfigRequest struct {
	Data *TestSuiteRunExternalExecConfigDataRequest `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunExternalExecConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunExternalExecConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExternalExecConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExternalExecConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExternalExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type ERROR
type TestSuiteRunMetricErrorOutput struct {
	Value *VellumError `json:"value" url:"value"`
	Name  string       `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricErrorOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricErrorOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunMetricErrorOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunMetricErrorOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricErrorOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type NUMBER
type TestSuiteRunMetricNumberOutput struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`
	Name  string   `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricNumberOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricNumberOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunMetricNumberOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunMetricNumberOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricNumberOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunMetricOutput struct {
	Type   string
	String *TestSuiteRunMetricStringOutput
	Number *TestSuiteRunMetricNumberOutput
	Error  *TestSuiteRunMetricErrorOutput
}

func (t *TestSuiteRunMetricOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TestSuiteRunMetricStringOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TestSuiteRunMetricNumberOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "ERROR":
		value := new(TestSuiteRunMetricErrorOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TestSuiteRunMetricOutput) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		return core.MarshalJSONWithExtraProperty(t.String, "type", "STRING")
	}
	if t.Number != nil {
		return core.MarshalJSONWithExtraProperty(t.Number, "type", "NUMBER")
	}
	if t.Error != nil {
		return core.MarshalJSONWithExtraProperty(t.Error, "type", "ERROR")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunMetricOutputVisitor interface {
	VisitString(*TestSuiteRunMetricStringOutput) error
	VisitNumber(*TestSuiteRunMetricNumberOutput) error
	VisitError(*TestSuiteRunMetricErrorOutput) error
}

func (t *TestSuiteRunMetricOutput) Accept(visitor TestSuiteRunMetricOutputVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

// Output for a test suite run metric that is of type STRING
type TestSuiteRunMetricStringOutput struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Name  string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunMetricStringOutput) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunMetricStringOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunMetricStringOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunMetricStringOutput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricStringOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunRead struct {
	Id        string                 `json:"id" url:"id"`
	Created   time.Time              `json:"created" url:"created"`
	TestSuite *TestSuiteRunTestSuite `json:"test_suite" url:"test_suite"`
	// The current state of this run
	//
	// - `QUEUED` - Queued
	// - `RUNNING` - Running
	// - `COMPLETE` - Complete
	// - `FAILED` - Failed
	// - `CANCELLED` - Cancelled
	State TestSuiteRunState `json:"state" url:"state"`
	// Configuration that defines how the Test Suite should be run
	ExecConfig *TestSuiteRunExecConfig `json:"exec_config,omitempty" url:"exec_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunRead) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunRead) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunRead
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunRead(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunRead) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunRead
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*t),
		Created: core.NewDateTime(t.Created),
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunRead) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// - `QUEUED` - Queued
// - `RUNNING` - Running
// - `COMPLETE` - Complete
// - `FAILED` - Failed
// - `CANCELLED` - Cancelled
type TestSuiteRunState string

const (
	TestSuiteRunStateQueued    TestSuiteRunState = "QUEUED"
	TestSuiteRunStateRunning   TestSuiteRunState = "RUNNING"
	TestSuiteRunStateComplete  TestSuiteRunState = "COMPLETE"
	TestSuiteRunStateFailed    TestSuiteRunState = "FAILED"
	TestSuiteRunStateCancelled TestSuiteRunState = "CANCELLED"
)

func NewTestSuiteRunStateFromString(s string) (TestSuiteRunState, error) {
	switch s {
	case "QUEUED":
		return TestSuiteRunStateQueued, nil
	case "RUNNING":
		return TestSuiteRunStateRunning, nil
	case "COMPLETE":
		return TestSuiteRunStateComplete, nil
	case "FAILED":
		return TestSuiteRunStateFailed, nil
	case "CANCELLED":
		return TestSuiteRunStateCancelled, nil
	}
	var t TestSuiteRunState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TestSuiteRunState) Ptr() *TestSuiteRunState {
	return &t
}

type TestSuiteRunTestSuite struct {
	Id            string `json:"id" url:"id"`
	HistoryItemId string `json:"history_item_id" url:"history_item_id"`
	Label         string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunTestSuite) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunTestSuite) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunTestSuite
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunTestSuite(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunTestSuite) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Workflow Deployment
type TestSuiteRunWorkflowReleaseTagExecConfig struct {
	Data *TestSuiteRunWorkflowReleaseTagExecConfigData `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunWorkflowReleaseTagExecConfigData struct {
	// The ID of the Workflow Deployment to run the Test Suite against.
	WorkflowDeploymentId string `json:"workflow_deployment_id" url:"workflow_deployment_id"`
	// A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunWorkflowReleaseTagExecConfigDataRequest struct {
	// The ID of the Workflow Deployment to run the Test Suite against.
	WorkflowDeploymentId string `json:"workflow_deployment_id" url:"workflow_deployment_id"`
	// A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Workflow Deployment
type TestSuiteRunWorkflowReleaseTagExecConfigRequest struct {
	Data *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest `json:"data" url:"data"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestCase struct {
	Id               *string                  `json:"id,omitempty" url:"id,omitempty"`
	ExternalId       *string                  `json:"external_id,omitempty" url:"external_id,omitempty"`
	Label            *string                  `json:"label,omitempty" url:"label,omitempty"`
	InputValues      []*TestCaseVariableValue `json:"input_values" url:"input_values"`
	EvaluationValues []*TestCaseVariableValue `json:"evaluation_values" url:"evaluation_values"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCase) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCase) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCase(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCase) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestCaseBulkOperationRequest struct {
	Type    string
	Create  *TestSuiteTestCaseCreateBulkOperationRequest
	Replace *TestSuiteTestCaseReplaceBulkOperationRequest
	Upsert  *TestSuiteTestCaseUpsertBulkOperationRequest
	Delete  *TestSuiteTestCaseDeleteBulkOperationRequest
}

func (t *TestSuiteTestCaseBulkOperationRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "CREATE":
		value := new(TestSuiteTestCaseCreateBulkOperationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Create = value
	case "REPLACE":
		value := new(TestSuiteTestCaseReplaceBulkOperationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Replace = value
	case "UPSERT":
		value := new(TestSuiteTestCaseUpsertBulkOperationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Upsert = value
	case "DELETE":
		value := new(TestSuiteTestCaseDeleteBulkOperationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Delete = value
	}
	return nil
}

func (t TestSuiteTestCaseBulkOperationRequest) MarshalJSON() ([]byte, error) {
	if t.Create != nil {
		return core.MarshalJSONWithExtraProperty(t.Create, "type", "CREATE")
	}
	if t.Replace != nil {
		return core.MarshalJSONWithExtraProperty(t.Replace, "type", "REPLACE")
	}
	if t.Upsert != nil {
		return core.MarshalJSONWithExtraProperty(t.Upsert, "type", "UPSERT")
	}
	if t.Delete != nil {
		return core.MarshalJSONWithExtraProperty(t.Delete, "type", "DELETE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteTestCaseBulkOperationRequestVisitor interface {
	VisitCreate(*TestSuiteTestCaseCreateBulkOperationRequest) error
	VisitReplace(*TestSuiteTestCaseReplaceBulkOperationRequest) error
	VisitUpsert(*TestSuiteTestCaseUpsertBulkOperationRequest) error
	VisitDelete(*TestSuiteTestCaseDeleteBulkOperationRequest) error
}

func (t *TestSuiteTestCaseBulkOperationRequest) Accept(visitor TestSuiteTestCaseBulkOperationRequestVisitor) error {
	if t.Create != nil {
		return visitor.VisitCreate(t.Create)
	}
	if t.Replace != nil {
		return visitor.VisitReplace(t.Replace)
	}
	if t.Upsert != nil {
		return visitor.VisitUpsert(t.Upsert)
	}
	if t.Delete != nil {
		return visitor.VisitDelete(t.Delete)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteTestCaseBulkResult struct {
	Type     string
	Created  *TestSuiteTestCaseCreatedBulkResult
	Replaced *TestSuiteTestCaseReplacedBulkResult
	Deleted  *TestSuiteTestCaseDeletedBulkResult
	Rejected *TestSuiteTestCaseRejectedBulkResult
}

func (t *TestSuiteTestCaseBulkResult) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "CREATED":
		value := new(TestSuiteTestCaseCreatedBulkResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Created = value
	case "REPLACED":
		value := new(TestSuiteTestCaseReplacedBulkResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Replaced = value
	case "DELETED":
		value := new(TestSuiteTestCaseDeletedBulkResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Deleted = value
	case "REJECTED":
		value := new(TestSuiteTestCaseRejectedBulkResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Rejected = value
	}
	return nil
}

func (t TestSuiteTestCaseBulkResult) MarshalJSON() ([]byte, error) {
	if t.Created != nil {
		return core.MarshalJSONWithExtraProperty(t.Created, "type", "CREATED")
	}
	if t.Replaced != nil {
		return core.MarshalJSONWithExtraProperty(t.Replaced, "type", "REPLACED")
	}
	if t.Deleted != nil {
		return core.MarshalJSONWithExtraProperty(t.Deleted, "type", "DELETED")
	}
	if t.Rejected != nil {
		return core.MarshalJSONWithExtraProperty(t.Rejected, "type", "REJECTED")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteTestCaseBulkResultVisitor interface {
	VisitCreated(*TestSuiteTestCaseCreatedBulkResult) error
	VisitReplaced(*TestSuiteTestCaseReplacedBulkResult) error
	VisitDeleted(*TestSuiteTestCaseDeletedBulkResult) error
	VisitRejected(*TestSuiteTestCaseRejectedBulkResult) error
}

func (t *TestSuiteTestCaseBulkResult) Accept(visitor TestSuiteTestCaseBulkResultVisitor) error {
	if t.Created != nil {
		return visitor.VisitCreated(t.Created)
	}
	if t.Replaced != nil {
		return visitor.VisitReplaced(t.Replaced)
	}
	if t.Deleted != nil {
		return visitor.VisitDeleted(t.Deleted)
	}
	if t.Rejected != nil {
		return visitor.VisitRejected(t.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

// A bulk operation that represents the creation of a Test Case.
type TestSuiteTestCaseCreateBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id   string                          `json:"id" url:"id"`
	Data *CreateTestSuiteTestCaseRequest `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseCreateBulkOperationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseCreateBulkOperationRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseCreateBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that created a Test Case.
type TestSuiteTestCaseCreatedBulkResult struct {
	Id   string                                  `json:"id" url:"id"`
	Data *TestSuiteTestCaseCreatedBulkResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseCreatedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseCreatedBulkResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseCreatedBulkResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseCreatedBulkResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseCreatedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Information about the Test Case that was created.
type TestSuiteTestCaseCreatedBulkResultData struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseCreatedBulkResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseCreatedBulkResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseCreatedBulkResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseCreatedBulkResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseCreatedBulkResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteTestCaseDeleteBulkOperationDataRequest struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeleteBulkOperationDataRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeleteBulkOperationDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseDeleteBulkOperationDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeleteBulkOperationDataRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeleteBulkOperationDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A bulk operation that represents the deletion of a Test Case.
type TestSuiteTestCaseDeleteBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id string `json:"id" url:"id"`
	// Information about the Test Case to delete
	Data *TestSuiteTestCaseDeleteBulkOperationDataRequest `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseDeleteBulkOperationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeleteBulkOperationRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeleteBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that deleted a Test Case.
type TestSuiteTestCaseDeletedBulkResult struct {
	// An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.
	Id   string                                  `json:"id" url:"id"`
	Data *TestSuiteTestCaseDeletedBulkResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeletedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeletedBulkResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseDeletedBulkResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeletedBulkResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeletedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Information about the Test Case that was deleted
type TestSuiteTestCaseDeletedBulkResultData struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseDeletedBulkResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseDeletedBulkResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseDeletedBulkResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseDeletedBulkResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseDeletedBulkResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that failed to operate on a Test Case.
type TestSuiteTestCaseRejectedBulkResult struct {
	// An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Details about the error that occurred
	Data map[string]interface{} `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseRejectedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseRejectedBulkResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseRejectedBulkResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseRejectedBulkResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseRejectedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A bulk operation that represents the replacing of a Test Case.
type TestSuiteTestCaseReplaceBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id   string                           `json:"id" url:"id"`
	Data *ReplaceTestSuiteTestCaseRequest `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseReplaceBulkOperationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseReplaceBulkOperationRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseReplaceBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The result of a bulk operation that replaced a Test Case.
type TestSuiteTestCaseReplacedBulkResult struct {
	// An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.
	Id   string                                   `json:"id" url:"id"`
	Data *TestSuiteTestCaseReplacedBulkResultData `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseReplacedBulkResult) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseReplacedBulkResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseReplacedBulkResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseReplacedBulkResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseReplacedBulkResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Information about the Test Case that was replaced
type TestSuiteTestCaseReplacedBulkResultData struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseReplacedBulkResultData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseReplacedBulkResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseReplacedBulkResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseReplacedBulkResultData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseReplacedBulkResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A bulk operation that represents the upserting of a Test Case.
type TestSuiteTestCaseUpsertBulkOperationRequest struct {
	// An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.
	Id   string                          `json:"id" url:"id"`
	Data *UpsertTestSuiteTestCaseRequest `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCaseUpsertBulkOperationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCaseUpsertBulkOperationRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCaseUpsertBulkOperationRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Tokenizer config for OpenAI's TikToken type tokenizers.
type TikTokenTokenizerConfig struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TikTokenTokenizerConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TikTokenTokenizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TikTokenTokenizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TikTokenTokenizerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TikTokenTokenizerConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Tokenizer config for OpenAI's TikToken type tokenizers.
type TikTokenTokenizerConfigRequest struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TikTokenTokenizerConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TikTokenTokenizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TikTokenTokenizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TikTokenTokenizerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TikTokenTokenizerConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Configuration for token overlapping window chunking
type TokenOverlappingWindowChunkerConfig struct {
	TokenLimit   *int     `json:"token_limit,omitempty" url:"token_limit,omitempty"`
	OverlapRatio *float64 `json:"overlap_ratio,omitempty" url:"overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunkerConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunkerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenOverlappingWindowChunkerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunkerConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunkerConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Configuration for token overlapping window chunking
type TokenOverlappingWindowChunkerConfigRequest struct {
	TokenLimit   *int     `json:"token_limit,omitempty" url:"token_limit,omitempty"`
	OverlapRatio *float64 `json:"overlap_ratio,omitempty" url:"overlap_ratio,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunkerConfigRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunkerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenOverlappingWindowChunkerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunkerConfigRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunkerConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Token overlapping window chunking
type TokenOverlappingWindowChunking struct {
	ChunkerConfig *TokenOverlappingWindowChunkerConfig `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunking) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunking) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenOverlappingWindowChunking
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunking(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunking) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Token overlapping window chunking
type TokenOverlappingWindowChunkingRequest struct {
	ChunkerConfig *TokenOverlappingWindowChunkerConfigRequest `json:"chunker_config,omitempty" url:"chunker_config,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TokenOverlappingWindowChunkingRequest) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenOverlappingWindowChunkingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenOverlappingWindowChunkingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenOverlappingWindowChunkingRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenOverlappingWindowChunkingRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UploadDocumentResponse struct {
	// The ID of the newly created document.
	DocumentId string `json:"document_id" url:"document_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UploadDocumentResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UploadDocumentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UploadDocumentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UploadDocumentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UploadDocumentResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertTestSuiteTestCaseRequest struct {
	// The Vellum-generated ID of an existing Test Case whose data you'd like to replace. If specified and no Test Case exists with this ID, a 404 will be returned.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// An ID external to Vellum that uniquely identifies the Test Case that you'd like to create/update. If there's a match on a Test Case that was previously created with the same external_id, it will be updated. Otherwise, a new Test Case will be created with this value as its external_id. If no external_id is specified, then a new Test Case will always be created.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A human-readable label used to convey the intention of this Test Case
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// Values for each of the Test Case's input variables
	InputValues []*NamedTestCaseVariableValueRequest `json:"input_values" url:"input_values"`
	// Values for each of the Test Case's evaluation variables
	EvaluationValues []*NamedTestCaseVariableValueRequest `json:"evaluation_values" url:"evaluation_values"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertTestSuiteTestCaseRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertTestSuiteTestCaseRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertTestSuiteTestCaseRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertTestSuiteTestCaseRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertTestSuiteTestCaseRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type VellumError struct {
	Message string              `json:"message" url:"message"`
	Code    VellumErrorCodeEnum `json:"code" url:"code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumError) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// - `INVALID_REQUEST` - INVALID_REQUEST
// - `PROVIDER_ERROR` - PROVIDER_ERROR
// - `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// - `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
type VellumErrorCodeEnum string

const (
	VellumErrorCodeEnumInvalidRequest      VellumErrorCodeEnum = "INVALID_REQUEST"
	VellumErrorCodeEnumProviderError       VellumErrorCodeEnum = "PROVIDER_ERROR"
	VellumErrorCodeEnumInternalServerError VellumErrorCodeEnum = "INTERNAL_SERVER_ERROR"
	VellumErrorCodeEnumUserDefinedError    VellumErrorCodeEnum = "USER_DEFINED_ERROR"
)

func NewVellumErrorCodeEnumFromString(s string) (VellumErrorCodeEnum, error) {
	switch s {
	case "INVALID_REQUEST":
		return VellumErrorCodeEnumInvalidRequest, nil
	case "PROVIDER_ERROR":
		return VellumErrorCodeEnumProviderError, nil
	case "INTERNAL_SERVER_ERROR":
		return VellumErrorCodeEnumInternalServerError, nil
	case "USER_DEFINED_ERROR":
		return VellumErrorCodeEnumUserDefinedError, nil
	}
	var t VellumErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumErrorCodeEnum) Ptr() *VellumErrorCodeEnum {
	return &v
}

type VellumErrorRequest struct {
	Message string              `json:"message" url:"message"`
	Code    VellumErrorCodeEnum `json:"code" url:"code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumErrorRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumErrorRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumErrorRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumErrorRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumErrorRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImage struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumImage) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumImage) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImage) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImageRequest struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumImageRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumImageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImageRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImageRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumVariable struct {
	Id   string             `json:"id" url:"id"`
	Key  string             `json:"key" url:"key"`
	Type VellumVariableType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *VellumVariable) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VellumVariable) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVariable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVariable(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVariable) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// - `STRING` - STRING
// - `NUMBER` - NUMBER
// - `JSON` - JSON
// - `CHAT_HISTORY` - CHAT_HISTORY
// - `SEARCH_RESULTS` - SEARCH_RESULTS
// - `ERROR` - ERROR
// - `ARRAY` - ARRAY
// - `FUNCTION_CALL` - FUNCTION_CALL
// - `IMAGE` - IMAGE
// - `NULL` - NULL
type VellumVariableType string

const (
	VellumVariableTypeString        VellumVariableType = "STRING"
	VellumVariableTypeNumber        VellumVariableType = "NUMBER"
	VellumVariableTypeJson          VellumVariableType = "JSON"
	VellumVariableTypeChatHistory   VellumVariableType = "CHAT_HISTORY"
	VellumVariableTypeSearchResults VellumVariableType = "SEARCH_RESULTS"
	VellumVariableTypeError         VellumVariableType = "ERROR"
	VellumVariableTypeArray         VellumVariableType = "ARRAY"
	VellumVariableTypeFunctionCall  VellumVariableType = "FUNCTION_CALL"
	VellumVariableTypeImage         VellumVariableType = "IMAGE"
	VellumVariableTypeNull          VellumVariableType = "NULL"
)

func NewVellumVariableTypeFromString(s string) (VellumVariableType, error) {
	switch s {
	case "STRING":
		return VellumVariableTypeString, nil
	case "NUMBER":
		return VellumVariableTypeNumber, nil
	case "JSON":
		return VellumVariableTypeJson, nil
	case "CHAT_HISTORY":
		return VellumVariableTypeChatHistory, nil
	case "SEARCH_RESULTS":
		return VellumVariableTypeSearchResults, nil
	case "ERROR":
		return VellumVariableTypeError, nil
	case "ARRAY":
		return VellumVariableTypeArray, nil
	case "FUNCTION_CALL":
		return VellumVariableTypeFunctionCall, nil
	case "IMAGE":
		return VellumVariableTypeImage, nil
	case "NULL":
		return VellumVariableTypeNull, nil
	}
	var t VellumVariableType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumVariableType) Ptr() *VellumVariableType {
	return &v
}

// - `DEFAULT` - DEFAULT
// - `PUBLIC` - PUBLIC
// - `PRIVATE` - PRIVATE
// - `DISABLED` - DISABLED
type VisibilityEnum string

const (
	VisibilityEnumDefault  VisibilityEnum = "DEFAULT"
	VisibilityEnumPublic   VisibilityEnum = "PUBLIC"
	VisibilityEnumPrivate  VisibilityEnum = "PRIVATE"
	VisibilityEnumDisabled VisibilityEnum = "DISABLED"
)

func NewVisibilityEnumFromString(s string) (VisibilityEnum, error) {
	switch s {
	case "DEFAULT":
		return VisibilityEnumDefault, nil
	case "PUBLIC":
		return VisibilityEnumPublic, nil
	case "PRIVATE":
		return VisibilityEnumPrivate, nil
	case "DISABLED":
		return VisibilityEnumDisabled, nil
	}
	var t VisibilityEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VisibilityEnum) Ptr() *VisibilityEnum {
	return &v
}

type WorkflowDeploymentRead struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this workflow deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The ID of the history item associated with this Workflow Deployment's LATEST Release Tag
	LastDeployedHistoryItemId string `json:"last_deployed_history_item_id" url:"last_deployed_history_item_id"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables" url:"input_variables"`
	// The output variables this Workflow Deployment produces values for when it's executed.
	OutputVariables []*VellumVariable `json:"output_variables" url:"output_variables"`
	// A human-readable description of the workflow deployment
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowDeploymentRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowDeploymentRead) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentRead(unmarshaler.embed)
	w.Created = unmarshaler.Created.Time()
	w.LastDeployedOn = unmarshaler.LastDeployedOn.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentRead) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*w),
		Created:        core.NewDateTime(w.Created),
		LastDeployedOn: core.NewDateTime(w.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowEventError struct {
	Message string                          `json:"message" url:"message"`
	Code    WorkflowExecutionEventErrorCode `json:"code" url:"code"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowEventError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowEventError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowEventError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowEventError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowEventError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualChatHistoryRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue []*ChatMessageRequest `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualChatHistoryRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualChatHistoryRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualChatHistoryRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualChatHistoryRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualChatHistoryRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualJsonRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue map[string]interface{} `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualJsonRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualJsonRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualJsonRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualJsonRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualJsonRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualStringRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide additional metadata about the feedback submission.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue *string `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionActualStringRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionActualStringRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualStringRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualStringRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualStringRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// - `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION
// - `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED
// - `NODE_EXECUTION_COUNT_LIMIT_REACHED` - NODE_EXECUTION_COUNT_LIMIT_REACHED
// - `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// - `NODE_EXECUTION` - NODE_EXECUTION
// - `LLM_PROVIDER` - LLM_PROVIDER
// - `INVALID_TEMPLATE` - INVALID_TEMPLATE
// - `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
type WorkflowExecutionEventErrorCode string

const (
	WorkflowExecutionEventErrorCodeWorkflowInitialization         WorkflowExecutionEventErrorCode = "WORKFLOW_INITIALIZATION"
	WorkflowExecutionEventErrorCodeWorkflowCancelled              WorkflowExecutionEventErrorCode = "WORKFLOW_CANCELLED"
	WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached WorkflowExecutionEventErrorCode = "NODE_EXECUTION_COUNT_LIMIT_REACHED"
	WorkflowExecutionEventErrorCodeInternalServerError            WorkflowExecutionEventErrorCode = "INTERNAL_SERVER_ERROR"
	WorkflowExecutionEventErrorCodeNodeExecution                  WorkflowExecutionEventErrorCode = "NODE_EXECUTION"
	WorkflowExecutionEventErrorCodeLlmProvider                    WorkflowExecutionEventErrorCode = "LLM_PROVIDER"
	WorkflowExecutionEventErrorCodeInvalidTemplate                WorkflowExecutionEventErrorCode = "INVALID_TEMPLATE"
	WorkflowExecutionEventErrorCodeUserDefinedError               WorkflowExecutionEventErrorCode = "USER_DEFINED_ERROR"
)

func NewWorkflowExecutionEventErrorCodeFromString(s string) (WorkflowExecutionEventErrorCode, error) {
	switch s {
	case "WORKFLOW_INITIALIZATION":
		return WorkflowExecutionEventErrorCodeWorkflowInitialization, nil
	case "WORKFLOW_CANCELLED":
		return WorkflowExecutionEventErrorCodeWorkflowCancelled, nil
	case "NODE_EXECUTION_COUNT_LIMIT_REACHED":
		return WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached, nil
	case "INTERNAL_SERVER_ERROR":
		return WorkflowExecutionEventErrorCodeInternalServerError, nil
	case "NODE_EXECUTION":
		return WorkflowExecutionEventErrorCodeNodeExecution, nil
	case "LLM_PROVIDER":
		return WorkflowExecutionEventErrorCodeLlmProvider, nil
	case "INVALID_TEMPLATE":
		return WorkflowExecutionEventErrorCodeInvalidTemplate, nil
	case "USER_DEFINED_ERROR":
		return WorkflowExecutionEventErrorCodeUserDefinedError, nil
	}
	var t WorkflowExecutionEventErrorCode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventErrorCode) Ptr() *WorkflowExecutionEventErrorCode {
	return &w
}

// - `NODE` - NODE
// - `WORKFLOW` - WORKFLOW
type WorkflowExecutionEventType string

const (
	WorkflowExecutionEventTypeNode     WorkflowExecutionEventType = "NODE"
	WorkflowExecutionEventTypeWorkflow WorkflowExecutionEventType = "WORKFLOW"
)

func NewWorkflowExecutionEventTypeFromString(s string) (WorkflowExecutionEventType, error) {
	switch s {
	case "NODE":
		return WorkflowExecutionEventTypeNode, nil
	case "WORKFLOW":
		return WorkflowExecutionEventTypeWorkflow, nil
	}
	var t WorkflowExecutionEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventType) Ptr() *WorkflowExecutionEventType {
	return &w
}

// A NODE-level event emitted from the workflow's execution.
type WorkflowExecutionNodeResultEvent struct {
	ExecutionId string                   `json:"execution_id" url:"execution_id"`
	RunId       *string                  `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                  `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowNodeResultEvent `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionNodeResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionNodeResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionNodeResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionNodeResultEvent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionNodeResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A WORKFLOW-level event emitted from the workflow's execution.
type WorkflowExecutionWorkflowResultEvent struct {
	ExecutionId string               `json:"execution_id" url:"execution_id"`
	RunId       *string              `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string              `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowResultEvent `json:"data" url:"data"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExecutionWorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExecutionWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionWorkflowResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionWorkflowResultEvent(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionWorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExpandMetaRequest struct {
	// If enabled, the Prompt Node FULFILLED events will include model host usage tracking. This may increase latency for some model hosts.
	Usage *bool `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowExpandMetaRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowExpandMetaRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExpandMetaRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExpandMetaRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExpandMetaRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowNodeResultData struct {
	Type          string
	Prompt        *PromptNodeResult
	Search        *SearchNodeResult
	Templating    *TemplatingNodeResult
	CodeExecution *CodeExecutionNodeResult
	Conditional   *ConditionalNodeResult
	Api           *ApiNodeResult
	Terminal      *TerminalNodeResult
	Merge         *MergeNodeResult
	Subworkflow   *SubworkflowNodeResult
	Metric        *MetricNodeResult
	Map           *MapNodeResult
}

func (w *WorkflowNodeResultData) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "PROMPT":
		value := new(PromptNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Prompt = value
	case "SEARCH":
		value := new(SearchNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Search = value
	case "TEMPLATING":
		value := new(TemplatingNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Templating = value
	case "CODE_EXECUTION":
		value := new(CodeExecutionNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.CodeExecution = value
	case "CONDITIONAL":
		value := new(ConditionalNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Conditional = value
	case "API":
		value := new(ApiNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Api = value
	case "TERMINAL":
		value := new(TerminalNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Terminal = value
	case "MERGE":
		value := new(MergeNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Merge = value
	case "SUBWORKFLOW":
		value := new(SubworkflowNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Subworkflow = value
	case "METRIC":
		value := new(MetricNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Metric = value
	case "MAP":
		value := new(MapNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Map = value
	}
	return nil
}

func (w WorkflowNodeResultData) MarshalJSON() ([]byte, error) {
	if w.Prompt != nil {
		return core.MarshalJSONWithExtraProperty(w.Prompt, "type", "PROMPT")
	}
	if w.Search != nil {
		return core.MarshalJSONWithExtraProperty(w.Search, "type", "SEARCH")
	}
	if w.Templating != nil {
		return core.MarshalJSONWithExtraProperty(w.Templating, "type", "TEMPLATING")
	}
	if w.CodeExecution != nil {
		return core.MarshalJSONWithExtraProperty(w.CodeExecution, "type", "CODE_EXECUTION")
	}
	if w.Conditional != nil {
		return core.MarshalJSONWithExtraProperty(w.Conditional, "type", "CONDITIONAL")
	}
	if w.Api != nil {
		return core.MarshalJSONWithExtraProperty(w.Api, "type", "API")
	}
	if w.Terminal != nil {
		return core.MarshalJSONWithExtraProperty(w.Terminal, "type", "TERMINAL")
	}
	if w.Merge != nil {
		return core.MarshalJSONWithExtraProperty(w.Merge, "type", "MERGE")
	}
	if w.Subworkflow != nil {
		return core.MarshalJSONWithExtraProperty(w.Subworkflow, "type", "SUBWORKFLOW")
	}
	if w.Metric != nil {
		return core.MarshalJSONWithExtraProperty(w.Metric, "type", "METRIC")
	}
	if w.Map != nil {
		return core.MarshalJSONWithExtraProperty(w.Map, "type", "MAP")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowNodeResultDataVisitor interface {
	VisitPrompt(*PromptNodeResult) error
	VisitSearch(*SearchNodeResult) error
	VisitTemplating(*TemplatingNodeResult) error
	VisitCodeExecution(*CodeExecutionNodeResult) error
	VisitConditional(*ConditionalNodeResult) error
	VisitApi(*ApiNodeResult) error
	VisitTerminal(*TerminalNodeResult) error
	VisitMerge(*MergeNodeResult) error
	VisitSubworkflow(*SubworkflowNodeResult) error
	VisitMetric(*MetricNodeResult) error
	VisitMap(*MapNodeResult) error
}

func (w *WorkflowNodeResultData) Accept(visitor WorkflowNodeResultDataVisitor) error {
	if w.Prompt != nil {
		return visitor.VisitPrompt(w.Prompt)
	}
	if w.Search != nil {
		return visitor.VisitSearch(w.Search)
	}
	if w.Templating != nil {
		return visitor.VisitTemplating(w.Templating)
	}
	if w.CodeExecution != nil {
		return visitor.VisitCodeExecution(w.CodeExecution)
	}
	if w.Conditional != nil {
		return visitor.VisitConditional(w.Conditional)
	}
	if w.Api != nil {
		return visitor.VisitApi(w.Api)
	}
	if w.Terminal != nil {
		return visitor.VisitTerminal(w.Terminal)
	}
	if w.Merge != nil {
		return visitor.VisitMerge(w.Merge)
	}
	if w.Subworkflow != nil {
		return visitor.VisitSubworkflow(w.Subworkflow)
	}
	if w.Metric != nil {
		return visitor.VisitMetric(w.Metric)
	}
	if w.Map != nil {
		return visitor.VisitMap(w.Map)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowNodeResultEvent struct {
	State     string
	Initiated *InitiatedWorkflowNodeResultEvent
	Streaming *StreamingWorkflowNodeResultEvent
	Fulfilled *FulfilledWorkflowNodeResultEvent
	Rejected  *RejectedWorkflowNodeResultEvent
}

func (w *WorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.State = unmarshaler.State
	switch unmarshaler.State {
	case "INITIATED":
		value := new(InitiatedWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Initiated = value
	case "STREAMING":
		value := new(StreamingWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Streaming = value
	case "FULFILLED":
		value := new(FulfilledWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Fulfilled = value
	case "REJECTED":
		value := new(RejectedWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Rejected = value
	}
	return nil
}

func (w WorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	if w.Initiated != nil {
		return core.MarshalJSONWithExtraProperty(w.Initiated, "state", "INITIATED")
	}
	if w.Streaming != nil {
		return core.MarshalJSONWithExtraProperty(w.Streaming, "state", "STREAMING")
	}
	if w.Fulfilled != nil {
		return core.MarshalJSONWithExtraProperty(w.Fulfilled, "state", "FULFILLED")
	}
	if w.Rejected != nil {
		return core.MarshalJSONWithExtraProperty(w.Rejected, "state", "REJECTED")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowNodeResultEventVisitor interface {
	VisitInitiated(*InitiatedWorkflowNodeResultEvent) error
	VisitStreaming(*StreamingWorkflowNodeResultEvent) error
	VisitFulfilled(*FulfilledWorkflowNodeResultEvent) error
	VisitRejected(*RejectedWorkflowNodeResultEvent) error
}

func (w *WorkflowNodeResultEvent) Accept(visitor WorkflowNodeResultEventVisitor) error {
	if w.Initiated != nil {
		return visitor.VisitInitiated(w.Initiated)
	}
	if w.Streaming != nil {
		return visitor.VisitStreaming(w.Streaming)
	}
	if w.Fulfilled != nil {
		return visitor.VisitFulfilled(w.Fulfilled)
	}
	if w.Rejected != nil {
		return visitor.VisitRejected(w.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// - `INITIATED` - INITIATED
// - `STREAMING` - STREAMING
// - `FULFILLED` - FULFILLED
// - `REJECTED` - REJECTED
type WorkflowNodeResultEventState string

const (
	WorkflowNodeResultEventStateInitiated WorkflowNodeResultEventState = "INITIATED"
	WorkflowNodeResultEventStateStreaming WorkflowNodeResultEventState = "STREAMING"
	WorkflowNodeResultEventStateFulfilled WorkflowNodeResultEventState = "FULFILLED"
	WorkflowNodeResultEventStateRejected  WorkflowNodeResultEventState = "REJECTED"
)

func NewWorkflowNodeResultEventStateFromString(s string) (WorkflowNodeResultEventState, error) {
	switch s {
	case "INITIATED":
		return WorkflowNodeResultEventStateInitiated, nil
	case "STREAMING":
		return WorkflowNodeResultEventStateStreaming, nil
	case "FULFILLED":
		return WorkflowNodeResultEventStateFulfilled, nil
	case "REJECTED":
		return WorkflowNodeResultEventStateRejected, nil
	}
	var t WorkflowNodeResultEventState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowNodeResultEventState) Ptr() *WorkflowNodeResultEventState {
	return &w
}

type WorkflowOutput struct {
	Type          string
	String        *WorkflowOutputString
	Number        *WorkflowOutputNumber
	Json          *WorkflowOutputJson
	ChatHistory   *WorkflowOutputChatHistory
	SearchResults *WorkflowOutputSearchResults
	Array         *WorkflowOutputArray
	Error         *WorkflowOutputError
	FunctionCall  *WorkflowOutputFunctionCall
	Image         *WorkflowOutputImage
}

func (w *WorkflowOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowOutputString)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "NUMBER":
		value := new(WorkflowOutputNumber)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Number = value
	case "JSON":
		value := new(WorkflowOutputJson)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowOutputChatHistory)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(WorkflowOutputSearchResults)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.SearchResults = value
	case "ARRAY":
		value := new(WorkflowOutputArray)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Array = value
	case "ERROR":
		value := new(WorkflowOutputError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Error = value
	case "FUNCTION_CALL":
		value := new(WorkflowOutputFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.FunctionCall = value
	case "IMAGE":
		value := new(WorkflowOutputImage)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Image = value
	}
	return nil
}

func (w WorkflowOutput) MarshalJSON() ([]byte, error) {
	if w.String != nil {
		return core.MarshalJSONWithExtraProperty(w.String, "type", "STRING")
	}
	if w.Number != nil {
		return core.MarshalJSONWithExtraProperty(w.Number, "type", "NUMBER")
	}
	if w.Json != nil {
		return core.MarshalJSONWithExtraProperty(w.Json, "type", "JSON")
	}
	if w.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(w.ChatHistory, "type", "CHAT_HISTORY")
	}
	if w.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(w.SearchResults, "type", "SEARCH_RESULTS")
	}
	if w.Array != nil {
		return core.MarshalJSONWithExtraProperty(w.Array, "type", "ARRAY")
	}
	if w.Error != nil {
		return core.MarshalJSONWithExtraProperty(w.Error, "type", "ERROR")
	}
	if w.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(w.FunctionCall, "type", "FUNCTION_CALL")
	}
	if w.Image != nil {
		return core.MarshalJSONWithExtraProperty(w.Image, "type", "IMAGE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowOutputVisitor interface {
	VisitString(*WorkflowOutputString) error
	VisitNumber(*WorkflowOutputNumber) error
	VisitJson(*WorkflowOutputJson) error
	VisitChatHistory(*WorkflowOutputChatHistory) error
	VisitSearchResults(*WorkflowOutputSearchResults) error
	VisitArray(*WorkflowOutputArray) error
	VisitError(*WorkflowOutputError) error
	VisitFunctionCall(*WorkflowOutputFunctionCall) error
	VisitImage(*WorkflowOutputImage) error
}

func (w *WorkflowOutput) Accept(visitor WorkflowOutputVisitor) error {
	if w.String != nil {
		return visitor.VisitString(w.String)
	}
	if w.Number != nil {
		return visitor.VisitNumber(w.Number)
	}
	if w.Json != nil {
		return visitor.VisitJson(w.Json)
	}
	if w.ChatHistory != nil {
		return visitor.VisitChatHistory(w.ChatHistory)
	}
	if w.SearchResults != nil {
		return visitor.VisitSearchResults(w.SearchResults)
	}
	if w.Array != nil {
		return visitor.VisitArray(w.Array)
	}
	if w.Error != nil {
		return visitor.VisitError(w.Error)
	}
	if w.FunctionCall != nil {
		return visitor.VisitFunctionCall(w.FunctionCall)
	}
	if w.Image != nil {
		return visitor.VisitImage(w.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// An array output from a Workflow execution.
type WorkflowOutputArray struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string                  `json:"name" url:"name"`
	Value []*ArrayVellumValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputArray) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputArray) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputArray
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputArray(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A chat history output from a Workflow execution.
type WorkflowOutputChatHistory struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputChatHistory) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputChatHistory) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputChatHistory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputChatHistory(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An error output from a Workflow execution.
type WorkflowOutputError struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A function call output from a Workflow execution.
type WorkflowOutputFunctionCall struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputFunctionCall) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputFunctionCall(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An image output from a Workflow execution.
type WorkflowOutputImage struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputImage) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputImage) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputImage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputImage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputImage) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output from a Workflow execution.
type WorkflowOutputJson struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputJson) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputJson) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputJson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputJson(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output from a Workflow execution.
type WorkflowOutputNumber struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputNumber) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputNumber(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A search results output from a Workflow execution.
type WorkflowOutputSearchResults struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputSearchResults) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputSearchResults(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output from a Workflow execution.
type WorkflowOutputString struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowOutputString) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowOutputString) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputString
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputString(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowReleaseTagRead struct {
	// The name of the Release Tag
	Name string `json:"name" url:"name"`
	// The source of how the Release Tag was originally created
	//
	// - `SYSTEM` - System
	// - `USER` - User
	Source ReleaseTagSource `json:"source" url:"source"`
	// The Workflow Deployment History Item that this Release Tag is associated with
	HistoryItem *WorkflowReleaseTagWorkflowDeploymentHistoryItem `json:"history_item" url:"history_item"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowReleaseTagRead) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowReleaseTagRead) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowReleaseTagRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowReleaseTagRead(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowReleaseTagRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowReleaseTagWorkflowDeploymentHistoryItem struct {
	// The ID of the Workflow Deployment History Item
	Id string `json:"id" url:"id"`
	// The timestamp representing when this History Item was created
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) UnmarshalJSON(data []byte) error {
	type embed WorkflowReleaseTagWorkflowDeploymentHistoryItem
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowReleaseTagWorkflowDeploymentHistoryItem(unmarshaler.embed)
	w.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) MarshalJSON() ([]byte, error) {
	type embed WorkflowReleaseTagWorkflowDeploymentHistoryItem
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*w),
		Timestamp: core.NewDateTime(w.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowReleaseTagWorkflowDeploymentHistoryItem) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a chat history variable in a Workflow.
type WorkflowRequestChatHistoryInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestChatHistoryInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestChatHistoryInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestChatHistoryInputRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestChatHistoryInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowRequestInputRequest struct {
	Type        string
	String      *WorkflowRequestStringInputRequest
	Json        *WorkflowRequestJsonInputRequest
	ChatHistory *WorkflowRequestChatHistoryInputRequest
	Number      *WorkflowRequestNumberInputRequest
}

func (w *WorkflowRequestInputRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowRequestStringInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "JSON":
		value := new(WorkflowRequestJsonInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowRequestChatHistoryInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	case "NUMBER":
		value := new(WorkflowRequestNumberInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Number = value
	}
	return nil
}

func (w WorkflowRequestInputRequest) MarshalJSON() ([]byte, error) {
	if w.String != nil {
		return core.MarshalJSONWithExtraProperty(w.String, "type", "STRING")
	}
	if w.Json != nil {
		return core.MarshalJSONWithExtraProperty(w.Json, "type", "JSON")
	}
	if w.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(w.ChatHistory, "type", "CHAT_HISTORY")
	}
	if w.Number != nil {
		return core.MarshalJSONWithExtraProperty(w.Number, "type", "NUMBER")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowRequestInputRequestVisitor interface {
	VisitString(*WorkflowRequestStringInputRequest) error
	VisitJson(*WorkflowRequestJsonInputRequest) error
	VisitChatHistory(*WorkflowRequestChatHistoryInputRequest) error
	VisitNumber(*WorkflowRequestNumberInputRequest) error
}

func (w *WorkflowRequestInputRequest) Accept(visitor WorkflowRequestInputRequestVisitor) error {
	if w.String != nil {
		return visitor.VisitString(w.String)
	}
	if w.Json != nil {
		return visitor.VisitJson(w.Json)
	}
	if w.ChatHistory != nil {
		return visitor.VisitChatHistory(w.ChatHistory)
	}
	if w.Number != nil {
		return visitor.VisitNumber(w.Number)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// The input for a JSON variable in a Workflow.
type WorkflowRequestJsonInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string      `json:"name" url:"name"`
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestJsonInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestJsonInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestJsonInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestJsonInputRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestJsonInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a number variable in a Workflow.
type WorkflowRequestNumberInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string  `json:"name" url:"name"`
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestNumberInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestNumberInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestNumberInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestNumberInputRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestNumberInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a string variable in a Workflow.
type WorkflowRequestStringInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowRequestStringInputRequest) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowRequestStringInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestStringInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestStringInputRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestStringInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEvent struct {
	Id      string                         `json:"id" url:"id"`
	State   WorkflowNodeResultEventState   `json:"state" url:"state"`
	Ts      time.Time                      `json:"ts" url:"ts"`
	Output  *WorkflowResultEventOutputData `json:"output,omitempty" url:"output,omitempty"`
	Error   *WorkflowEventError            `json:"error,omitempty" url:"error,omitempty"`
	Outputs []*WorkflowOutput              `json:"outputs,omitempty" url:"outputs,omitempty"`
	Inputs  []*ExecutionVellumValue        `json:"inputs,omitempty" url:"inputs,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEvent) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEvent(unmarshaler.embed)
	w.Ts = unmarshaler.Ts.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
		Ts:    core.NewDateTime(w.Ts),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputData struct {
	Type          string
	String        *WorkflowResultEventOutputDataString
	Number        *WorkflowResultEventOutputDataNumber
	Json          *WorkflowResultEventOutputDataJson
	ChatHistory   *WorkflowResultEventOutputDataChatHistory
	SearchResults *WorkflowResultEventOutputDataSearchResults
	Array         *WorkflowResultEventOutputDataArray
	FunctionCall  *WorkflowResultEventOutputDataFunctionCall
	Error         *WorkflowResultEventOutputDataError
}

func (w *WorkflowResultEventOutputData) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowResultEventOutputDataString)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "NUMBER":
		value := new(WorkflowResultEventOutputDataNumber)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Number = value
	case "JSON":
		value := new(WorkflowResultEventOutputDataJson)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowResultEventOutputDataChatHistory)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(WorkflowResultEventOutputDataSearchResults)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.SearchResults = value
	case "ARRAY":
		value := new(WorkflowResultEventOutputDataArray)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Array = value
	case "FUNCTION_CALL":
		value := new(WorkflowResultEventOutputDataFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.FunctionCall = value
	case "ERROR":
		value := new(WorkflowResultEventOutputDataError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Error = value
	}
	return nil
}

func (w WorkflowResultEventOutputData) MarshalJSON() ([]byte, error) {
	if w.String != nil {
		return core.MarshalJSONWithExtraProperty(w.String, "type", "STRING")
	}
	if w.Number != nil {
		return core.MarshalJSONWithExtraProperty(w.Number, "type", "NUMBER")
	}
	if w.Json != nil {
		return core.MarshalJSONWithExtraProperty(w.Json, "type", "JSON")
	}
	if w.ChatHistory != nil {
		return core.MarshalJSONWithExtraProperty(w.ChatHistory, "type", "CHAT_HISTORY")
	}
	if w.SearchResults != nil {
		return core.MarshalJSONWithExtraProperty(w.SearchResults, "type", "SEARCH_RESULTS")
	}
	if w.Array != nil {
		return core.MarshalJSONWithExtraProperty(w.Array, "type", "ARRAY")
	}
	if w.FunctionCall != nil {
		return core.MarshalJSONWithExtraProperty(w.FunctionCall, "type", "FUNCTION_CALL")
	}
	if w.Error != nil {
		return core.MarshalJSONWithExtraProperty(w.Error, "type", "ERROR")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowResultEventOutputDataVisitor interface {
	VisitString(*WorkflowResultEventOutputDataString) error
	VisitNumber(*WorkflowResultEventOutputDataNumber) error
	VisitJson(*WorkflowResultEventOutputDataJson) error
	VisitChatHistory(*WorkflowResultEventOutputDataChatHistory) error
	VisitSearchResults(*WorkflowResultEventOutputDataSearchResults) error
	VisitArray(*WorkflowResultEventOutputDataArray) error
	VisitFunctionCall(*WorkflowResultEventOutputDataFunctionCall) error
	VisitError(*WorkflowResultEventOutputDataError) error
}

func (w *WorkflowResultEventOutputData) Accept(visitor WorkflowResultEventOutputDataVisitor) error {
	if w.String != nil {
		return visitor.VisitString(w.String)
	}
	if w.Number != nil {
		return visitor.VisitNumber(w.Number)
	}
	if w.Json != nil {
		return visitor.VisitJson(w.Json)
	}
	if w.ChatHistory != nil {
		return visitor.VisitChatHistory(w.ChatHistory)
	}
	if w.SearchResults != nil {
		return visitor.VisitSearchResults(w.SearchResults)
	}
	if w.Array != nil {
		return visitor.VisitArray(w.Array)
	}
	if w.FunctionCall != nil {
		return visitor.VisitFunctionCall(w.FunctionCall)
	}
	if w.Error != nil {
		return visitor.VisitError(w.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// An Array output returned from a Workflow execution.
type WorkflowResultEventOutputDataArray struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string                   `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataArray) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataArray) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataArray
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataArray(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Chat History output streamed from a Workflow execution.
type WorkflowResultEventOutputDataChatHistory struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string        `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataChatHistory) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataChatHistory) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataChatHistory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataChatHistory(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An Error output streamed from a Workflow execution.
type WorkflowResultEventOutputDataError struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string      `json:"delta,omitempty" url:"delta,omitempty"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataError) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Function Call output returned from a Workflow execution.
type WorkflowResultEventOutputDataFunctionCall struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string       `json:"delta,omitempty" url:"delta,omitempty"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataFunctionCall) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataFunctionCall(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output streamed from a Workflow execution.
type WorkflowResultEventOutputDataJson struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string     `json:"delta,omitempty" url:"delta,omitempty"`
	Value interface{} `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataJson) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataJson) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataJson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataJson(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output streamed from a Workflow execution.
type WorkflowResultEventOutputDataNumber struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string  `json:"delta,omitempty" url:"delta,omitempty"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataNumber) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataNumber(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Search Results output streamed from a Workflow execution.
type WorkflowResultEventOutputDataSearchResults struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string         `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataSearchResults) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataSearchResults(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output streamed from a Workflow execution.
type WorkflowResultEventOutputDataString struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state" url:"state"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING.
	Delta *string `json:"delta,omitempty" url:"delta,omitempty"`
	// The entire string value. Will be non-null for events of state FULFILLED.
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkflowResultEventOutputDataString) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkflowResultEventOutputDataString) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataString
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataString(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowStreamEvent struct {
	Type     string
	Workflow *WorkflowExecutionWorkflowResultEvent
	Node     *WorkflowExecutionNodeResultEvent
}

func (w *WorkflowStreamEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "WORKFLOW":
		value := new(WorkflowExecutionWorkflowResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Workflow = value
	case "NODE":
		value := new(WorkflowExecutionNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Node = value
	}
	return nil
}

func (w WorkflowStreamEvent) MarshalJSON() ([]byte, error) {
	if w.Workflow != nil {
		return core.MarshalJSONWithExtraProperty(w.Workflow, "type", "WORKFLOW")
	}
	if w.Node != nil {
		return core.MarshalJSONWithExtraProperty(w.Node, "type", "NODE")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowStreamEventVisitor interface {
	VisitWorkflow(*WorkflowExecutionWorkflowResultEvent) error
	VisitNode(*WorkflowExecutionNodeResultEvent) error
}

func (w *WorkflowStreamEvent) Accept(visitor WorkflowStreamEventVisitor) error {
	if w.Workflow != nil {
		return visitor.VisitWorkflow(w.Workflow)
	}
	if w.Node != nil {
		return visitor.VisitNode(w.Node)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}
