// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
)

type ListIntegrationToolsRequest struct {
	// Whether to filter the tools by important
	Important *bool `json:"-" url:"important,omitempty"`
	// Whether to include deprecated tools
	IncludeDeprecated *bool `json:"-" url:"include_deprecated,omitempty"`
	// The Vellum Integration name
	IntegrationName *string `json:"-" url:"integration_name,omitempty"`
	// Number of results to return per page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// The initial index from which to return the results.
	Offset *int `json:"-" url:"offset,omitempty"`
	// The search term to filter the tools by
	Search *string `json:"-" url:"search,omitempty"`
}

type ComponentsSchemasSlimComposioToolDefinition = *SlimComposioToolDefinition

type PaginatedSlimToolDefinitionList struct {
	Count    int                                           `json:"count" url:"count"`
	Next     *string                                       `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                                       `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []ComponentsSchemasSlimComposioToolDefinition `json:"results" url:"results"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedSlimToolDefinitionList) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedSlimToolDefinitionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimToolDefinitionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimToolDefinitionList(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimToolDefinitionList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type SlimComposioToolDefinition struct {
	Integration *ToolDefinitionIntegration `json:"integration" url:"integration"`
	Name        string                     `json:"name" url:"name"`
	Label       string                     `json:"label" url:"label"`
	Description string                     `json:"description" url:"description"`
	provider    string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SlimComposioToolDefinition) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SlimComposioToolDefinition) Provider() string {
	return s.provider
}

func (s *SlimComposioToolDefinition) UnmarshalJSON(data []byte) error {
	type embed SlimComposioToolDefinition
	var unmarshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimComposioToolDefinition(unmarshaler.embed)
	if unmarshaler.Provider != "COMPOSIO" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "COMPOSIO", unmarshaler.Provider)
	}
	s.provider = unmarshaler.Provider

	extraProperties, err := core.ExtractExtraProperties(data, *s, "provider")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimComposioToolDefinition) MarshalJSON() ([]byte, error) {
	type embed SlimComposioToolDefinition
	var marshaler = struct {
		embed
		Provider string `json:"provider"`
	}{
		embed:    embed(*s),
		Provider: "COMPOSIO",
	}
	return json.Marshal(marshaler)
}

func (s *SlimComposioToolDefinition) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
