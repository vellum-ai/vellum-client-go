// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
)

type NamedTestCaseVariableValueRequest struct {
	Type          string
	String        *NamedTestCaseStringVariableValueRequest
	Number        *NamedTestCaseNumberVariableValueRequest
	Json          *NamedTestCaseJsonVariableValueRequest
	ChatHistory   *NamedTestCaseChatHistoryVariableValueRequest
	SearchResults *NamedTestCaseSearchResultsVariableValueRequest
	Error         *NamedTestCaseErrorVariableValueRequest
}

func NewNamedTestCaseVariableValueRequestFromString(value *NamedTestCaseStringVariableValueRequest) *NamedTestCaseVariableValueRequest {
	return &NamedTestCaseVariableValueRequest{Type: "STRING", String: value}
}

func NewNamedTestCaseVariableValueRequestFromNumber(value *NamedTestCaseNumberVariableValueRequest) *NamedTestCaseVariableValueRequest {
	return &NamedTestCaseVariableValueRequest{Type: "NUMBER", Number: value}
}

func NewNamedTestCaseVariableValueRequestFromJson(value *NamedTestCaseJsonVariableValueRequest) *NamedTestCaseVariableValueRequest {
	return &NamedTestCaseVariableValueRequest{Type: "JSON", Json: value}
}

func NewNamedTestCaseVariableValueRequestFromChatHistory(value *NamedTestCaseChatHistoryVariableValueRequest) *NamedTestCaseVariableValueRequest {
	return &NamedTestCaseVariableValueRequest{Type: "CHAT_HISTORY", ChatHistory: value}
}

func NewNamedTestCaseVariableValueRequestFromSearchResults(value *NamedTestCaseSearchResultsVariableValueRequest) *NamedTestCaseVariableValueRequest {
	return &NamedTestCaseVariableValueRequest{Type: "SEARCH_RESULTS", SearchResults: value}
}

func NewNamedTestCaseVariableValueRequestFromError(value *NamedTestCaseErrorVariableValueRequest) *NamedTestCaseVariableValueRequest {
	return &NamedTestCaseVariableValueRequest{Type: "ERROR", Error: value}
}

func (n *NamedTestCaseVariableValueRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NamedTestCaseStringVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NamedTestCaseNumberVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NamedTestCaseJsonVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NamedTestCaseChatHistoryVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NamedTestCaseSearchResultsVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NamedTestCaseErrorVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	}
	return nil
}

func (n NamedTestCaseVariableValueRequest) MarshalJSON() ([]byte, error) {
	switch n.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.Type, n)
	case "STRING":
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseStringVariableValueRequest
		}{
			Type:                                    n.Type,
			NamedTestCaseStringVariableValueRequest: n.String,
		}
		return json.Marshal(marshaler)
	case "NUMBER":
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseNumberVariableValueRequest
		}{
			Type:                                    n.Type,
			NamedTestCaseNumberVariableValueRequest: n.Number,
		}
		return json.Marshal(marshaler)
	case "JSON":
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseJsonVariableValueRequest
		}{
			Type:                                  n.Type,
			NamedTestCaseJsonVariableValueRequest: n.Json,
		}
		return json.Marshal(marshaler)
	case "CHAT_HISTORY":
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseChatHistoryVariableValueRequest
		}{
			Type: n.Type,
			NamedTestCaseChatHistoryVariableValueRequest: n.ChatHistory,
		}
		return json.Marshal(marshaler)
	case "SEARCH_RESULTS":
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseSearchResultsVariableValueRequest
		}{
			Type: n.Type,
			NamedTestCaseSearchResultsVariableValueRequest: n.SearchResults,
		}
		return json.Marshal(marshaler)
	case "ERROR":
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseErrorVariableValueRequest
		}{
			Type:                                   n.Type,
			NamedTestCaseErrorVariableValueRequest: n.Error,
		}
		return json.Marshal(marshaler)
	}
}

type NamedTestCaseVariableValueRequestVisitor interface {
	VisitString(*NamedTestCaseStringVariableValueRequest) error
	VisitNumber(*NamedTestCaseNumberVariableValueRequest) error
	VisitJson(*NamedTestCaseJsonVariableValueRequest) error
	VisitChatHistory(*NamedTestCaseChatHistoryVariableValueRequest) error
	VisitSearchResults(*NamedTestCaseSearchResultsVariableValueRequest) error
	VisitError(*NamedTestCaseErrorVariableValueRequest) error
}

func (n *NamedTestCaseVariableValueRequest) Accept(visitor NamedTestCaseVariableValueRequestVisitor) error {
	switch n.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", n.Type, n)
	case "STRING":
		return visitor.VisitString(n.String)
	case "NUMBER":
		return visitor.VisitNumber(n.Number)
	case "JSON":
		return visitor.VisitJson(n.Json)
	case "CHAT_HISTORY":
		return visitor.VisitChatHistory(n.ChatHistory)
	case "SEARCH_RESULTS":
		return visitor.VisitSearchResults(n.SearchResults)
	case "ERROR":
		return visitor.VisitError(n.Error)
	}
}

type TestSuiteTestCase struct {
	Id               *string                  `json:"id,omitempty"`
	Label            *string                  `json:"label,omitempty"`
	InputValues      []*TestCaseVariableValue `json:"input_values,omitempty"`
	EvaluationValues []*TestCaseVariableValue `json:"evaluation_values,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteTestCase) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCase(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCase) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpsertTestSuiteTestCaseRequest struct {
	UpsertTestSuiteTestCaseRequestId *string                              `json:"id,omitempty"`
	Label                            *string                              `json:"label,omitempty"`
	InputValues                      []*NamedTestCaseVariableValueRequest `json:"input_values,omitempty"`
	EvaluationValues                 []*NamedTestCaseVariableValueRequest `json:"evaluation_values,omitempty"`
}
